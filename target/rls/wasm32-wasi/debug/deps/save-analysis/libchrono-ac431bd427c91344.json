{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11","program":"/Users/andrewbetts/.rustup/toolchains/1.43.0-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","chrono","/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=ac431bd427c91344","-C","extra-filename=-ac431bd427c91344","--out-dir","/Users/andrewbetts/repos/fastly-template-rust-default/target/rls/wasm32-wasi/debug/deps","--target","wasm32-wasi","-L","dependency=/Users/andrewbetts/repos/fastly-template-rust-default/target/rls/wasm32-wasi/debug/deps","-L","dependency=/Users/andrewbetts/repos/fastly-template-rust-default/target/rls/debug/deps","--extern","num_integer=/Users/andrewbetts/repos/fastly-template-rust-default/target/rls/wasm32-wasi/debug/deps/libnum_integer-e8a46a716bc7ae6c.rmeta","--extern","num_traits=/Users/andrewbetts/repos/fastly-template-rust-default/target/rls/wasm32-wasi/debug/deps/libnum_traits-f1aa60574fbcf335.rmeta","--extern","serde=/Users/andrewbetts/repos/fastly-template-rust-default/target/rls/wasm32-wasi/debug/deps/libserde-23dfd7ead167372a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/andrewbetts/.rustup/toolchains/1.43.0-x86_64-apple-darwin"],"output":"/Users/andrewbetts/repos/fastly-template-rust-default/target/rls/wasm32-wasi/debug/deps/libchrono-ac431bd427c91344.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[7218491812745624808,14431432121363525570]},"crate_root":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src","external_crates":[{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9874943935066172078,296964287417570914]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2813296285236616126,12127243467792302984]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12110586108711633819,17695725132007183064]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11784888404595395643,6418486929824261945]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13046088439185418316,6158882587377705848]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7594861844997555397,350375262471724621]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9682724398053927261,4529895886424739731]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14307014254607400643,15055931227551932373]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[5618053613237031247,1517129145237213042]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16522300773154492650,6773737058994377900]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[13949917638215218759,11665051632110064509]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8175234815677046574,8192173426369124908]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":13,"id":{"name":"wasi","disambiguator":[1304420592815929761,5537569943461119643]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":14,"id":{"name":"num_integer","disambiguator":[6279365536963176595,10526319946234489296]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":15,"id":{"name":"num_traits","disambiguator":[9602272808799699122,9677322963205657068]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":16,"id":{"name":"serde","disambiguator":[5623935964966163107,3487184102806769031]}},{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":17,"id":{"name":"serde_derive","disambiguator":[8785870541634816863,5836998178114199115]}}],"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":76,"byte_end":42591,"line_start":4,"line_end":1125,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1817},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19484,"byte_end":19492,"line_start":438,"line_end":438,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":168},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19595,"byte_end":19603,"line_start":442,"line_end":442,"column_start":36,"column_end":44},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":166},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19605,"byte_end":19611,"line_start":442,"line_end":442,"column_start":46,"column_end":52},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1859},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19613,"byte_end":19624,"line_start":442,"line_end":442,"column_start":54,"column_end":65},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1908},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19626,"byte_end":19629,"line_start":442,"line_end":442,"column_start":67,"column_end":70},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1893},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19631,"byte_end":19642,"line_start":442,"line_end":442,"column_start":72,"column_end":83},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1964},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19679,"byte_end":19688,"line_start":443,"line_end":443,"column_start":35,"column_end":44},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1987},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19690,"byte_end":19697,"line_start":443,"line_end":443,"column_start":46,"column_end":53},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2007},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19699,"byte_end":19708,"line_start":443,"line_end":443,"column_start":55,"column_end":64},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2032},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19710,"byte_end":19723,"line_start":443,"line_end":443,"column_start":66,"column_end":79},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2057},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19741,"byte_end":19745,"line_start":444,"line_end":444,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":892},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19747,"byte_end":19755,"line_start":444,"line_end":444,"column_start":22,"column_end":30},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":893},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19757,"byte_end":19765,"line_start":444,"line_end":444,"column_start":32,"column_end":40},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2088},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19787,"byte_end":19795,"line_start":445,"line_end":445,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2064},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19797,"byte_end":19810,"line_start":445,"line_end":445,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2310},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19912,"byte_end":19922,"line_start":448,"line_end":448,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1426},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19924,"byte_end":19935,"line_start":448,"line_end":448,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1721},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19953,"byte_end":19964,"line_start":449,"line_end":449,"column_start":16,"column_end":27},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1787},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20099,"byte_end":20107,"line_start":453,"line_end":453,"column_start":32,"column_end":40},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":1806},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20109,"byte_end":20117,"line_start":453,"line_end":453,"column_start":42,"column_end":50},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":2410},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20119,"byte_end":20126,"line_start":453,"line_end":453,"column_start":52,"column_end":59},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":168},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20160,"byte_end":20168,"line_start":454,"line_end":454,"column_start":32,"column_end":40},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":166},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20170,"byte_end":20176,"line_start":454,"line_end":454,"column_start":42,"column_end":48},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":1908},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20275,"byte_end":20278,"line_start":457,"line_end":457,"column_start":32,"column_end":35},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":1893},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20280,"byte_end":20291,"line_start":457,"line_end":457,"column_start":37,"column_end":48},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":1964},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20325,"byte_end":20334,"line_start":458,"line_end":458,"column_start":32,"column_end":41},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":2007},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20336,"byte_end":20345,"line_start":458,"line_end":458,"column_start":43,"column_end":52},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":2032},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20347,"byte_end":20360,"line_start":458,"line_end":458,"column_start":54,"column_end":67},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":2057},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20393,"byte_end":20397,"line_start":459,"line_end":459,"column_start":31,"column_end":35},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":2088},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20430,"byte_end":20438,"line_start":460,"line_end":460,"column_start":32,"column_end":40},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":2064},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20440,"byte_end":20453,"line_start":460,"line_end":460,"column_start":42,"column_end":55},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":1721},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20486,"byte_end":20497,"line_start":461,"line_end":461,"column_start":31,"column_end":42},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":1893},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":88558,"byte_end":88569,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":133}},{"kind":"Use","ref_id":{"krate":0,"index":1908},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":88644,"byte_end":88647,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":133}},{"kind":"Use","ref_id":{"krate":0,"index":1964},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21072,"byte_end":21081,"line_start":486,"line_end":486,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":277}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21083,"byte_end":21091,"line_start":486,"line_end":486,"column_start":37,"column_end":45},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":277}},{"kind":"Use","ref_id":{"krate":0,"index":399},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21093,"byte_end":21101,"line_start":486,"line_end":486,"column_start":47,"column_end":55},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":277}},{"kind":"Use","ref_id":{"krate":0,"index":1987},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21131,"byte_end":21138,"line_start":487,"line_end":487,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":277}},{"kind":"Use","ref_id":{"krate":0,"index":2007},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21164,"byte_end":21173,"line_start":488,"line_end":488,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":277}},{"kind":"Use","ref_id":{"krate":0,"index":2032},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21203,"byte_end":21216,"line_start":489,"line_end":489,"column_start":29,"column_end":42},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":277}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21937,"byte_end":21938,"line_start":509,"line_end":509,"column_start":41,"column_end":42},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":864}},{"kind":"Use","ref_id":{"krate":0,"index":2382},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":492815,"byte_end":492828,"line_start":40,"line_end":40,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1387}},{"kind":"Use","ref_id":{"krate":0,"index":2351},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":492852,"byte_end":492858,"line_start":41,"line_end":41,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1387}},{"kind":"Use","ref_id":{"krate":0,"index":1643},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":492881,"byte_end":492886,"line_start":42,"line_end":42,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1387}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21937,"byte_end":21938,"line_start":509,"line_end":509,"column_start":41,"column_end":42},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1729}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":76,"byte_end":42591,"line_start":4,"line_end":1125,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":15},{"krate":0,"index":20},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":58},{"krate":0,"index":133},{"krate":0,"index":277},{"krate":0,"index":866},{"krate":0,"index":1001},{"krate":0,"index":1387},{"krate":0,"index":1715},{"krate":0,"index":1729},{"krate":0,"index":1731},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1746},{"krate":0,"index":2410},{"krate":0,"index":2443},{"krate":0,"index":2444},{"krate":0,"index":2440},{"krate":0,"index":2441},{"krate":0,"index":2439},{"krate":0,"index":2437},{"krate":0,"index":2435},{"krate":0,"index":2432},{"krate":0,"index":1750},{"krate":0,"index":1757},{"krate":0,"index":1759},{"krate":0,"index":1762},{"krate":0,"index":2446},{"krate":0,"index":2452},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":1763},{"krate":0,"index":1765},{"krate":0,"index":1787},{"krate":0,"index":1806}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"! # Chrono: Date and Time for Rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It aims to be a feature-complete superset of","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"! the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"! In particular,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! * Chrono strictly adheres to ISO 8601.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"! * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"! * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"! which Chrono builds upon and should acknowledge:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! * [Initial research on","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"!    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"! * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"! * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! Any significant changes to Chrono are documented in","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"! the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/master/CHANGELOG.md) file.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":957,"byte_end":1050,"line_start":23,"line_end":23,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1051,"byte_end":1054,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! ## Usage","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1055,"byte_end":1067,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1068,"byte_end":1071,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! Put this in your `Cargo.toml`:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1072,"byte_end":1106,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1107,"byte_end":1110,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1111,"byte_end":1122,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1123,"byte_end":1141,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"! chrono = \"0.4\"","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1142,"byte_end":1160,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1161,"byte_end":1168,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1169,"byte_end":1172,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! Or, if you want [Serde](https://github.com/serde-rs/serde) include the","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1173,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"! feature like this:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1248,"byte_end":1270,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1271,"byte_end":1274,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1275,"byte_end":1286,"line_start":37,"line_end":37,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1287,"byte_end":1305,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"! chrono = { version = \"0.4\", features = [\"serde\"] }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1306,"byte_end":1360,"line_start":39,"line_end":39,"column_start":1,"column_end":55}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1361,"byte_end":1368,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1369,"byte_end":1372,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! Then put this in your crate root:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1373,"byte_end":1410,"line_start":42,"line_end":42,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1411,"byte_end":1414,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1415,"byte_end":1426,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"! extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1427,"byte_end":1451,"line_start":45,"line_end":45,"column_start":1,"column_end":25}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1452,"byte_end":1459,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1460,"byte_end":1463,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! Avoid using `use chrono::*;` as Chrono exports several modules other than types.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1464,"byte_end":1548,"line_start":48,"line_end":48,"column_start":1,"column_end":85}},{"value":"! If you prefer the glob imports, use the following instead:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1549,"byte_end":1611,"line_start":49,"line_end":49,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1612,"byte_end":1615,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1616,"byte_end":1627,"line_start":51,"line_end":51,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1628,"byte_end":1655,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1656,"byte_end":1663,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1664,"byte_end":1667,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! ## Overview","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1668,"byte_end":1683,"line_start":55,"line_end":55,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1684,"byte_end":1687,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! ### Duration","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1688,"byte_end":1704,"line_start":57,"line_end":57,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1705,"byte_end":1708,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"! Chrono currently uses","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1709,"byte_end":1734,"line_start":59,"line_end":59,"column_start":1,"column_end":26}},{"value":"! the [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html) type","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1735,"byte_end":1821,"line_start":60,"line_end":60,"column_start":1,"column_end":87}},{"value":"! from the `time` crate to represent the magnitude of a time span.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1822,"byte_end":1890,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"! Since this has the same name as the newer, standard type for duration,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1891,"byte_end":1965,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"! the reference will refer this type as `OldDuration`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1966,"byte_end":2022,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"! Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2023,"byte_end":2094,"line_start":64,"line_end":64,"column_start":1,"column_end":72}},{"value":"! nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2095,"byte_end":2170,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"! months.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2171,"byte_end":2182,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2183,"byte_end":2186,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! Chrono does not yet natively support","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2187,"byte_end":2227,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"! the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2228,"byte_end":2320,"line_start":69,"line_end":69,"column_start":1,"column_end":93}},{"value":"! but it will be supported in the future.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2321,"byte_end":2364,"line_start":70,"line_end":70,"column_start":1,"column_end":44}},{"value":"! Meanwhile you can convert between two types with","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2365,"byte_end":2417,"line_start":71,"line_end":71,"column_start":1,"column_end":53}},{"value":"! [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2418,"byte_end":2515,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"! and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2516,"byte_end":2523,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"! [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2524,"byte_end":2617,"line_start":74,"line_end":74,"column_start":1,"column_end":94}},{"value":"! methods.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2618,"byte_end":2630,"line_start":75,"line_end":75,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2631,"byte_end":2634,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! ### Date and Time","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2635,"byte_end":2656,"line_start":77,"line_end":77,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2657,"byte_end":2660,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! Chrono provides a","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2661,"byte_end":2682,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"! [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2683,"byte_end":2727,"line_start":80,"line_end":80,"column_start":1,"column_end":45}},{"value":"! type to represent a date and a time in a timezone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2728,"byte_end":2782,"line_start":81,"line_end":81,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2783,"byte_end":2786,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2787,"byte_end":2861,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"! that is unconcerned with timezones, consider","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2862,"byte_end":2910,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"! [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2911,"byte_end":2995,"line_start":85,"line_end":85,"column_start":1,"column_end":85}},{"value":"! which tracks your system clock, or","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2996,"byte_end":3034,"line_start":86,"line_end":86,"column_start":1,"column_end":39}},{"value":"! [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3035,"byte_end":3119,"line_start":87,"line_end":87,"column_start":1,"column_end":85}},{"value":"! is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3120,"byte_end":3201,"line_start":88,"line_end":88,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3202,"byte_end":3205,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3206,"byte_end":3267,"line_start":90,"line_end":90,"column_start":1,"column_end":62}},{"value":"! the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3268,"byte_end":3330,"line_start":91,"line_end":91,"column_start":1,"column_end":63}},{"value":"! which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3331,"byte_end":3411,"line_start":92,"line_end":92,"column_start":1,"column_end":81}},{"value":"! There are three well-known `TimeZone` implementations:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3412,"byte_end":3470,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3471,"byte_end":3474,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"! * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3475,"byte_end":3569,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3570,"byte_end":3573,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"! * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3574,"byte_end":3659,"line_start":97,"line_end":97,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3660,"byte_end":3663,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3664,"byte_end":3733,"line_start":99,"line_end":99,"column_start":1,"column_end":70}},{"value":"!   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3734,"byte_end":3801,"line_start":100,"line_end":100,"column_start":1,"column_end":68}},{"value":"!   This often results from the parsed textual date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3802,"byte_end":3865,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"!   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3866,"byte_end":3955,"line_start":102,"line_end":102,"column_start":1,"column_end":90}},{"value":"!   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3956,"byte_end":4023,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4024,"byte_end":4027,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"! `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4028,"byte_end":4104,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"! but can be converted to each other using","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4105,"byte_end":4149,"line_start":106,"line_end":106,"column_start":1,"column_end":45}},{"value":"! the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4150,"byte_end":4238,"line_start":107,"line_end":107,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4239,"byte_end":4242,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"! You can get the current date and time in the UTC time zone","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4243,"byte_end":4305,"line_start":109,"line_end":109,"column_start":1,"column_end":63}},{"value":"! ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4306,"byte_end":4363,"line_start":110,"line_end":110,"column_start":1,"column_end":58}},{"value":"! or in the local time zone","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4364,"byte_end":4393,"line_start":111,"line_end":111,"column_start":1,"column_end":30}},{"value":"! ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4394,"byte_end":4456,"line_start":112,"line_end":112,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4457,"byte_end":4460,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4461,"byte_end":4472,"line_start":114,"line_end":114,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4473,"byte_end":4500,"line_start":115,"line_end":115,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4501,"byte_end":4504,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4505,"byte_end":4592,"line_start":117,"line_end":117,"column_start":1,"column_end":88}},{"value":"! let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4593,"byte_end":4685,"line_start":118,"line_end":118,"column_start":1,"column_end":93}},{"value":"! # let _ = utc; let _ = local;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4686,"byte_end":4719,"line_start":119,"line_end":119,"column_start":1,"column_end":34}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4720,"byte_end":4727,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4728,"byte_end":4731,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"! Alternatively, you can create your own date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4732,"byte_end":4789,"line_start":122,"line_end":122,"column_start":1,"column_end":58}},{"value":"! This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4790,"byte_end":4870,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"! but in turn we get a rich combination of initialization methods.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4871,"byte_end":4939,"line_start":124,"line_end":124,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4940,"byte_end":4943,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4944,"byte_end":4955,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4956,"byte_end":4983,"line_start":127,"line_end":127,"column_start":1,"column_end":28}},{"value":"! use chrono::offset::LocalResult;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4984,"byte_end":5020,"line_start":128,"line_end":128,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5021,"byte_end":5024,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5025,"byte_end":5103,"line_start":130,"line_end":130,"column_start":1,"column_end":79}},{"value":"! // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5104,"byte_end":5167,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"! assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5168,"byte_end":5225,"line_start":132,"line_end":132,"column_start":1,"column_end":58}},{"value":"! // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5226,"byte_end":5283,"line_start":133,"line_end":133,"column_start":1,"column_end":58}},{"value":"! assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5284,"byte_end":5358,"line_start":134,"line_end":134,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5359,"byte_end":5362,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5363,"byte_end":5455,"line_start":136,"line_end":136,"column_start":1,"column_end":93}},{"value":"! assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5456,"byte_end":5529,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"! assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5530,"byte_end":5606,"line_start":138,"line_end":138,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5607,"byte_end":5610,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"! // dynamic verification","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5611,"byte_end":5638,"line_start":140,"line_end":140,"column_start":1,"column_end":28}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5639,"byte_end":5702,"line_start":141,"line_end":141,"column_start":1,"column_end":64}},{"value":"!            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5703,"byte_end":5780,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5781,"byte_end":5864,"line_start":143,"line_end":143,"column_start":1,"column_end":84}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5865,"byte_end":5949,"line_start":144,"line_end":144,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5950,"byte_end":5953,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"! // other time zone objects can be used to construct a local datetime.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5954,"byte_end":6027,"line_start":146,"line_end":146,"column_start":1,"column_end":74}},{"value":"! // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6028,"byte_end":6125,"line_start":147,"line_end":147,"column_start":1,"column_end":98}},{"value":"! let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6126,"byte_end":6196,"line_start":148,"line_end":148,"column_start":1,"column_end":71}},{"value":"! let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6197,"byte_end":6290,"line_start":149,"line_end":149,"column_start":1,"column_end":94}},{"value":"! assert_eq!(dt, fixed_dt);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6291,"byte_end":6320,"line_start":150,"line_end":150,"column_start":1,"column_end":30}},{"value":"! # let _ = local_dt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6321,"byte_end":6344,"line_start":151,"line_end":151,"column_start":1,"column_end":24}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6345,"byte_end":6352,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6353,"byte_end":6356,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"! Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6357,"byte_end":6448,"line_start":154,"line_end":154,"column_start":1,"column_end":92}},{"value":"! Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6449,"byte_end":6531,"line_start":155,"line_end":155,"column_start":1,"column_end":83}},{"value":"! [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6532,"byte_end":6602,"line_start":156,"line_end":156,"column_start":1,"column_end":71}},{"value":"! Addition and subtraction is also supported.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6603,"byte_end":6650,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"! The following illustrates most supported operations to the date and time:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6651,"byte_end":6728,"line_start":158,"line_end":158,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6729,"byte_end":6732,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6733,"byte_end":6744,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"! # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6745,"byte_end":6771,"line_start":161,"line_end":161,"column_start":1,"column_end":27}},{"value":"! extern crate time;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6772,"byte_end":6794,"line_start":162,"line_end":162,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6795,"byte_end":6798,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"! # fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6799,"byte_end":6816,"line_start":164,"line_end":164,"column_start":1,"column_end":18}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6817,"byte_end":6844,"line_start":165,"line_end":165,"column_start":1,"column_end":28}},{"value":"! use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6845,"byte_end":6868,"line_start":166,"line_end":166,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6869,"byte_end":6872,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"! // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6873,"byte_end":6939,"line_start":168,"line_end":168,"column_start":1,"column_end":67}},{"value":"! let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6940,"byte_end":7033,"line_start":169,"line_end":169,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7034,"byte_end":7037,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"! // property accessors","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7038,"byte_end":7063,"line_start":171,"line_end":171,"column_start":1,"column_end":26}},{"value":"! assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7064,"byte_end":7130,"line_start":172,"line_end":172,"column_start":1,"column_end":67}},{"value":"! assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7131,"byte_end":7207,"line_start":173,"line_end":173,"column_start":1,"column_end":77}},{"value":"! assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7208,"byte_end":7276,"line_start":174,"line_end":174,"column_start":1,"column_end":69}},{"value":"! assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7277,"byte_end":7320,"line_start":175,"line_end":175,"column_start":1,"column_end":44}},{"value":"! assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7321,"byte_end":7395,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"! assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7396,"byte_end":7449,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7450,"byte_end":7546,"line_start":178,"line_end":178,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7547,"byte_end":7550,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"! // time zone accessor and manipulation","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7551,"byte_end":7593,"line_start":180,"line_end":180,"column_start":1,"column_end":43}},{"value":"! assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7594,"byte_end":7656,"line_start":181,"line_end":181,"column_start":1,"column_end":63}},{"value":"! assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7657,"byte_end":7716,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"! assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7717,"byte_end":7815,"line_start":183,"line_end":183,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7816,"byte_end":7819,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"! // a sample of property manipulations (validates dynamically)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7820,"byte_end":7885,"line_start":185,"line_end":185,"column_start":1,"column_end":66}},{"value":"! assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7886,"byte_end":7977,"line_start":186,"line_end":186,"column_start":1,"column_end":92}},{"value":"! assert_eq!(dt.with_day(32), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7978,"byte_end":8016,"line_start":187,"line_end":187,"column_start":1,"column_end":39}},{"value":"! assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8017,"byte_end":8113,"line_start":188,"line_end":188,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8114,"byte_end":8117,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"! // arithmetic operations","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8118,"byte_end":8146,"line_start":190,"line_end":190,"column_start":1,"column_end":29}},{"value":"! let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8147,"byte_end":8201,"line_start":191,"line_end":191,"column_start":1,"column_end":55}},{"value":"! let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8202,"byte_end":8256,"line_start":192,"line_end":192,"column_start":1,"column_end":55}},{"value":"! assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8257,"byte_end":8338,"line_start":193,"line_end":193,"column_start":1,"column_end":82}},{"value":"! assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8339,"byte_end":8419,"line_start":194,"line_end":194,"column_start":1,"column_end":81}},{"value":"! assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8420,"byte_end":8507,"line_start":195,"line_end":195,"column_start":1,"column_end":88}},{"value":"!            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8508,"byte_end":8563,"line_start":196,"line_end":196,"column_start":1,"column_end":56}},{"value":"! assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8564,"byte_end":8651,"line_start":197,"line_end":197,"column_start":1,"column_end":88}},{"value":"!            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8652,"byte_end":8709,"line_start":198,"line_end":198,"column_start":1,"column_end":58}},{"value":"! # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8710,"byte_end":8717,"line_start":199,"line_end":199,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8718,"byte_end":8725,"line_start":200,"line_end":200,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8726,"byte_end":8729,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"! ### Formatting and Parsing","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8730,"byte_end":8760,"line_start":202,"line_end":202,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8761,"byte_end":8764,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"! Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8765,"byte_end":8852,"line_start":204,"line_end":204,"column_start":1,"column_end":88}},{"value":"! which format is equivalent to the familiar `strftime` format.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8853,"byte_end":8918,"line_start":205,"line_end":205,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8919,"byte_end":8922,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"! See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8923,"byte_end":8992,"line_start":207,"line_end":207,"column_start":1,"column_end":70}},{"value":"! documentation for full syntax and list of specifiers.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8993,"byte_end":9050,"line_start":208,"line_end":208,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9051,"byte_end":9054,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"! The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9055,"byte_end":9149,"line_start":210,"line_end":210,"column_start":1,"column_end":95}},{"value":"! Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9150,"byte_end":9235,"line_start":211,"line_end":211,"column_start":1,"column_end":86}},{"value":"! [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9236,"byte_end":9304,"line_start":212,"line_end":212,"column_start":1,"column_end":69}},{"value":"! for well-known formats.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9305,"byte_end":9332,"line_start":213,"line_end":213,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9333,"byte_end":9336,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9337,"byte_end":9348,"line_start":215,"line_end":215,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9349,"byte_end":9376,"line_start":216,"line_end":216,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9377,"byte_end":9380,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9381,"byte_end":9434,"line_start":218,"line_end":218,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9435,"byte_end":9517,"line_start":219,"line_end":219,"column_start":1,"column_end":83}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9518,"byte_end":9602,"line_start":220,"line_end":220,"column_start":1,"column_end":85}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9603,"byte_end":9688,"line_start":221,"line_end":221,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9689,"byte_end":9692,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"! assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9693,"byte_end":9751,"line_start":223,"line_end":223,"column_start":1,"column_end":59}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9752,"byte_end":9819,"line_start":224,"line_end":224,"column_start":1,"column_end":68}},{"value":"! assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9820,"byte_end":9881,"line_start":225,"line_end":225,"column_start":1,"column_end":62}},{"value":"! assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9882,"byte_end":9942,"line_start":226,"line_end":226,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9943,"byte_end":9946,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"! // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9947,"byte_end":10019,"line_start":228,"line_end":228,"column_start":1,"column_end":73}},{"value":"! let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10020,"byte_end":10086,"line_start":229,"line_end":229,"column_start":1,"column_end":67}},{"value":"! assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10087,"byte_end":10162,"line_start":230,"line_end":230,"column_start":1,"column_end":76}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10163,"byte_end":10170,"line_start":231,"line_end":231,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10171,"byte_end":10174,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"! Parsing can be done with three methods:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10175,"byte_end":10218,"line_start":233,"line_end":233,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10219,"byte_end":10222,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"! 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10223,"byte_end":10314,"line_start":235,"line_end":235,"column_start":1,"column_end":92}},{"value":"!    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10315,"byte_end":10406,"line_start":236,"line_end":236,"column_start":1,"column_end":92}},{"value":"!    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10407,"byte_end":10495,"line_start":237,"line_end":237,"column_start":1,"column_end":89}},{"value":"!    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10496,"byte_end":10556,"line_start":238,"line_end":238,"column_start":1,"column_end":61}},{"value":"!    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10557,"byte_end":10637,"line_start":239,"line_end":239,"column_start":1,"column_end":81}},{"value":"!    format specifier prints, and requires the offset to be present.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10638,"byte_end":10708,"line_start":240,"line_end":240,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10709,"byte_end":10712,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"! 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10713,"byte_end":10801,"line_start":242,"line_end":242,"column_start":1,"column_end":89}},{"value":"!    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10802,"byte_end":10874,"line_start":243,"line_end":243,"column_start":1,"column_end":73}},{"value":"!    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10875,"byte_end":10970,"line_start":244,"line_end":244,"column_start":1,"column_end":96}},{"value":"!    It *cannot* be used when the offset can be missing.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10971,"byte_end":11029,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"!    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11030,"byte_end":11119,"line_start":246,"line_end":246,"column_start":1,"column_end":90}},{"value":"!    and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11120,"byte_end":11130,"line_start":247,"line_end":247,"column_start":1,"column_end":11}},{"value":"!    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11131,"byte_end":11220,"line_start":248,"line_end":248,"column_start":1,"column_end":90}},{"value":"!    are similar but for well-known formats.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11221,"byte_end":11267,"line_start":249,"line_end":249,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11268,"byte_end":11271,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"! 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11272,"byte_end":11366,"line_start":251,"line_end":251,"column_start":1,"column_end":95}},{"value":"!    similar but returns `DateTime` of given offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11367,"byte_end":11421,"line_start":252,"line_end":252,"column_start":1,"column_end":55}},{"value":"!    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11422,"byte_end":11509,"line_start":253,"line_end":253,"column_start":1,"column_end":88}},{"value":"!    It issues an error when the input contains an explicit offset different","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11510,"byte_end":11588,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"!    from the current offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11589,"byte_end":11620,"line_start":255,"line_end":255,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11621,"byte_end":11624,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"! More detailed control over the parsing process is available via","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11625,"byte_end":11692,"line_start":257,"line_end":257,"column_start":1,"column_end":68}},{"value":"! [`format`](./format/index.html) module.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11693,"byte_end":11736,"line_start":258,"line_end":258,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11737,"byte_end":11740,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11741,"byte_end":11752,"line_start":260,"line_end":260,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11753,"byte_end":11780,"line_start":261,"line_end":261,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11781,"byte_end":11784,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11785,"byte_end":11838,"line_start":263,"line_end":263,"column_start":1,"column_end":54}},{"value":"! let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11839,"byte_end":11903,"line_start":264,"line_end":264,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11904,"byte_end":11907,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"! // method 1","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11908,"byte_end":11923,"line_start":266,"line_end":266,"column_start":1,"column_end":16}},{"value":"! assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11924,"byte_end":12004,"line_start":267,"line_end":267,"column_start":1,"column_end":81}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12005,"byte_end":12090,"line_start":268,"line_end":268,"column_start":1,"column_end":86}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12091,"byte_end":12190,"line_start":269,"line_end":269,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12191,"byte_end":12194,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"! // method 2","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12195,"byte_end":12210,"line_start":271,"line_end":271,"column_start":1,"column_end":16}},{"value":"! assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12211,"byte_end":12305,"line_start":272,"line_end":272,"column_start":1,"column_end":95}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12306,"byte_end":12343,"line_start":273,"line_end":273,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12344,"byte_end":12423,"line_start":274,"line_end":274,"column_start":1,"column_end":80}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12424,"byte_end":12461,"line_start":275,"line_end":275,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12462,"byte_end":12558,"line_start":276,"line_end":276,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12559,"byte_end":12562,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"! // method 3","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12563,"byte_end":12578,"line_start":278,"line_end":278,"column_start":1,"column_end":16}},{"value":"! assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12579,"byte_end":12677,"line_start":279,"line_end":279,"column_start":1,"column_end":99}},{"value":"! assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12678,"byte_end":12778,"line_start":280,"line_end":280,"column_start":1,"column_end":101}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12779,"byte_end":12782,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"! // oops, the year is missing!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12783,"byte_end":12816,"line_start":282,"line_end":282,"column_start":1,"column_end":34}},{"value":"! assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12817,"byte_end":12902,"line_start":283,"line_end":283,"column_start":1,"column_end":86}},{"value":"! // oops, the format string does not include the year at all!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12903,"byte_end":12967,"line_start":284,"line_end":284,"column_start":1,"column_end":65}},{"value":"! assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12968,"byte_end":13050,"line_start":285,"line_end":285,"column_start":1,"column_end":83}},{"value":"! // oops, the weekday is incorrect!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13051,"byte_end":13089,"line_start":286,"line_end":286,"column_start":1,"column_end":39}},{"value":"! assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13090,"byte_end":13180,"line_start":287,"line_end":287,"column_start":1,"column_end":91}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13181,"byte_end":13188,"line_start":288,"line_end":288,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13189,"byte_end":13192,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"! Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13193,"byte_end":13270,"line_start":290,"line_end":290,"column_start":1,"column_end":78}},{"value":"! documentation for full syntax and list of specifiers.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13271,"byte_end":13328,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13329,"byte_end":13332,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"! ### Conversion from and to EPOCH timestamps","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13333,"byte_end":13380,"line_start":293,"line_end":293,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13381,"byte_end":13384,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"! Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13385,"byte_end":13479,"line_start":295,"line_end":295,"column_start":1,"column_end":95}},{"value":"! to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13480,"byte_end":13562,"line_start":296,"line_end":296,"column_start":1,"column_end":83}},{"value":"! (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13563,"byte_end":13625,"line_start":297,"line_end":297,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13626,"byte_end":13629,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"! Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13630,"byte_end":13735,"line_start":299,"line_end":299,"column_start":1,"column_end":106}},{"value":"! from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13736,"byte_end":13810,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"! [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13811,"byte_end":13904,"line_start":301,"line_end":301,"column_start":1,"column_end":94}},{"value":"! to get the number of additional number of nanoseconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13905,"byte_end":13963,"line_start":302,"line_end":302,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13964,"byte_end":13967,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13968,"byte_end":13979,"line_start":304,"line_end":304,"column_start":1,"column_end":12}},{"value":"! // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13980,"byte_end":14038,"line_start":305,"line_end":305,"column_start":1,"column_end":59}},{"value":"! use chrono::{DateTime, TimeZone, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14039,"byte_end":14081,"line_start":306,"line_end":306,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14082,"byte_end":14085,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"! // Construct a datetime from epoch:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14086,"byte_end":14125,"line_start":308,"line_end":308,"column_start":1,"column_end":40}},{"value":"! let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14126,"byte_end":14171,"line_start":309,"line_end":309,"column_start":1,"column_end":46}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14172,"byte_end":14239,"line_start":310,"line_end":310,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14240,"byte_end":14243,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"! // Get epoch value from a datetime:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14244,"byte_end":14283,"line_start":312,"line_end":312,"column_start":1,"column_end":40}},{"value":"! let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14284,"byte_end":14370,"line_start":313,"line_end":313,"column_start":1,"column_end":87}},{"value":"! assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14371,"byte_end":14417,"line_start":314,"line_end":314,"column_start":1,"column_end":47}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14418,"byte_end":14425,"line_start":315,"line_end":315,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14426,"byte_end":14429,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"! ### Individual date","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14430,"byte_end":14453,"line_start":317,"line_end":317,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14454,"byte_end":14457,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"! Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14458,"byte_end":14542,"line_start":319,"line_end":319,"column_start":1,"column_end":85}},{"value":"! It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14543,"byte_end":14622,"line_start":320,"line_end":320,"column_start":1,"column_end":80}},{"value":"! Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14623,"byte_end":14717,"line_start":321,"line_end":321,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14718,"byte_end":14721,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14722,"byte_end":14733,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14734,"byte_end":14761,"line_start":324,"line_end":324,"column_start":1,"column_end":28}},{"value":"! use chrono::offset::LocalResult;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14762,"byte_end":14798,"line_start":325,"line_end":325,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14799,"byte_end":14802,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"! # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14803,"byte_end":14903,"line_start":327,"line_end":327,"column_start":1,"column_end":101}},{"value":"! assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14904,"byte_end":14952,"line_start":328,"line_end":328,"column_start":1,"column_end":49}},{"value":"! assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14953,"byte_end":15005,"line_start":329,"line_end":329,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15006,"byte_end":15009,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"! assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15010,"byte_end":15072,"line_start":331,"line_end":331,"column_start":1,"column_end":63}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15073,"byte_end":15134,"line_start":332,"line_end":332,"column_start":1,"column_end":62}},{"value":"! assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15135,"byte_end":15228,"line_start":333,"line_end":333,"column_start":1,"column_end":94}},{"value":"!            \"070809\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15229,"byte_end":15254,"line_start":334,"line_end":334,"column_start":1,"column_end":26}},{"value":"! ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15255,"byte_end":15262,"line_start":335,"line_end":335,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15263,"byte_end":15266,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"! There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15267,"byte_end":15359,"line_start":337,"line_end":337,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15360,"byte_end":15363,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"! `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15364,"byte_end":15434,"line_start":339,"line_end":339,"column_start":1,"column_end":71}},{"value":"! which returns a `Date` which represents its date component.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15435,"byte_end":15498,"line_start":340,"line_end":340,"column_start":1,"column_end":64}},{"value":"! There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15499,"byte_end":15571,"line_start":341,"line_end":341,"column_start":1,"column_end":73}},{"value":"! which simply returns a naive local time described below.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15572,"byte_end":15632,"line_start":342,"line_end":342,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15633,"byte_end":15636,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"! ### Naive date and time","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15637,"byte_end":15664,"line_start":344,"line_end":344,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15665,"byte_end":15668,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"! Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15669,"byte_end":15755,"line_start":346,"line_end":346,"column_start":1,"column_end":87}},{"value":"! as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15756,"byte_end":15812,"line_start":347,"line_end":347,"column_start":1,"column_end":57}},{"value":"! [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15813,"byte_end":15869,"line_start":348,"line_end":348,"column_start":1,"column_end":57}},{"value":"! [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15870,"byte_end":15944,"line_start":349,"line_end":349,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15945,"byte_end":15948,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"! They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15949,"byte_end":16022,"line_start":351,"line_end":351,"column_start":1,"column_end":74}},{"value":"! but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16023,"byte_end":16101,"line_start":352,"line_end":352,"column_start":1,"column_end":79}},{"value":"! They are mostly useful for building blocks for higher-level types.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16102,"byte_end":16172,"line_start":353,"line_end":353,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16173,"byte_end":16176,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"! Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16177,"byte_end":16266,"line_start":355,"line_end":355,"column_start":1,"column_end":90}},{"value":"! [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16267,"byte_end":16337,"line_start":356,"line_end":356,"column_start":1,"column_end":71}},{"value":"! a view to the naive local time,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16338,"byte_end":16373,"line_start":357,"line_end":357,"column_start":1,"column_end":36}},{"value":"! and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16374,"byte_end":16444,"line_start":358,"line_end":358,"column_start":1,"column_end":71}},{"value":"! a view to the naive UTC time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16445,"byte_end":16478,"line_start":359,"line_end":359,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16479,"byte_end":16482,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"! ## Limitations","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16483,"byte_end":16501,"line_start":361,"line_end":361,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16502,"byte_end":16505,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"! Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16506,"byte_end":16596,"line_start":363,"line_end":363,"column_start":1,"column_end":91}},{"value":"! Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16597,"byte_end":16696,"line_start":364,"line_end":364,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16697,"byte_end":16700,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"! Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16701,"byte_end":16777,"line_start":366,"line_end":366,"column_start":1,"column_end":77}},{"value":"! Time types are limited in the nanosecond accuracy.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16778,"byte_end":16832,"line_start":367,"line_end":367,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16833,"byte_end":16836,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"! [Leap seconds are supported in the representation but","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16837,"byte_end":16894,"line_start":369,"line_end":369,"column_start":1,"column_end":58}},{"value":"! Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16895,"byte_end":16991,"line_start":370,"line_end":370,"column_start":1,"column_end":97}},{"value":"! (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16992,"byte_end":17062,"line_start":371,"line_end":371,"column_start":1,"column_end":71}},{"value":"! Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17063,"byte_end":17140,"line_start":372,"line_end":372,"column_start":1,"column_end":78}},{"value":"! Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17141,"byte_end":17231,"line_start":373,"line_end":373,"column_start":1,"column_end":91}},{"value":"! if you want.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17232,"byte_end":17248,"line_start":374,"line_end":374,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17249,"byte_end":17252,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"! Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17253,"byte_end":17346,"line_start":376,"line_end":376,"column_start":1,"column_end":94}},{"value":"! Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17347,"byte_end":17420,"line_start":377,"line_end":377,"column_start":1,"column_end":74}},{"value":"! For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17421,"byte_end":17487,"line_start":378,"line_end":378,"column_start":1,"column_end":67}},{"value":"! and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17488,"byte_end":17561,"line_start":379,"line_end":379,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17562,"byte_end":17565,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"! Advanced time zone handling is not yet supported.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17566,"byte_end":17619,"line_start":381,"line_end":381,"column_start":1,"column_end":54}},{"value":"! For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17620,"byte_end":17716,"line_start":382,"line_end":382,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17866,"byte_end":17888,"line_start":387,"line_end":387,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17889,"byte_end":17928,"line_start":388,"line_end":388,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17929,"byte_end":17948,"line_start":389,"line_end":389,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":31},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20058,"byte_end":20065,"line_start":452,"line_end":452,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":50}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19967,"byte_end":20049,"line_start":451,"line_end":451,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":1817},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":45687,"byte_end":45695,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"Duration","qualname":"::oldtime::Duration","value":"Duration {  }","parent":null,"children":[{"krate":0,"index":1818},{"krate":0,"index":1819}],"decl_id":null,"docs":" ISO 8601 time duration with nanosecond precision.\n This also allows for the negative duration; see individual methods for details.\n","sig":null,"attributes":[{"value":"/ ISO 8601 time duration with nanosecond precision.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":45476,"byte_end":45529,"line_start":43,"line_end":43,"column_start":1,"column_end":54}},{"value":"/ This also allows for the negative duration; see individual methods for details.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":45530,"byte_end":45613,"line_start":44,"line_end":44,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46438,"byte_end":46443,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"weeks","qualname":"<Duration>::weeks","value":"fn (weeks: i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of weeks.\n Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of weeks.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46217,"byte_end":46271,"line_start":64,"line_end":64,"column_start":5,"column_end":59}},{"value":"/ Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46276,"byte_end":46361,"line_start":65,"line_end":65,"column_start":5,"column_end":90}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46366,"byte_end":46412,"line_start":66,"line_end":66,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46417,"byte_end":46426,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46821,"byte_end":46825,"line_start":77,"line_end":77,"column_start":12,"column_end":16},"name":"days","qualname":"<Duration>::days","value":"fn (days: i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of days.\n Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of days.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46606,"byte_end":46659,"line_start":73,"line_end":73,"column_start":5,"column_end":58}},{"value":"/ Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46664,"byte_end":46744,"line_start":74,"line_end":74,"column_start":5,"column_end":85}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46749,"byte_end":46795,"line_start":75,"line_end":75,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46800,"byte_end":46809,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47196,"byte_end":47201,"line_start":86,"line_end":86,"column_start":12,"column_end":17},"name":"hours","qualname":"<Duration>::hours","value":"fn (hours: i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of hours.\n Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of hours.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46984,"byte_end":47038,"line_start":82,"line_end":82,"column_start":5,"column_end":59}},{"value":"/ Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47043,"byte_end":47119,"line_start":83,"line_end":83,"column_start":5,"column_end":81}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47124,"byte_end":47170,"line_start":84,"line_end":84,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47175,"byte_end":47184,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47575,"byte_end":47582,"line_start":95,"line_end":95,"column_start":12,"column_end":19},"name":"minutes","qualname":"<Duration>::minutes","value":"fn (minutes: i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of minutes.\n Equivalent to `Duration::seconds(minutes * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of minutes.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47364,"byte_end":47420,"line_start":91,"line_end":91,"column_start":5,"column_end":61}},{"value":"/ Equivalent to `Duration::seconds(minutes * 60)` with overflow checks.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47425,"byte_end":47498,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47503,"byte_end":47549,"line_start":93,"line_end":93,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47554,"byte_end":47563,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47951,"byte_end":47958,"line_start":104,"line_end":104,"column_start":12,"column_end":19},"name":"seconds","qualname":"<Duration>::seconds","value":"fn (seconds: i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of seconds.\n Panics when the duration is more than `i64::MAX` milliseconds\n or less than `i64::MIN` milliseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of seconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47753,"byte_end":47809,"line_start":100,"line_end":100,"column_start":5,"column_end":61}},{"value":"/ Panics when the duration is more than `i64::MAX` milliseconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47814,"byte_end":47879,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"/ or less than `i64::MIN` milliseconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47884,"byte_end":47925,"line_start":102,"line_end":102,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":47930,"byte_end":47939,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":48246,"byte_end":48258,"line_start":114,"line_end":114,"column_start":12,"column_end":24},"name":"milliseconds","qualname":"<Duration>::milliseconds","value":"fn (milliseconds: i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of milliseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of milliseconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":48159,"byte_end":48220,"line_start":112,"line_end":112,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":48225,"byte_end":48234,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":48566,"byte_end":48578,"line_start":122,"line_end":122,"column_start":12,"column_end":24},"name":"microseconds","qualname":"<Duration>::microseconds","value":"fn (microseconds: i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of microseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of microseconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":48479,"byte_end":48540,"line_start":120,"line_end":120,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":48545,"byte_end":48554,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":48885,"byte_end":48896,"line_start":130,"line_end":130,"column_start":12,"column_end":23},"name":"nanoseconds","qualname":"<Duration>::nanoseconds","value":"fn (nanos: i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of nanoseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of nanoseconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":48799,"byte_end":48859,"line_start":128,"line_end":128,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":48864,"byte_end":48873,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49148,"byte_end":49157,"line_start":137,"line_end":137,"column_start":12,"column_end":21},"name":"num_weeks","qualname":"<Duration>::num_weeks","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole weeks in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole weeks in the duration.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49062,"byte_end":49122,"line_start":135,"line_end":135,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49127,"byte_end":49136,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49284,"byte_end":49292,"line_start":142,"line_end":142,"column_start":12,"column_end":20},"name":"num_days","qualname":"<Duration>::num_days","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole days in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole days in the duration.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49213,"byte_end":49272,"line_start":141,"line_end":141,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49448,"byte_end":49457,"line_start":148,"line_end":148,"column_start":12,"column_end":21},"name":"num_hours","qualname":"<Duration>::num_hours","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole hours in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole hours in the duration.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49362,"byte_end":49422,"line_start":146,"line_end":146,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49427,"byte_end":49436,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49616,"byte_end":49627,"line_start":154,"line_end":154,"column_start":12,"column_end":23},"name":"num_minutes","qualname":"<Duration>::num_minutes","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole minutes in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole minutes in the duration.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49528,"byte_end":49590,"line_start":152,"line_end":152,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49595,"byte_end":49604,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49774,"byte_end":49785,"line_start":159,"line_end":159,"column_start":12,"column_end":23},"name":"num_seconds","qualname":"<Duration>::num_seconds","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole seconds in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole seconds in the duration.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":49700,"byte_end":49762,"line_start":158,"line_end":158,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":50438,"byte_end":50454,"line_start":180,"line_end":180,"column_start":12,"column_end":28},"name":"num_milliseconds","qualname":"<Duration>::num_milliseconds","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole milliseconds in the duration,\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole milliseconds in the duration,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":50359,"byte_end":50426,"line_start":179,"line_end":179,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":50946,"byte_end":50962,"line_start":190,"line_end":190,"column_start":12,"column_end":28},"name":"num_microseconds","qualname":"<Duration>::num_microseconds","value":"fn (&self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole microseconds in the duration,\n or `None` on overflow (exceeding 2^63 microseconds in either direction).\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole microseconds in the duration,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":50786,"byte_end":50853,"line_start":188,"line_end":188,"column_start":5,"column_end":72}},{"value":"/ or `None` on overflow (exceeding 2^63 microseconds in either direction).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":50858,"byte_end":50934,"line_start":189,"line_end":189,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":51352,"byte_end":51367,"line_start":198,"line_end":198,"column_start":12,"column_end":27},"name":"num_nanoseconds","qualname":"<Duration>::num_nanoseconds","value":"fn (&self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole nanoseconds in the duration,\n or `None` on overflow (exceeding 2^63 nanoseconds in either direction).\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole nanoseconds in the duration,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":51194,"byte_end":51260,"line_start":196,"line_end":196,"column_start":5,"column_end":71}},{"value":"/ or `None` on overflow (exceeding 2^63 nanoseconds in either direction).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":51265,"byte_end":51340,"line_start":197,"line_end":197,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":51660,"byte_end":51671,"line_start":205,"line_end":205,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<Duration>::checked_add","value":"fn (&self, rhs: &Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Add two durations, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Add two durations, returning `None` if overflow occurred.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":51587,"byte_end":51648,"line_start":204,"line_end":204,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":52274,"byte_end":52285,"line_start":219,"line_end":219,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<Duration>::checked_sub","value":"fn (&self, rhs: &Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Subtract two durations, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Subtract two durations, returning `None` if overflow occurred.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":52196,"byte_end":52262,"line_start":218,"line_end":218,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":52884,"byte_end":52893,"line_start":234,"line_end":234,"column_start":12,"column_end":21},"name":"min_value","qualname":"<Duration>::min_value","value":"fn () -> Duration","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Duration`: `i64::MIN` milliseconds.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Duration`: `i64::MIN` milliseconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":52797,"byte_end":52858,"line_start":232,"line_end":232,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":52863,"byte_end":52872,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53008,"byte_end":53017,"line_start":238,"line_end":238,"column_start":12,"column_end":21},"name":"max_value","qualname":"<Duration>::max_value","value":"fn () -> Duration","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Duration`: `i64::MAX` milliseconds.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Duration`: `i64::MAX` milliseconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":52921,"byte_end":52982,"line_start":236,"line_end":236,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":52987,"byte_end":52996,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53145,"byte_end":53149,"line_start":242,"line_end":242,"column_start":12,"column_end":16},"name":"zero","qualname":"<Duration>::zero","value":"fn () -> Duration","parent":null,"children":[],"decl_id":null,"docs":" A duration where the stored seconds and nanoseconds are equal to zero.\n","sig":null,"attributes":[{"value":"/ A duration where the stored seconds and nanoseconds are equal to zero.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53045,"byte_end":53119,"line_start":240,"line_end":240,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53124,"byte_end":53133,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53303,"byte_end":53310,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<Duration>::is_zero","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the duration equals `Duration::zero()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the duration equals `Duration::zero()`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53216,"byte_end":53277,"line_start":246,"line_end":246,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53282,"byte_end":53291,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53583,"byte_end":53591,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"from_std","qualname":"<Duration>::from_std","value":"fn (duration: StdDuration) -> Result<Duration, OutOfRangeError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `time::Duration` object from `std::time::Duration`","sig":null,"attributes":[{"value":"/ Creates a `time::Duration` object from `std::time::Duration`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53381,"byte_end":53445,"line_start":252,"line_end":252,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53450,"byte_end":53453,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ This function errors when original duration is larger than the maximum","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53458,"byte_end":53532,"line_start":254,"line_end":254,"column_start":5,"column_end":79}},{"value":"/ value supported for this type.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":53537,"byte_end":53571,"line_start":255,"line_end":255,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":54281,"byte_end":54287,"line_start":275,"line_end":275,"column_start":12,"column_end":18},"name":"to_std","qualname":"<Duration>::to_std","value":"fn (&self) -> Result<StdDuration, OutOfRangeError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `std::time::Duration` object from `time::Duration`","sig":null,"attributes":[{"value":"/ Creates a `std::time::Duration` object from `time::Duration`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":54057,"byte_end":54121,"line_start":271,"line_end":271,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":54126,"byte_end":54129,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This function errors when duration is less than zero. As standard","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":54134,"byte_end":54203,"line_start":273,"line_end":273,"column_start":5,"column_end":74}},{"value":"/ library implementation is limited to non-negative values.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":54208,"byte_end":54269,"line_start":274,"line_end":274,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1844},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":57904,"byte_end":57919,"line_start":394,"line_end":394,"column_start":12,"column_end":27},"name":"OutOfRangeError","qualname":"::oldtime::OutOfRangeError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents error when converting `Duration` to/from a standard library\n implementation","sig":null,"attributes":[{"value":"/ Represents error when converting `Duration` to/from a standard library","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":57581,"byte_end":57655,"line_start":387,"line_end":387,"column_start":1,"column_end":75}},{"value":"/ implementation","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":57656,"byte_end":57674,"line_start":388,"line_end":388,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":57675,"byte_end":57678,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ The `std::time::Duration` supports a range from zero to `u64::MAX`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":57679,"byte_end":57749,"line_start":390,"line_end":390,"column_start":1,"column_end":71}},{"value":"/ *seconds*, while this module supports signed range of up to","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":57750,"byte_end":57813,"line_start":391,"line_end":391,"column_start":1,"column_end":64}},{"value":"/ `i64::MAX` of *milliseconds*.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":57814,"byte_end":57847,"line_start":392,"line_end":392,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":133},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":140},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":1859},{"krate":0,"index":1890},{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1881},{"krate":0,"index":1879},{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":1870},{"krate":0,"index":148},{"krate":0,"index":156},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":193},{"krate":0,"index":252},{"krate":0,"index":275},{"krate":0,"index":276}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"! The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70236,"byte_end":70307,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70308,"byte_end":70311,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! There are four operations provided by the `TimeZone` trait:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70312,"byte_end":70375,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70376,"byte_end":70379,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70380,"byte_end":70441,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"! 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70442,"byte_end":70501,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"! 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70502,"byte_end":70563,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"! 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70564,"byte_end":70627,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70628,"byte_end":70631,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70632,"byte_end":70728,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"! 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70729,"byte_end":70825,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"! which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70826,"byte_end":70917,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"! Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70918,"byte_end":70998,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"! but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":70999,"byte_end":71067,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"! and provides implementations for 1 and 3.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71068,"byte_end":71113,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"! An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71114,"byte_end":71203,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1861},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71657,"byte_end":71661,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1859},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71529,"byte_end":71576,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71581,"byte_end":71652,"line_start":32,"line_end":32,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1863},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71735,"byte_end":71741,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1859},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71667,"byte_end":71730,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1866},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71907,"byte_end":71916,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1859},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71750,"byte_end":71826,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71831,"byte_end":71902,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1859},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71508,"byte_end":71519,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"LocalResult::{None, Single, Ambiguous}","parent":null,"children":[{"krate":0,"index":1861},{"krate":0,"index":1863},{"krate":0,"index":1866}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71364,"byte_end":71447,"line_start":28,"line_end":28,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":72066,"byte_end":72072,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71972,"byte_end":72054,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":72300,"byte_end":72308,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":72206,"byte_end":72288,"line_start":50,"line_end":50,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":72565,"byte_end":72571,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":72473,"byte_end":72553,"line_start":58,"line_end":58,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":72818,"byte_end":72821,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"fn <U, F> (self, mut f: F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":72736,"byte_end":72806,"line_start":66,"line_end":66,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73396,"byte_end":73404,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"fn (self, time: NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73171,"byte_end":73242,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73247,"byte_end":73295,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73300,"byte_end":73303,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73308,"byte_end":73370,"line_start":80,"line_end":80,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73375,"byte_end":73384,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73902,"byte_end":73913,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"fn (self, hour: u32, min: u32, sec: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73674,"byte_end":73748,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73753,"byte_end":73801,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73806,"byte_end":73809,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73814,"byte_end":73876,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73881,"byte_end":73890,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":74536,"byte_end":74553,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"fn (self, hour: u32, min: u32, sec: u32, milli: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":74210,"byte_end":74297,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":74302,"byte_end":74382,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":74387,"byte_end":74435,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":74440,"byte_end":74443,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":74448,"byte_end":74510,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":74515,"byte_end":74524,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75252,"byte_end":75269,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"fn (self, hour: u32, min: u32, sec: u32, micro: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":74922,"byte_end":75009,"line_start":126,"line_end":126,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75014,"byte_end":75098,"line_start":127,"line_end":127,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75103,"byte_end":75151,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75156,"byte_end":75159,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75164,"byte_end":75226,"line_start":130,"line_end":130,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75231,"byte_end":75240,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75970,"byte_end":75986,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"fn (self, hour: u32, min: u32, sec: u32, nano: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75638,"byte_end":75724,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75729,"byte_end":75816,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75821,"byte_end":75869,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75874,"byte_end":75877,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75882,"byte_end":75944,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":75949,"byte_end":75958,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76474,"byte_end":76480,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76391,"byte_end":76462,"line_start":170,"line_end":170,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":166},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76835,"byte_end":76841,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":167}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76782,"byte_end":76824,"line_start":182,"line_end":182,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76947,"byte_end":76950,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"fn (&self) -> FixedOffset","parent":{"krate":0,"index":166},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76876,"byte_end":76939,"line_start":184,"line_end":184,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":168},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77149,"byte_end":77157,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76977,"byte_end":76995,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76996,"byte_end":76999,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77000,"byte_end":77089,"line_start":190,"line_end":190,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77090,"byte_end":77138,"line_start":191,"line_end":191,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":169},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77380,"byte_end":77386,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77179,"byte_end":77209,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77214,"byte_end":77286,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77291,"byte_end":77370,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78003,"byte_end":78006,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"fn (&self, year: i32, month: u32, day: u32) -> Date<Self>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77401,"byte_end":77472,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77477,"byte_end":77556,"line_start":199,"line_end":199,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77561,"byte_end":77564,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77569,"byte_end":77662,"line_start":201,"line_end":201,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77667,"byte_end":77744,"line_start":202,"line_end":202,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77749,"byte_end":77752,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77757,"byte_end":77819,"line_start":204,"line_end":204,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77824,"byte_end":77827,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77832,"byte_end":77845,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77850,"byte_end":77853,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77858,"byte_end":77866,"line_start":208,"line_end":208,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77871,"byte_end":77903,"line_start":209,"line_end":209,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77908,"byte_end":77911,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77916,"byte_end":77982,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77987,"byte_end":77995,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78822,"byte_end":78829,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"fn (&self, year: i32, month: u32, day: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78122,"byte_end":78193,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78198,"byte_end":78277,"line_start":218,"line_end":218,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78282,"byte_end":78285,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78290,"byte_end":78383,"line_start":220,"line_end":220,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78388,"byte_end":78465,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78470,"byte_end":78473,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78478,"byte_end":78548,"line_start":223,"line_end":223,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78553,"byte_end":78556,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78561,"byte_end":78574,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78579,"byte_end":78582,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78587,"byte_end":78595,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78600,"byte_end":78645,"line_start":228,"line_end":228,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78650,"byte_end":78653,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78658,"byte_end":78737,"line_start":230,"line_end":230,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78742,"byte_end":78801,"line_start":231,"line_end":231,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":78806,"byte_end":78814,"line_start":232,"line_end":232,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79678,"byte_end":79680,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"fn (&self, year: i32, ordinal: u32) -> Date<Self>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79066,"byte_end":79157,"line_start":240,"line_end":240,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79162,"byte_end":79241,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79246,"byte_end":79249,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79254,"byte_end":79347,"line_start":243,"line_end":243,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79352,"byte_end":79429,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79434,"byte_end":79437,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79442,"byte_end":79497,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79502,"byte_end":79505,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79510,"byte_end":79523,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79528,"byte_end":79531,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79536,"byte_end":79544,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79549,"byte_end":79581,"line_start":251,"line_end":251,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79586,"byte_end":79589,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79594,"byte_end":79657,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79662,"byte_end":79670,"line_start":254,"line_end":254,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80231,"byte_end":80237,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"fn (&self, year: i32, ordinal: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79784,"byte_end":79875,"line_start":259,"line_end":259,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79880,"byte_end":79959,"line_start":260,"line_end":260,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79964,"byte_end":79967,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":79972,"byte_end":80065,"line_start":262,"line_end":262,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80070,"byte_end":80147,"line_start":263,"line_end":263,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80152,"byte_end":80155,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80160,"byte_end":80223,"line_start":265,"line_end":265,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81215,"byte_end":81221,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> Date<Self>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80462,"byte_end":80553,"line_start":273,"line_end":273,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80558,"byte_end":80584,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80589,"byte_end":80668,"line_start":275,"line_end":275,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80673,"byte_end":80744,"line_start":276,"line_end":276,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80749,"byte_end":80752,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80757,"byte_end":80850,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80855,"byte_end":80932,"line_start":279,"line_end":279,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80937,"byte_end":80940,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":80945,"byte_end":81008,"line_start":281,"line_end":281,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81013,"byte_end":81016,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81021,"byte_end":81034,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81039,"byte_end":81042,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81047,"byte_end":81055,"line_start":285,"line_end":285,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81060,"byte_end":81101,"line_start":286,"line_end":286,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81106,"byte_end":81109,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81114,"byte_end":81194,"line_start":288,"line_end":288,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81199,"byte_end":81207,"line_start":289,"line_end":289,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81912,"byte_end":81922,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81350,"byte_end":81441,"line_start":294,"line_end":294,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81446,"byte_end":81472,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81477,"byte_end":81556,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81561,"byte_end":81632,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81637,"byte_end":81640,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81645,"byte_end":81738,"line_start":299,"line_end":299,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81743,"byte_end":81820,"line_start":300,"line_end":300,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81825,"byte_end":81828,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":81833,"byte_end":81904,"line_start":302,"line_end":302,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82747,"byte_end":82756,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"fn (&self, secs: i64, nsecs: u32) -> DateTime<Self>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82172,"byte_end":82234,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82239,"byte_end":82299,"line_start":311,"line_end":311,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82304,"byte_end":82375,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82380,"byte_end":82383,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82388,"byte_end":82463,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82468,"byte_end":82545,"line_start":315,"line_end":315,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82550,"byte_end":82553,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82558,"byte_end":82571,"line_start":317,"line_end":317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82576,"byte_end":82579,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82584,"byte_end":82592,"line_start":319,"line_end":319,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82597,"byte_end":82629,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82634,"byte_end":82637,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82642,"byte_end":82726,"line_start":322,"line_end":322,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82731,"byte_end":82739,"line_start":323,"line_end":323,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83239,"byte_end":83252,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"fn (&self, secs: i64, nsecs: u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82867,"byte_end":82929,"line_start":328,"line_end":328,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82934,"byte_end":82994,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":82999,"byte_end":83070,"line_start":330,"line_end":330,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83075,"byte_end":83078,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83083,"byte_end":83155,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83160,"byte_end":83231,"line_start":333,"line_end":333,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83992,"byte_end":84008,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"fn (&self, millis: i64) -> DateTime<Self>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83513,"byte_end":83580,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83585,"byte_end":83646,"line_start":342,"line_end":342,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83651,"byte_end":83654,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83659,"byte_end":83728,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83733,"byte_end":83804,"line_start":345,"line_end":345,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83809,"byte_end":83812,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83817,"byte_end":83830,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83835,"byte_end":83838,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83843,"byte_end":83851,"line_start":349,"line_end":349,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83856,"byte_end":83888,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83893,"byte_end":83896,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83901,"byte_end":83971,"line_start":352,"line_end":352,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":83976,"byte_end":83984,"line_start":353,"line_end":353,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84739,"byte_end":84759,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"fn (&self, millis: i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84111,"byte_end":84178,"line_start":358,"line_end":358,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84183,"byte_end":84244,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84249,"byte_end":84252,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84257,"byte_end":84260,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84265,"byte_end":84335,"line_start":362,"line_end":362,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84340,"byte_end":84395,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84400,"byte_end":84426,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84431,"byte_end":84434,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84439,"byte_end":84452,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84457,"byte_end":84460,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84465,"byte_end":84473,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84478,"byte_end":84523,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84528,"byte_end":84576,"line_start":370,"line_end":370,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84581,"byte_end":84652,"line_start":371,"line_end":371,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84657,"byte_end":84707,"line_start":372,"line_end":372,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84712,"byte_end":84718,"line_start":373,"line_end":373,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":84723,"byte_end":84731,"line_start":374,"line_end":374,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85461,"byte_end":85476,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"fn (&self, nanos: i64) -> DateTime<Self>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap nanoseconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85038,"byte_end":85104,"line_start":384,"line_end":384,"column_start":5,"column_end":71}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85109,"byte_end":85170,"line_start":385,"line_end":385,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85175,"byte_end":85178,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Unlike [`timestamp_millis`](#method.timestamp_millis), this never","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85183,"byte_end":85252,"line_start":387,"line_end":387,"column_start":5,"column_end":74}},{"value":"/ panics.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85257,"byte_end":85268,"line_start":388,"line_end":388,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85273,"byte_end":85276,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85281,"byte_end":85294,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85299,"byte_end":85302,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85307,"byte_end":85315,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85320,"byte_end":85352,"line_start":393,"line_end":393,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85357,"byte_end":85360,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85365,"byte_end":85440,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85445,"byte_end":85453,"line_start":396,"line_end":396,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86263,"byte_end":86280,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"fn (&self, s: &str, fmt: &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85759,"byte_end":85815,"line_start":406,"line_end":406,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85820,"byte_end":85869,"line_start":407,"line_end":407,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85874,"byte_end":85944,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85949,"byte_end":85987,"line_start":409,"line_end":409,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":85992,"byte_end":85995,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86000,"byte_end":86074,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86079,"byte_end":86137,"line_start":412,"line_end":412,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86142,"byte_end":86145,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86150,"byte_end":86220,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86225,"byte_end":86255,"line_start":415,"line_end":415,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86551,"byte_end":86562,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"fn (offset: &Self::Offset) -> Self","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86496,"byte_end":86543,"line_start":422,"line_end":422,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86674,"byte_end":86696,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86600,"byte_end":86666,"line_start":425,"line_end":425,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86836,"byte_end":86862,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86758,"byte_end":86828,"line_start":428,"line_end":428,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":87012,"byte_end":87027,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":86928,"byte_end":87004,"line_start":431,"line_end":431,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":87379,"byte_end":87398,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":87287,"byte_end":87371,"line_start":439,"line_end":439,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":87672,"byte_end":87692,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":87597,"byte_end":87664,"line_start":445,"line_end":445,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":87818,"byte_end":87842,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":87739,"byte_end":87810,"line_start":448,"line_end":448,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":88049,"byte_end":88062,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":87893,"byte_end":87944,"line_start":451,"line_end":451,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":87949,"byte_end":88041,"line_start":452,"line_end":452,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":88335,"byte_end":88352,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":88175,"byte_end":88230,"line_start":457,"line_end":457,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":88235,"byte_end":88327,"line_start":458,"line_end":458,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":1893},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91682,"byte_end":91693,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1894}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91306,"byte_end":91377,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91378,"byte_end":91381,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91382,"byte_end":91439,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91440,"byte_end":91503,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91504,"byte_end":91577,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91578,"byte_end":91626,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92297,"byte_end":92301,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91748,"byte_end":91836,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91841,"byte_end":91894,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91899,"byte_end":91902,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91907,"byte_end":91945,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91950,"byte_end":91953,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91958,"byte_end":91971,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91976,"byte_end":91979,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91984,"byte_end":91992,"line_start":35,"line_end":35,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91997,"byte_end":92037,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92042,"byte_end":92062,"line_start":37,"line_end":37,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92067,"byte_end":92131,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92136,"byte_end":92200,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92205,"byte_end":92272,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92277,"byte_end":92285,"line_start":41,"line_end":41,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92636,"byte_end":92644,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92419,"byte_end":92507,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92512,"byte_end":92565,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92570,"byte_end":92573,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92578,"byte_end":92624,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93386,"byte_end":93390,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92837,"byte_end":92925,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92930,"byte_end":92983,"line_start":59,"line_end":59,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92988,"byte_end":92991,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":92996,"byte_end":93034,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93039,"byte_end":93042,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93047,"byte_end":93060,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93065,"byte_end":93068,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93073,"byte_end":93081,"line_start":65,"line_end":65,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93086,"byte_end":93126,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93131,"byte_end":93151,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93156,"byte_end":93220,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93225,"byte_end":93289,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93294,"byte_end":93361,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93366,"byte_end":93374,"line_start":71,"line_end":71,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93725,"byte_end":93733,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93508,"byte_end":93596,"line_start":76,"line_end":76,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93601,"byte_end":93654,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93659,"byte_end":93662,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93667,"byte_end":93713,"line_start":79,"line_end":79,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94032,"byte_end":94047,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":93927,"byte_end":94006,"line_start":88,"line_end":88,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94011,"byte_end":94020,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94209,"byte_end":94224,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94104,"byte_end":94183,"line_start":94,"line_end":94,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94188,"byte_end":94197,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1908},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99345,"byte_end":99348,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":98699,"byte_end":98794,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":98795,"byte_end":98857,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":98858,"byte_end":98861,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":98862,"byte_end":98919,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":98920,"byte_end":98991,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":98992,"byte_end":99006,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99007,"byte_end":99010,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99011,"byte_end":99024,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99025,"byte_end":99028,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99029,"byte_end":99037,"line_start":27,"line_end":27,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99038,"byte_end":99095,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99096,"byte_end":99099,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99100,"byte_end":99182,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99183,"byte_end":99186,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99187,"byte_end":99228,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99229,"byte_end":99286,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":99287,"byte_end":99295,"line_start":34,"line_end":34,"column_start":1,"column_end":9}}]},{"kind":"Mod","id":{"krate":0,"index":277},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20703,"byte_end":20708,"line_start":473,"line_end":473,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":358},{"krate":0,"index":513},{"krate":0,"index":526},{"krate":0,"index":632},{"krate":0,"index":857},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[{"value":"! Date and time types unconcerned with timezones.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20715,"byte_end":20766,"line_start":474,"line_end":474,"column_start":5,"column_end":56}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20771,"byte_end":20774,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"! They are primarily building blocks for other types","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20779,"byte_end":20833,"line_start":476,"line_end":476,"column_start":5,"column_end":59}},{"value":"! (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20838,"byte_end":20893,"line_start":477,"line_end":477,"column_start":5,"column_end":60}},{"value":"! but can be also used for the simpler date and time handling.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20898,"byte_end":20962,"line_start":478,"line_end":478,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1964},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137441,"byte_end":137450,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1965}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134863,"byte_end":134907,"line_start":52,"line_end":52,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134908,"byte_end":134971,"line_start":53,"line_end":53,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134972,"byte_end":135020,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135021,"byte_end":135090,"line_start":55,"line_end":55,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135091,"byte_end":135094,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135095,"byte_end":135114,"line_start":57,"line_end":57,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135115,"byte_end":135118,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135119,"byte_end":135195,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135196,"byte_end":135268,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135269,"byte_end":135272,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135273,"byte_end":135369,"line_start":62,"line_end":62,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135370,"byte_end":135457,"line_start":63,"line_end":63,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135458,"byte_end":135547,"line_start":64,"line_end":64,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135548,"byte_end":135551,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135552,"byte_end":135642,"line_start":66,"line_end":66,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135643,"byte_end":135724,"line_start":67,"line_end":67,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135725,"byte_end":135811,"line_start":68,"line_end":68,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135812,"byte_end":135815,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135816,"byte_end":135893,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135894,"byte_end":135965,"line_start":71,"line_end":71,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135966,"byte_end":136048,"line_start":72,"line_end":72,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136049,"byte_end":136052,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136053,"byte_end":136068,"line_start":74,"line_end":74,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136069,"byte_end":136072,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136073,"byte_end":136143,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136144,"byte_end":136217,"line_start":77,"line_end":77,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136218,"byte_end":136221,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136222,"byte_end":136310,"line_start":79,"line_end":79,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136311,"byte_end":136381,"line_start":80,"line_end":80,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136382,"byte_end":136385,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136386,"byte_end":136480,"line_start":82,"line_end":82,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136481,"byte_end":136561,"line_start":83,"line_end":83,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136562,"byte_end":136565,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136566,"byte_end":136655,"line_start":85,"line_end":85,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136656,"byte_end":136736,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136737,"byte_end":136740,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136741,"byte_end":136821,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136822,"byte_end":136898,"line_start":89,"line_end":89,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136899,"byte_end":136973,"line_start":90,"line_end":90,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136974,"byte_end":137025,"line_start":91,"line_end":91,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137026,"byte_end":137029,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137030,"byte_end":137048,"line_start":93,"line_end":93,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137049,"byte_end":137052,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137053,"byte_end":137144,"line_start":95,"line_end":95,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137145,"byte_end":137218,"line_start":96,"line_end":96,"column_start":1,"column_end":74}},{"value":"/ The year number is the same as that of the [calendar date](#calendar-date).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137219,"byte_end":137298,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137299,"byte_end":137302,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137303,"byte_end":137368,"line_start":99,"line_end":99,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":398},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137569,"byte_end":137577,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137497,"byte_end":137558,"line_start":105,"line_end":105,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":399},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137727,"byte_end":137735,"line_start":108,"line_end":108,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137654,"byte_end":137716,"line_start":107,"line_end":107,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140045,"byte_end":140053,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"fn (year: i32, month: u32, day: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139315,"byte_end":139383,"line_start":145,"line_end":145,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139388,"byte_end":139414,"line_start":146,"line_end":146,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139419,"byte_end":139422,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139427,"byte_end":139489,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139494,"byte_end":139497,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139502,"byte_end":139515,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139520,"byte_end":139523,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139528,"byte_end":139536,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139541,"byte_end":139588,"line_start":153,"line_end":153,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139593,"byte_end":139596,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139601,"byte_end":139646,"line_start":155,"line_end":155,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139651,"byte_end":139682,"line_start":156,"line_end":156,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139687,"byte_end":139716,"line_start":157,"line_end":157,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139721,"byte_end":139749,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139754,"byte_end":139801,"line_start":159,"line_end":159,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139806,"byte_end":139848,"line_start":160,"line_end":160,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139853,"byte_end":139893,"line_start":161,"line_end":161,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139898,"byte_end":139940,"line_start":162,"line_end":162,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139945,"byte_end":140020,"line_start":163,"line_end":163,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140025,"byte_end":140033,"line_start":164,"line_end":164,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140904,"byte_end":140916,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"fn (year: i32, month: u32, day: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140202,"byte_end":140270,"line_start":169,"line_end":169,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140275,"byte_end":140301,"line_start":170,"line_end":170,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140306,"byte_end":140309,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140314,"byte_end":140384,"line_start":172,"line_end":172,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140389,"byte_end":140392,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140397,"byte_end":140410,"line_start":174,"line_end":174,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140415,"byte_end":140418,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140423,"byte_end":140431,"line_start":176,"line_end":176,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140436,"byte_end":140462,"line_start":177,"line_end":177,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140467,"byte_end":140470,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140475,"byte_end":140522,"line_start":179,"line_end":179,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140527,"byte_end":140530,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140535,"byte_end":140584,"line_start":181,"line_end":181,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140589,"byte_end":140638,"line_start":182,"line_end":182,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140643,"byte_end":140692,"line_start":183,"line_end":183,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140697,"byte_end":140768,"line_start":184,"line_end":184,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140773,"byte_end":140823,"line_start":185,"line_end":185,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140828,"byte_end":140879,"line_start":186,"line_end":186,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140884,"byte_end":140892,"line_start":187,"line_end":187,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141810,"byte_end":141817,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"fn (year: i32, ordinal: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141095,"byte_end":141161,"line_start":193,"line_end":193,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141166,"byte_end":141197,"line_start":194,"line_end":194,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141202,"byte_end":141205,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141210,"byte_end":141273,"line_start":196,"line_end":196,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141278,"byte_end":141281,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141286,"byte_end":141299,"line_start":198,"line_end":198,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141304,"byte_end":141307,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141312,"byte_end":141320,"line_start":200,"line_end":200,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141325,"byte_end":141372,"line_start":201,"line_end":201,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141377,"byte_end":141380,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141385,"byte_end":141426,"line_start":203,"line_end":203,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141431,"byte_end":141463,"line_start":204,"line_end":204,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141468,"byte_end":141499,"line_start":205,"line_end":205,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141504,"byte_end":141533,"line_start":206,"line_end":206,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141538,"byte_end":141566,"line_start":207,"line_end":207,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141571,"byte_end":141613,"line_start":208,"line_end":208,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141618,"byte_end":141658,"line_start":209,"line_end":209,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141663,"byte_end":141705,"line_start":210,"line_end":210,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141710,"byte_end":141785,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141790,"byte_end":141798,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142687,"byte_end":142698,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"fn (year: i32, ordinal: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141954,"byte_end":142020,"line_start":217,"line_end":217,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142025,"byte_end":142056,"line_start":218,"line_end":218,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142061,"byte_end":142064,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142069,"byte_end":142140,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142145,"byte_end":142148,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142153,"byte_end":142166,"line_start":222,"line_end":222,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142171,"byte_end":142174,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142179,"byte_end":142187,"line_start":224,"line_end":224,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142192,"byte_end":142218,"line_start":225,"line_end":225,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142223,"byte_end":142226,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142231,"byte_end":142276,"line_start":227,"line_end":227,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142281,"byte_end":142284,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142289,"byte_end":142335,"line_start":229,"line_end":229,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142340,"byte_end":142384,"line_start":230,"line_end":230,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142389,"byte_end":142435,"line_start":231,"line_end":231,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142440,"byte_end":142486,"line_start":232,"line_end":232,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142491,"byte_end":142559,"line_start":233,"line_end":233,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142564,"byte_end":142610,"line_start":234,"line_end":234,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142615,"byte_end":142662,"line_start":235,"line_end":235,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142667,"byte_end":142675,"line_start":236,"line_end":236,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143704,"byte_end":143715,"line_start":263,"line_end":263,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"fn (year: i32, week: u32, weekday: Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142864,"byte_end":142928,"line_start":242,"line_end":242,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142933,"byte_end":142977,"line_start":243,"line_end":243,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142982,"byte_end":143058,"line_start":244,"line_end":244,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143063,"byte_end":143066,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143071,"byte_end":143134,"line_start":246,"line_end":246,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143139,"byte_end":143142,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143147,"byte_end":143160,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143165,"byte_end":143168,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143173,"byte_end":143181,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143186,"byte_end":143233,"line_start":251,"line_end":251,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143238,"byte_end":143241,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143246,"byte_end":143305,"line_start":253,"line_end":253,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143310,"byte_end":143352,"line_start":254,"line_end":254,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143357,"byte_end":143397,"line_start":255,"line_end":255,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143402,"byte_end":143444,"line_start":256,"line_end":256,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143449,"byte_end":143480,"line_start":257,"line_end":257,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143485,"byte_end":143514,"line_start":258,"line_end":258,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143519,"byte_end":143547,"line_start":259,"line_end":259,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143552,"byte_end":143599,"line_start":260,"line_end":260,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143604,"byte_end":143679,"line_start":261,"line_end":261,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143684,"byte_end":143692,"line_start":262,"line_end":262,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146078,"byte_end":146093,"line_start":311,"line_end":311,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"fn (year: i32, week: u32, weekday: Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143877,"byte_end":143941,"line_start":267,"line_end":267,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143946,"byte_end":143990,"line_start":268,"line_end":268,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143995,"byte_end":144071,"line_start":269,"line_end":269,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144076,"byte_end":144079,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144084,"byte_end":144155,"line_start":271,"line_end":271,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144160,"byte_end":144163,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144168,"byte_end":144181,"line_start":273,"line_end":273,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144186,"byte_end":144189,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144194,"byte_end":144202,"line_start":275,"line_end":275,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144207,"byte_end":144244,"line_start":276,"line_end":276,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144249,"byte_end":144252,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144257,"byte_end":144296,"line_start":278,"line_end":278,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144301,"byte_end":144354,"line_start":279,"line_end":279,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144359,"byte_end":144362,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144367,"byte_end":144428,"line_start":281,"line_end":281,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144433,"byte_end":144517,"line_start":282,"line_end":282,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144522,"byte_end":144607,"line_start":283,"line_end":283,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144612,"byte_end":144674,"line_start":284,"line_end":284,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144679,"byte_end":144682,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144687,"byte_end":144751,"line_start":286,"line_end":286,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144756,"byte_end":144821,"line_start":287,"line_end":287,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144826,"byte_end":144834,"line_start":288,"line_end":288,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144839,"byte_end":144842,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144847,"byte_end":144926,"line_start":290,"line_end":290,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144931,"byte_end":144934,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144939,"byte_end":144947,"line_start":292,"line_end":292,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144952,"byte_end":144991,"line_start":293,"line_end":293,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144996,"byte_end":145037,"line_start":294,"line_end":294,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145042,"byte_end":145097,"line_start":295,"line_end":295,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145102,"byte_end":145139,"line_start":296,"line_end":296,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145144,"byte_end":145209,"line_start":297,"line_end":297,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145214,"byte_end":145280,"line_start":298,"line_end":298,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145285,"byte_end":145371,"line_start":299,"line_end":299,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145376,"byte_end":145438,"line_start":300,"line_end":300,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145443,"byte_end":145528,"line_start":301,"line_end":301,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145533,"byte_end":145536,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145541,"byte_end":145606,"line_start":303,"line_end":303,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145611,"byte_end":145676,"line_start":304,"line_end":304,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145681,"byte_end":145718,"line_start":305,"line_end":305,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145723,"byte_end":145809,"line_start":306,"line_end":306,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145814,"byte_end":145898,"line_start":307,"line_end":307,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145903,"byte_end":145965,"line_start":308,"line_end":308,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145970,"byte_end":146053,"line_start":309,"line_end":309,"column_start":5,"column_end":88}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146058,"byte_end":146066,"line_start":310,"line_end":310,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148974,"byte_end":148995,"line_start":381,"line_end":381,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"fn (days: i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147243,"byte_end":147332,"line_start":337,"line_end":337,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147337,"byte_end":147366,"line_start":338,"line_end":338,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147371,"byte_end":147374,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Panics if the date is out of range.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147379,"byte_end":147418,"line_start":340,"line_end":340,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147423,"byte_end":147426,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147431,"byte_end":147444,"line_start":342,"line_end":342,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147449,"byte_end":147452,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147457,"byte_end":147465,"line_start":344,"line_end":344,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147470,"byte_end":147517,"line_start":345,"line_end":345,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147522,"byte_end":147525,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147530,"byte_end":147583,"line_start":347,"line_end":347,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147588,"byte_end":147663,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147668,"byte_end":147699,"line_start":349,"line_end":349,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147704,"byte_end":147733,"line_start":350,"line_end":350,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147738,"byte_end":147766,"line_start":351,"line_end":351,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147771,"byte_end":147818,"line_start":352,"line_end":352,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147823,"byte_end":147865,"line_start":353,"line_end":353,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147870,"byte_end":147910,"line_start":354,"line_end":354,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147915,"byte_end":147957,"line_start":355,"line_end":355,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147962,"byte_end":147970,"line_start":356,"line_end":356,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147975,"byte_end":147978,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147983,"byte_end":148026,"line_start":358,"line_end":358,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148031,"byte_end":148083,"line_start":359,"line_end":359,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148088,"byte_end":148150,"line_start":360,"line_end":360,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148155,"byte_end":148189,"line_start":361,"line_end":361,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148194,"byte_end":148248,"line_start":362,"line_end":362,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148253,"byte_end":148256,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148261,"byte_end":148269,"line_start":364,"line_end":364,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148274,"byte_end":148300,"line_start":365,"line_end":365,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148305,"byte_end":148308,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148313,"byte_end":148354,"line_start":367,"line_end":367,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148359,"byte_end":148420,"line_start":368,"line_end":368,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148425,"byte_end":148481,"line_start":369,"line_end":369,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148486,"byte_end":148540,"line_start":370,"line_end":370,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148545,"byte_end":148550,"line_start":371,"line_end":371,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148555,"byte_end":148558,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148563,"byte_end":148636,"line_start":373,"line_end":373,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148641,"byte_end":148707,"line_start":374,"line_end":374,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148712,"byte_end":148715,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148720,"byte_end":148786,"line_start":376,"line_end":376,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148791,"byte_end":148861,"line_start":377,"line_end":377,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148866,"byte_end":148935,"line_start":378,"line_end":378,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148940,"byte_end":148948,"line_start":379,"line_end":379,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148953,"byte_end":148962,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149944,"byte_end":149969,"line_start":405,"line_end":405,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"fn (days: i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149112,"byte_end":149201,"line_start":385,"line_end":385,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149206,"byte_end":149235,"line_start":386,"line_end":386,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149240,"byte_end":149243,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the date is out of range.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149248,"byte_end":149295,"line_start":388,"line_end":388,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149300,"byte_end":149303,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149308,"byte_end":149321,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149326,"byte_end":149329,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149334,"byte_end":149342,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149347,"byte_end":149373,"line_start":393,"line_end":393,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149378,"byte_end":149381,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149386,"byte_end":149448,"line_start":395,"line_end":395,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149453,"byte_end":149492,"line_start":396,"line_end":396,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149497,"byte_end":149500,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149505,"byte_end":149578,"line_start":398,"line_end":398,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149583,"byte_end":149653,"line_start":399,"line_end":399,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149658,"byte_end":149730,"line_start":400,"line_end":400,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149735,"byte_end":149807,"line_start":401,"line_end":401,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149812,"byte_end":149863,"line_start":402,"line_end":402,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149868,"byte_end":149919,"line_start":403,"line_end":403,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149924,"byte_end":149932,"line_start":404,"line_end":404,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151706,"byte_end":151727,"line_start":439,"line_end":439,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"fn (year: i32, month: u32, weekday: Weekday, n: u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150422,"byte_end":150515,"line_start":414,"line_end":414,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150520,"byte_end":150614,"line_start":415,"line_end":415,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150619,"byte_end":150704,"line_start":416,"line_end":416,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150709,"byte_end":150712,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150717,"byte_end":150729,"line_start":418,"line_end":418,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150734,"byte_end":150737,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ The resulting `NaiveDate` is guaranteed to be in `month`.  If `n` is larger than the number","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150742,"byte_end":150837,"line_start":420,"line_end":420,"column_start":5,"column_end":100}},{"value":"/ of `weekday` in `month` (eg. the 6th Friday of March 2017) then this function will panic.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150842,"byte_end":150935,"line_start":421,"line_end":421,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150940,"byte_end":150943,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ `n` is 1-indexed.  Passing `n=0` will cause a panic.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150948,"byte_end":151004,"line_start":423,"line_end":423,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151009,"byte_end":151012,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151017,"byte_end":151030,"line_start":425,"line_end":425,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151035,"byte_end":151038,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151043,"byte_end":151051,"line_start":427,"line_end":427,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151056,"byte_end":151093,"line_start":428,"line_end":428,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151098,"byte_end":151101,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let from_weekday_of_month = NaiveDate::from_weekday_of_month;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151106,"byte_end":151171,"line_start":430,"line_end":430,"column_start":5,"column_end":70}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151176,"byte_end":151215,"line_start":431,"line_end":431,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151220,"byte_end":151223,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Wed, 1), from_ymd(2018, 8, 1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151228,"byte_end":151314,"line_start":433,"line_end":433,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 1), from_ymd(2018, 8, 3));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151319,"byte_end":151405,"line_start":434,"line_end":434,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Tue, 2), from_ymd(2018, 8, 14));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151410,"byte_end":151497,"line_start":435,"line_end":435,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 4), from_ymd(2018, 8, 24));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151502,"byte_end":151589,"line_start":436,"line_end":436,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 5), from_ymd(2018, 8, 31));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151594,"byte_end":151681,"line_start":437,"line_end":437,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151686,"byte_end":151694,"line_start":438,"line_end":438,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152602,"byte_end":152627,"line_start":455,"line_end":455,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"fn (year: i32, month: u32, weekday: Weekday, n: u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151900,"byte_end":151993,"line_start":443,"line_end":443,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151998,"byte_end":152092,"line_start":444,"line_end":444,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152097,"byte_end":152201,"line_start":445,"line_end":445,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152206,"byte_end":152209,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152214,"byte_end":152222,"line_start":447,"line_end":447,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152227,"byte_end":152264,"line_start":448,"line_end":448,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152269,"byte_end":152347,"line_start":449,"line_end":449,"column_start":5,"column_end":83}},{"value":"/            NaiveDate::from_ymd_opt(2017, 3, 10))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152352,"byte_end":152404,"line_start":450,"line_end":450,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152409,"byte_end":152417,"line_start":451,"line_end":451,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152422,"byte_end":152425,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `n` out-of-range; ie. if `n` is larger than the number of `weekday` in","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152430,"byte_end":152522,"line_start":453,"line_end":453,"column_start":5,"column_end":97}},{"value":"/ `month` (eg. the 6th Friday of March 2017), or if `n == 0`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152527,"byte_end":152590,"line_start":454,"line_end":454,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154588,"byte_end":154602,"line_start":505,"line_end":505,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153019,"byte_end":153102,"line_start":463,"line_end":463,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153107,"byte_end":153177,"line_start":464,"line_end":464,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153182,"byte_end":153220,"line_start":465,"line_end":465,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153225,"byte_end":153228,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153233,"byte_end":153246,"line_start":467,"line_end":467,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153251,"byte_end":153254,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153259,"byte_end":153267,"line_start":469,"line_end":469,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153272,"byte_end":153298,"line_start":470,"line_end":470,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153303,"byte_end":153306,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153311,"byte_end":153362,"line_start":472,"line_end":472,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153367,"byte_end":153370,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153375,"byte_end":153431,"line_start":474,"line_end":474,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153436,"byte_end":153488,"line_start":475,"line_end":475,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153493,"byte_end":153545,"line_start":476,"line_end":476,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153550,"byte_end":153602,"line_start":477,"line_end":477,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153607,"byte_end":153615,"line_start":478,"line_end":478,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153620,"byte_end":153623,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153628,"byte_end":153686,"line_start":480,"line_end":480,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153691,"byte_end":153694,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153699,"byte_end":153707,"line_start":482,"line_end":482,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153712,"byte_end":153740,"line_start":483,"line_end":483,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153745,"byte_end":153798,"line_start":484,"line_end":484,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153803,"byte_end":153884,"line_start":485,"line_end":485,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153889,"byte_end":153942,"line_start":486,"line_end":486,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153947,"byte_end":153955,"line_start":487,"line_end":487,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153960,"byte_end":153963,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153968,"byte_end":154025,"line_start":489,"line_end":489,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154030,"byte_end":154033,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154038,"byte_end":154046,"line_start":491,"line_end":491,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154051,"byte_end":154079,"line_start":492,"line_end":492,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154084,"byte_end":154137,"line_start":493,"line_end":493,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154142,"byte_end":154198,"line_start":494,"line_end":494,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154203,"byte_end":154265,"line_start":495,"line_end":495,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154270,"byte_end":154278,"line_start":496,"line_end":496,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154283,"byte_end":154286,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154291,"byte_end":154373,"line_start":498,"line_end":498,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154378,"byte_end":154381,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154386,"byte_end":154394,"line_start":500,"line_end":500,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154399,"byte_end":154427,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154432,"byte_end":154485,"line_start":502,"line_end":502,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154490,"byte_end":154563,"line_start":503,"line_end":503,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154568,"byte_end":154576,"line_start":504,"line_end":504,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155251,"byte_end":155259,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"fn (&self, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154790,"byte_end":154866,"line_start":511,"line_end":511,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154871,"byte_end":154874,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154879,"byte_end":154892,"line_start":513,"line_end":513,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154897,"byte_end":154900,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154905,"byte_end":154913,"line_start":515,"line_end":515,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154918,"byte_end":154972,"line_start":516,"line_end":516,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154977,"byte_end":154980,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154985,"byte_end":155029,"line_start":518,"line_end":518,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155034,"byte_end":155089,"line_start":519,"line_end":519,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155094,"byte_end":155097,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155102,"byte_end":155144,"line_start":521,"line_end":521,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155149,"byte_end":155178,"line_start":522,"line_end":522,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155183,"byte_end":155212,"line_start":523,"line_end":523,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155217,"byte_end":155225,"line_start":524,"line_end":524,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155230,"byte_end":155239,"line_start":525,"line_end":525,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156075,"byte_end":156082,"line_start":550,"line_end":550,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155354,"byte_end":155433,"line_start":530,"line_end":530,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155438,"byte_end":155441,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155446,"byte_end":155529,"line_start":532,"line_end":532,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155534,"byte_end":155608,"line_start":533,"line_end":533,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155613,"byte_end":155616,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155621,"byte_end":155670,"line_start":535,"line_end":535,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155675,"byte_end":155678,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155683,"byte_end":155696,"line_start":537,"line_end":537,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155701,"byte_end":155704,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155709,"byte_end":155717,"line_start":539,"line_end":539,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155722,"byte_end":155794,"line_start":540,"line_end":540,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155799,"byte_end":155802,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155807,"byte_end":155851,"line_start":542,"line_end":542,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155856,"byte_end":155859,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155864,"byte_end":155914,"line_start":544,"line_end":544,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155919,"byte_end":155951,"line_start":545,"line_end":545,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155956,"byte_end":155999,"line_start":546,"line_end":546,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156004,"byte_end":156036,"line_start":547,"line_end":547,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156041,"byte_end":156049,"line_start":548,"line_end":548,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156054,"byte_end":156063,"line_start":549,"line_end":549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156968,"byte_end":156979,"line_start":573,"line_end":573,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156215,"byte_end":156294,"line_start":554,"line_end":554,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156299,"byte_end":156302,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156307,"byte_end":156390,"line_start":556,"line_end":556,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156395,"byte_end":156473,"line_start":557,"line_end":557,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156478,"byte_end":156481,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156486,"byte_end":156543,"line_start":559,"line_end":559,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156548,"byte_end":156551,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156556,"byte_end":156569,"line_start":561,"line_end":561,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156574,"byte_end":156577,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156582,"byte_end":156590,"line_start":563,"line_end":563,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156595,"byte_end":156621,"line_start":564,"line_end":564,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156626,"byte_end":156629,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156634,"byte_end":156678,"line_start":566,"line_end":566,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156683,"byte_end":156732,"line_start":567,"line_end":567,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156737,"byte_end":156821,"line_start":568,"line_end":568,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156826,"byte_end":156875,"line_start":569,"line_end":569,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156880,"byte_end":156929,"line_start":570,"line_end":570,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156934,"byte_end":156942,"line_start":571,"line_end":571,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":156947,"byte_end":156956,"line_start":572,"line_end":572,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157918,"byte_end":157931,"line_start":598,"line_end":598,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157136,"byte_end":157228,"line_start":577,"line_end":577,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157233,"byte_end":157236,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157241,"byte_end":157282,"line_start":579,"line_end":579,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157287,"byte_end":157377,"line_start":580,"line_end":580,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157382,"byte_end":157385,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157390,"byte_end":157452,"line_start":582,"line_end":582,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157457,"byte_end":157460,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157465,"byte_end":157478,"line_start":584,"line_end":584,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157483,"byte_end":157486,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157491,"byte_end":157499,"line_start":586,"line_end":586,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157504,"byte_end":157576,"line_start":587,"line_end":587,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157581,"byte_end":157584,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157589,"byte_end":157633,"line_start":589,"line_end":589,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157638,"byte_end":157641,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157646,"byte_end":157707,"line_start":591,"line_end":591,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157712,"byte_end":157744,"line_start":592,"line_end":592,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157749,"byte_end":157792,"line_start":593,"line_end":593,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157797,"byte_end":157829,"line_start":594,"line_end":594,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157834,"byte_end":157879,"line_start":595,"line_end":595,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157884,"byte_end":157892,"line_start":596,"line_end":596,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":157897,"byte_end":157906,"line_start":597,"line_end":597,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159004,"byte_end":159021,"line_start":623,"line_end":623,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158089,"byte_end":158181,"line_start":602,"line_end":602,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158186,"byte_end":158189,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158194,"byte_end":158235,"line_start":604,"line_end":604,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158240,"byte_end":158330,"line_start":605,"line_end":605,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158335,"byte_end":158338,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158343,"byte_end":158413,"line_start":607,"line_end":607,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158418,"byte_end":158421,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158426,"byte_end":158439,"line_start":609,"line_end":609,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158444,"byte_end":158447,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158452,"byte_end":158460,"line_start":611,"line_end":611,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158465,"byte_end":158491,"line_start":612,"line_end":612,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158496,"byte_end":158499,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158504,"byte_end":158548,"line_start":614,"line_end":614,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158553,"byte_end":158615,"line_start":615,"line_end":615,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158620,"byte_end":158697,"line_start":616,"line_end":616,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158702,"byte_end":158764,"line_start":617,"line_end":617,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158769,"byte_end":158831,"line_start":618,"line_end":618,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158836,"byte_end":158898,"line_start":619,"line_end":619,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158903,"byte_end":158965,"line_start":620,"line_end":620,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158970,"byte_end":158978,"line_start":621,"line_end":621,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":158983,"byte_end":158992,"line_start":622,"line_end":622,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160022,"byte_end":160035,"line_start":649,"line_end":649,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159232,"byte_end":159324,"line_start":628,"line_end":628,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159329,"byte_end":159332,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159337,"byte_end":159382,"line_start":630,"line_end":630,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159387,"byte_end":159477,"line_start":631,"line_end":631,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159482,"byte_end":159485,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159490,"byte_end":159552,"line_start":633,"line_end":633,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159557,"byte_end":159560,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159565,"byte_end":159578,"line_start":635,"line_end":635,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159583,"byte_end":159586,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159591,"byte_end":159599,"line_start":637,"line_end":637,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159604,"byte_end":159676,"line_start":638,"line_end":638,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159681,"byte_end":159684,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159689,"byte_end":159733,"line_start":640,"line_end":640,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159738,"byte_end":159741,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159746,"byte_end":159811,"line_start":642,"line_end":642,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159816,"byte_end":159848,"line_start":643,"line_end":643,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159853,"byte_end":159896,"line_start":644,"line_end":644,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159901,"byte_end":159933,"line_start":645,"line_end":645,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159938,"byte_end":159983,"line_start":646,"line_end":646,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":159988,"byte_end":159996,"line_start":647,"line_end":647,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160001,"byte_end":160010,"line_start":648,"line_end":648,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161136,"byte_end":161153,"line_start":674,"line_end":674,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160193,"byte_end":160285,"line_start":653,"line_end":653,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160290,"byte_end":160293,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160298,"byte_end":160343,"line_start":655,"line_end":655,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160348,"byte_end":160438,"line_start":656,"line_end":656,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160443,"byte_end":160446,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160451,"byte_end":160521,"line_start":658,"line_end":658,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160526,"byte_end":160529,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160534,"byte_end":160547,"line_start":660,"line_end":660,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160552,"byte_end":160555,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160560,"byte_end":160568,"line_start":662,"line_end":662,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160573,"byte_end":160599,"line_start":663,"line_end":663,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160604,"byte_end":160607,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160612,"byte_end":160656,"line_start":665,"line_end":665,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160661,"byte_end":160727,"line_start":666,"line_end":666,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160732,"byte_end":160813,"line_start":667,"line_end":667,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160818,"byte_end":160884,"line_start":668,"line_end":668,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160889,"byte_end":160955,"line_start":669,"line_end":669,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":160960,"byte_end":161026,"line_start":670,"line_end":670,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161031,"byte_end":161097,"line_start":671,"line_end":671,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161102,"byte_end":161110,"line_start":672,"line_end":672,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161115,"byte_end":161124,"line_start":673,"line_end":673,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162158,"byte_end":162170,"line_start":700,"line_end":700,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161364,"byte_end":161455,"line_start":679,"line_end":679,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161460,"byte_end":161463,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161468,"byte_end":161516,"line_start":681,"line_end":681,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161521,"byte_end":161611,"line_start":682,"line_end":682,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161616,"byte_end":161619,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161624,"byte_end":161685,"line_start":684,"line_end":684,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161690,"byte_end":161693,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161698,"byte_end":161711,"line_start":686,"line_end":686,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161716,"byte_end":161719,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161724,"byte_end":161732,"line_start":688,"line_end":688,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161737,"byte_end":161809,"line_start":689,"line_end":689,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161814,"byte_end":161817,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161822,"byte_end":161866,"line_start":691,"line_end":691,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161871,"byte_end":161874,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161879,"byte_end":161947,"line_start":693,"line_end":693,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161952,"byte_end":161984,"line_start":694,"line_end":694,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":161989,"byte_end":162032,"line_start":695,"line_end":695,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162037,"byte_end":162069,"line_start":696,"line_end":696,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162074,"byte_end":162119,"line_start":697,"line_end":697,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162124,"byte_end":162132,"line_start":698,"line_end":698,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162137,"byte_end":162146,"line_start":699,"line_end":699,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":163287,"byte_end":163303,"line_start":725,"line_end":725,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162325,"byte_end":162416,"line_start":704,"line_end":704,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162421,"byte_end":162424,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162429,"byte_end":162477,"line_start":706,"line_end":706,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162482,"byte_end":162572,"line_start":707,"line_end":707,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162577,"byte_end":162580,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162585,"byte_end":162654,"line_start":709,"line_end":709,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162659,"byte_end":162662,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162667,"byte_end":162680,"line_start":711,"line_end":711,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162685,"byte_end":162688,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162693,"byte_end":162701,"line_start":713,"line_end":713,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162706,"byte_end":162732,"line_start":714,"line_end":714,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162737,"byte_end":162740,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162745,"byte_end":162789,"line_start":716,"line_end":716,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162794,"byte_end":162863,"line_start":717,"line_end":717,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162868,"byte_end":162952,"line_start":718,"line_end":718,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":162957,"byte_end":163026,"line_start":719,"line_end":719,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":163031,"byte_end":163100,"line_start":720,"line_end":720,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":163105,"byte_end":163174,"line_start":721,"line_end":721,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":163179,"byte_end":163248,"line_start":722,"line_end":722,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":163253,"byte_end":163261,"line_start":723,"line_end":723,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":163266,"byte_end":163275,"line_start":724,"line_end":724,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164976,"byte_end":164980,"line_start":777,"line_end":777,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164444,"byte_end":164499,"line_start":763,"line_end":763,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164504,"byte_end":164507,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164512,"byte_end":164566,"line_start":765,"line_end":765,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164571,"byte_end":164574,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164579,"byte_end":164592,"line_start":767,"line_end":767,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164597,"byte_end":164600,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164605,"byte_end":164613,"line_start":769,"line_end":769,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164618,"byte_end":164644,"line_start":770,"line_end":770,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164649,"byte_end":164652,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164657,"byte_end":164747,"line_start":772,"line_end":772,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164752,"byte_end":164842,"line_start":773,"line_end":773,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164847,"byte_end":164937,"line_start":774,"line_end":774,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164942,"byte_end":164950,"line_start":775,"line_end":775,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":164955,"byte_end":164964,"line_start":776,"line_end":776,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165522,"byte_end":165530,"line_start":796,"line_end":796,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165061,"byte_end":165116,"line_start":781,"line_end":781,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165121,"byte_end":165124,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165129,"byte_end":165191,"line_start":783,"line_end":783,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165196,"byte_end":165199,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165204,"byte_end":165217,"line_start":785,"line_end":785,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165222,"byte_end":165225,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165230,"byte_end":165238,"line_start":787,"line_end":787,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165243,"byte_end":165269,"line_start":788,"line_end":788,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165274,"byte_end":165306,"line_start":789,"line_end":789,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165311,"byte_end":165314,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165319,"byte_end":165377,"line_start":791,"line_end":791,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165382,"byte_end":165436,"line_start":792,"line_end":792,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX_DATE.succ_opt(), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165441,"byte_end":165483,"line_start":793,"line_end":793,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165488,"byte_end":165496,"line_start":794,"line_end":794,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165501,"byte_end":165510,"line_start":795,"line_end":795,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166207,"byte_end":166211,"line_start":814,"line_end":814,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165670,"byte_end":165729,"line_start":800,"line_end":800,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165734,"byte_end":165737,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165742,"byte_end":165797,"line_start":802,"line_end":802,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165802,"byte_end":165805,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165810,"byte_end":165823,"line_start":804,"line_end":804,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165828,"byte_end":165831,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165836,"byte_end":165844,"line_start":806,"line_end":806,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165849,"byte_end":165875,"line_start":807,"line_end":807,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165880,"byte_end":165883,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165888,"byte_end":165978,"line_start":809,"line_end":809,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":165983,"byte_end":166073,"line_start":810,"line_end":810,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166078,"byte_end":166168,"line_start":811,"line_end":811,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166173,"byte_end":166181,"line_start":812,"line_end":812,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166186,"byte_end":166195,"line_start":813,"line_end":813,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166758,"byte_end":166766,"line_start":833,"line_end":833,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166292,"byte_end":166351,"line_start":818,"line_end":818,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166356,"byte_end":166359,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166364,"byte_end":166427,"line_start":820,"line_end":820,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166432,"byte_end":166435,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166440,"byte_end":166453,"line_start":822,"line_end":822,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166458,"byte_end":166461,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166466,"byte_end":166474,"line_start":824,"line_end":824,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166479,"byte_end":166505,"line_start":825,"line_end":825,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166510,"byte_end":166542,"line_start":826,"line_end":826,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166547,"byte_end":166550,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166555,"byte_end":166613,"line_start":828,"line_end":828,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166618,"byte_end":166672,"line_start":829,"line_end":829,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN_DATE.pred_opt(), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166677,"byte_end":166719,"line_start":830,"line_end":830,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166724,"byte_end":166732,"line_start":831,"line_end":831,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166737,"byte_end":166746,"line_start":832,"line_end":832,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167813,"byte_end":167831,"line_start":859,"line_end":859,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166908,"byte_end":166973,"line_start":837,"line_end":837,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166978,"byte_end":166981,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":166986,"byte_end":167037,"line_start":839,"line_end":839,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167042,"byte_end":167045,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167050,"byte_end":167063,"line_start":841,"line_end":841,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167068,"byte_end":167071,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167076,"byte_end":167084,"line_start":843,"line_end":843,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167089,"byte_end":167146,"line_start":844,"line_end":844,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167151,"byte_end":167177,"line_start":845,"line_end":845,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167182,"byte_end":167214,"line_start":846,"line_end":846,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167219,"byte_end":167242,"line_start":847,"line_end":847,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167247,"byte_end":167250,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167255,"byte_end":167299,"line_start":849,"line_end":849,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167304,"byte_end":167360,"line_start":850,"line_end":850,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167365,"byte_end":167421,"line_start":851,"line_end":851,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167426,"byte_end":167483,"line_start":852,"line_end":852,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167488,"byte_end":167543,"line_start":853,"line_end":853,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167548,"byte_end":167622,"line_start":854,"line_end":854,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167627,"byte_end":167702,"line_start":855,"line_end":855,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MAX_DATE.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167707,"byte_end":167776,"line_start":856,"line_end":856,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167781,"byte_end":167788,"line_start":857,"line_end":857,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":167793,"byte_end":167801,"line_start":858,"line_end":858,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169464,"byte_end":169482,"line_start":895,"line_end":895,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168552,"byte_end":168624,"line_start":873,"line_end":873,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168629,"byte_end":168632,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168637,"byte_end":168688,"line_start":875,"line_end":875,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168693,"byte_end":168696,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168701,"byte_end":168714,"line_start":877,"line_end":877,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168719,"byte_end":168722,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168727,"byte_end":168735,"line_start":879,"line_end":879,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168740,"byte_end":168797,"line_start":880,"line_end":880,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168802,"byte_end":168828,"line_start":881,"line_end":881,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168833,"byte_end":168865,"line_start":882,"line_end":882,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168870,"byte_end":168893,"line_start":883,"line_end":883,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168898,"byte_end":168901,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168906,"byte_end":168950,"line_start":885,"line_end":885,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168955,"byte_end":169011,"line_start":886,"line_end":886,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169016,"byte_end":169071,"line_start":887,"line_end":887,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169076,"byte_end":169133,"line_start":888,"line_end":888,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169138,"byte_end":169194,"line_start":889,"line_end":889,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169199,"byte_end":169273,"line_start":890,"line_end":890,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169278,"byte_end":169353,"line_start":891,"line_end":891,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MIN_DATE.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169358,"byte_end":169427,"line_start":892,"line_end":892,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169432,"byte_end":169439,"line_start":893,"line_end":893,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169444,"byte_end":169452,"line_start":894,"line_end":894,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":171408,"byte_end":171429,"line_start":934,"line_end":934,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"fn (self, rhs: NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170203,"byte_end":170259,"line_start":909,"line_end":909,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170264,"byte_end":170309,"line_start":910,"line_end":910,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170314,"byte_end":170317,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170322,"byte_end":170369,"line_start":912,"line_end":912,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170374,"byte_end":170433,"line_start":913,"line_end":913,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170438,"byte_end":170441,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170446,"byte_end":170459,"line_start":915,"line_end":915,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170464,"byte_end":170467,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170472,"byte_end":170480,"line_start":917,"line_end":917,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170485,"byte_end":170542,"line_start":918,"line_end":918,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170547,"byte_end":170573,"line_start":919,"line_end":919,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170578,"byte_end":170601,"line_start":920,"line_end":920,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170606,"byte_end":170609,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170614,"byte_end":170653,"line_start":922,"line_end":922,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170658,"byte_end":170707,"line_start":923,"line_end":923,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170712,"byte_end":170715,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170720,"byte_end":170804,"line_start":925,"line_end":925,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170809,"byte_end":170896,"line_start":926,"line_end":926,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170901,"byte_end":170987,"line_start":927,"line_end":927,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170992,"byte_end":171080,"line_start":928,"line_end":928,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":171085,"byte_end":171172,"line_start":929,"line_end":929,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":171177,"byte_end":171270,"line_start":930,"line_end":930,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":171275,"byte_end":171371,"line_start":931,"line_end":931,"column_start":5,"column_end":101}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":171376,"byte_end":171383,"line_start":932,"line_end":932,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":171388,"byte_end":171396,"line_start":933,"line_end":933,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173192,"byte_end":173209,"line_start":974,"line_end":974,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is the same as the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172023,"byte_end":172080,"line_start":945,"line_end":945,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary `format` method.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172085,"byte_end":172146,"line_start":946,"line_end":946,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172151,"byte_end":172154,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172159,"byte_end":172209,"line_start":948,"line_end":948,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172214,"byte_end":172292,"line_start":949,"line_end":949,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172297,"byte_end":172300,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172305,"byte_end":172318,"line_start":951,"line_end":951,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172323,"byte_end":172326,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172331,"byte_end":172339,"line_start":953,"line_end":953,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172344,"byte_end":172370,"line_start":954,"line_end":954,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172375,"byte_end":172423,"line_start":955,"line_end":955,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172428,"byte_end":172431,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172436,"byte_end":172481,"line_start":957,"line_end":957,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172486,"byte_end":172530,"line_start":958,"line_end":958,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172535,"byte_end":172610,"line_start":959,"line_end":959,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172615,"byte_end":172690,"line_start":960,"line_end":960,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172695,"byte_end":172703,"line_start":961,"line_end":961,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172708,"byte_end":172711,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172716,"byte_end":172800,"line_start":963,"line_end":963,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172805,"byte_end":172808,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172813,"byte_end":172821,"line_start":965,"line_end":965,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172826,"byte_end":172854,"line_start":966,"line_end":966,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172859,"byte_end":172909,"line_start":967,"line_end":967,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172914,"byte_end":172969,"line_start":968,"line_end":968,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172974,"byte_end":173020,"line_start":969,"line_end":969,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173025,"byte_end":173095,"line_start":970,"line_end":970,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173100,"byte_end":173108,"line_start":971,"line_end":971,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173113,"byte_end":173166,"line_start":972,"line_end":972,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173171,"byte_end":173180,"line_start":973,"line_end":973,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174882,"byte_end":174888,"line_start":1013,"line_end":1013,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173390,"byte_end":173444,"line_start":979,"line_end":979,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173449,"byte_end":173519,"line_start":980,"line_end":980,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173524,"byte_end":173562,"line_start":981,"line_end":981,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173567,"byte_end":173570,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173575,"byte_end":173610,"line_start":983,"line_end":983,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173615,"byte_end":173688,"line_start":984,"line_end":984,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173693,"byte_end":173750,"line_start":985,"line_end":985,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173755,"byte_end":173817,"line_start":986,"line_end":986,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173822,"byte_end":173882,"line_start":987,"line_end":987,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173887,"byte_end":173890,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173895,"byte_end":173959,"line_start":989,"line_end":989,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173964,"byte_end":174027,"line_start":990,"line_end":990,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174032,"byte_end":174107,"line_start":991,"line_end":991,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174112,"byte_end":174115,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174120,"byte_end":174133,"line_start":993,"line_end":993,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174138,"byte_end":174141,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174146,"byte_end":174154,"line_start":995,"line_end":995,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174159,"byte_end":174185,"line_start":996,"line_end":996,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174190,"byte_end":174193,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174198,"byte_end":174242,"line_start":998,"line_end":998,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174247,"byte_end":174310,"line_start":999,"line_end":999,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174315,"byte_end":174403,"line_start":1000,"line_end":1000,"column_start":5,"column_end":93}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174408,"byte_end":174416,"line_start":1001,"line_end":1001,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174421,"byte_end":174424,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174429,"byte_end":174513,"line_start":1003,"line_end":1003,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174518,"byte_end":174521,"line_start":1004,"line_end":1004,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174526,"byte_end":174534,"line_start":1005,"line_end":1005,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174539,"byte_end":174567,"line_start":1006,"line_end":1006,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174572,"byte_end":174618,"line_start":1007,"line_end":1007,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174623,"byte_end":174689,"line_start":1008,"line_end":1008,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174694,"byte_end":174785,"line_start":1009,"line_end":1009,"column_start":5,"column_end":96}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174790,"byte_end":174798,"line_start":1010,"line_end":1010,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174803,"byte_end":174856,"line_start":1011,"line_end":1011,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174861,"byte_end":174870,"line_start":1012,"line_end":1012,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1987},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":222227,"byte_end":222234,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":1988}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":221821,"byte_end":221839,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":221840,"byte_end":221843,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":221844,"byte_end":221907,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ constitues the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":221908,"byte_end":221983,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":221984,"byte_end":222075,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":222076,"byte_end":222160,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224172,"byte_end":224176,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223514,"byte_end":223560,"line_start":47,"line_end":47,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223565,"byte_end":223568,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223573,"byte_end":223586,"line_start":49,"line_end":49,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223591,"byte_end":223594,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223599,"byte_end":223607,"line_start":51,"line_end":51,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223612,"byte_end":223659,"line_start":52,"line_end":52,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223664,"byte_end":223667,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223672,"byte_end":223730,"line_start":54,"line_end":54,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223735,"byte_end":223777,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223782,"byte_end":223790,"line_start":56,"line_end":56,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223795,"byte_end":223798,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223803,"byte_end":223865,"line_start":58,"line_end":58,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223870,"byte_end":223899,"line_start":59,"line_end":59,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223904,"byte_end":223907,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223912,"byte_end":223920,"line_start":61,"line_end":61,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223925,"byte_end":223974,"line_start":62,"line_end":62,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223979,"byte_end":224039,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224044,"byte_end":224075,"line_start":64,"line_end":64,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224080,"byte_end":224133,"line_start":65,"line_end":65,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224138,"byte_end":224146,"line_start":66,"line_end":66,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224151,"byte_end":224160,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224626,"byte_end":224630,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224227,"byte_end":224275,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224280,"byte_end":224283,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224288,"byte_end":224371,"line_start":74,"line_end":74,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224376,"byte_end":224379,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224384,"byte_end":224397,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224402,"byte_end":224405,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224410,"byte_end":224418,"line_start":78,"line_end":78,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224423,"byte_end":224470,"line_start":79,"line_end":79,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224475,"byte_end":224478,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224483,"byte_end":224542,"line_start":81,"line_end":81,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224547,"byte_end":224587,"line_start":82,"line_end":82,"column_start":5,"column_end":45}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224592,"byte_end":224600,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224605,"byte_end":224614,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":225098,"byte_end":225103,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224698,"byte_end":224746,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224751,"byte_end":224754,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224759,"byte_end":224842,"line_start":91,"line_end":91,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224847,"byte_end":224850,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224855,"byte_end":224868,"line_start":93,"line_end":93,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224873,"byte_end":224876,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224881,"byte_end":224889,"line_start":95,"line_end":95,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224894,"byte_end":224941,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224946,"byte_end":224949,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":224954,"byte_end":225013,"line_start":98,"line_end":98,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":225018,"byte_end":225059,"line_start":99,"line_end":99,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":225064,"byte_end":225072,"line_start":100,"line_end":100,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":225077,"byte_end":225086,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2007},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234867,"byte_end":234876,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2009}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227656,"byte_end":227691,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227692,"byte_end":227772,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227773,"byte_end":227776,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227777,"byte_end":227803,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227804,"byte_end":227807,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227808,"byte_end":227875,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227876,"byte_end":227929,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227930,"byte_end":228008,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228009,"byte_end":228079,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228080,"byte_end":228158,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228159,"byte_end":228248,"line_start":29,"line_end":29,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228249,"byte_end":228319,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228320,"byte_end":228397,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228398,"byte_end":228429,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228430,"byte_end":228513,"line_start":33,"line_end":33,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228514,"byte_end":228597,"line_start":34,"line_end":34,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228598,"byte_end":228601,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228602,"byte_end":228639,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228640,"byte_end":228708,"line_start":37,"line_end":37,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228709,"byte_end":228785,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228786,"byte_end":228867,"line_start":39,"line_end":39,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228868,"byte_end":228942,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228943,"byte_end":229013,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229014,"byte_end":229099,"line_start":42,"line_end":42,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229100,"byte_end":229169,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229170,"byte_end":229173,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229174,"byte_end":229253,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229254,"byte_end":229349,"line_start":46,"line_end":46,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229350,"byte_end":229412,"line_start":47,"line_end":47,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229413,"byte_end":229476,"line_start":48,"line_end":48,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229477,"byte_end":229480,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229481,"byte_end":229522,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229523,"byte_end":229602,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229603,"byte_end":229683,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229684,"byte_end":229755,"line_start":53,"line_end":53,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229756,"byte_end":229759,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229760,"byte_end":229792,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229793,"byte_end":229796,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229797,"byte_end":229872,"line_start":57,"line_end":57,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229873,"byte_end":229948,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229949,"byte_end":229997,"line_start":59,"line_end":59,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":229998,"byte_end":230066,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230067,"byte_end":230070,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230071,"byte_end":230140,"line_start":62,"line_end":62,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230141,"byte_end":230144,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230145,"byte_end":230153,"line_start":64,"line_end":64,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230154,"byte_end":230208,"line_start":65,"line_end":65,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230209,"byte_end":230212,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230213,"byte_end":230269,"line_start":67,"line_end":67,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230270,"byte_end":230273,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230274,"byte_end":230356,"line_start":69,"line_end":69,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230357,"byte_end":230360,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230361,"byte_end":230436,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230437,"byte_end":230465,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230466,"byte_end":230474,"line_start":73,"line_end":73,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230475,"byte_end":230478,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230479,"byte_end":230559,"line_start":75,"line_end":75,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230560,"byte_end":230639,"line_start":76,"line_end":76,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230640,"byte_end":230725,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230726,"byte_end":230813,"line_start":78,"line_end":78,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230814,"byte_end":230817,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230818,"byte_end":230850,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230851,"byte_end":230854,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230855,"byte_end":230943,"line_start":82,"line_end":82,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":230944,"byte_end":231019,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231020,"byte_end":231094,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231095,"byte_end":231098,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231099,"byte_end":231120,"line_start":86,"line_end":86,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231121,"byte_end":231207,"line_start":87,"line_end":87,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231208,"byte_end":231211,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231212,"byte_end":231245,"line_start":89,"line_end":89,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231246,"byte_end":231280,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231281,"byte_end":231314,"line_start":91,"line_end":91,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231315,"byte_end":231348,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231349,"byte_end":231402,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231403,"byte_end":231437,"line_start":94,"line_end":94,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231438,"byte_end":231472,"line_start":95,"line_end":95,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231473,"byte_end":231512,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231513,"byte_end":231516,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231517,"byte_end":231538,"line_start":98,"line_end":98,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231539,"byte_end":231625,"line_start":99,"line_end":99,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231626,"byte_end":231629,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231630,"byte_end":231663,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231664,"byte_end":231697,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231698,"byte_end":231732,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231733,"byte_end":231767,"line_start":104,"line_end":104,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231768,"byte_end":231824,"line_start":105,"line_end":105,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231825,"byte_end":231864,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231865,"byte_end":231904,"line_start":107,"line_end":107,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231905,"byte_end":231908,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231909,"byte_end":231926,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231927,"byte_end":232011,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232012,"byte_end":232015,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232016,"byte_end":232052,"line_start":112,"line_end":112,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232053,"byte_end":232087,"line_start":113,"line_end":113,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232088,"byte_end":232122,"line_start":114,"line_end":114,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232123,"byte_end":232183,"line_start":115,"line_end":115,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232184,"byte_end":232223,"line_start":116,"line_end":116,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232224,"byte_end":232261,"line_start":117,"line_end":117,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232262,"byte_end":232299,"line_start":118,"line_end":118,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232300,"byte_end":232359,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232360,"byte_end":232436,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232437,"byte_end":232469,"line_start":121,"line_end":121,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232470,"byte_end":232551,"line_start":122,"line_end":122,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232552,"byte_end":232590,"line_start":123,"line_end":123,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232591,"byte_end":232594,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232595,"byte_end":232610,"line_start":125,"line_end":125,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232611,"byte_end":232614,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232615,"byte_end":232683,"line_start":127,"line_end":127,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232684,"byte_end":232687,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232688,"byte_end":232759,"line_start":129,"line_end":129,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232760,"byte_end":232763,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232764,"byte_end":232831,"line_start":131,"line_end":131,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232832,"byte_end":232835,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232836,"byte_end":232888,"line_start":133,"line_end":133,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232889,"byte_end":232980,"line_start":134,"line_end":134,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232981,"byte_end":233014,"line_start":135,"line_end":135,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233015,"byte_end":233018,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233019,"byte_end":233109,"line_start":137,"line_end":137,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233110,"byte_end":233113,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233114,"byte_end":233189,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233190,"byte_end":233229,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233230,"byte_end":233315,"line_start":141,"line_end":141,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233316,"byte_end":233353,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233354,"byte_end":233357,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233358,"byte_end":233397,"line_start":144,"line_end":144,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233398,"byte_end":233401,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233402,"byte_end":233459,"line_start":146,"line_end":146,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233460,"byte_end":233517,"line_start":147,"line_end":147,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233518,"byte_end":233574,"line_start":148,"line_end":148,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233575,"byte_end":233652,"line_start":149,"line_end":149,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233653,"byte_end":233656,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233657,"byte_end":233665,"line_start":151,"line_end":151,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233666,"byte_end":233698,"line_start":152,"line_end":152,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233699,"byte_end":233702,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233703,"byte_end":233770,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233771,"byte_end":233831,"line_start":155,"line_end":155,"column_start":1,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233832,"byte_end":233840,"line_start":156,"line_end":156,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233841,"byte_end":233844,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233845,"byte_end":233911,"line_start":158,"line_end":158,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233912,"byte_end":233949,"line_start":159,"line_end":159,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233950,"byte_end":234016,"line_start":160,"line_end":160,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234017,"byte_end":234114,"line_start":161,"line_end":161,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234115,"byte_end":234180,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234181,"byte_end":234236,"line_start":163,"line_end":163,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234237,"byte_end":234240,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234241,"byte_end":234249,"line_start":165,"line_end":165,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234250,"byte_end":234292,"line_start":166,"line_end":166,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234293,"byte_end":234296,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234297,"byte_end":234363,"line_start":168,"line_end":168,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234364,"byte_end":234424,"line_start":169,"line_end":169,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234425,"byte_end":234428,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234429,"byte_end":234482,"line_start":171,"line_end":171,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234483,"byte_end":234543,"line_start":172,"line_end":172,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234544,"byte_end":234626,"line_start":173,"line_end":173,"column_start":1,"column_end":83}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234627,"byte_end":234635,"line_start":174,"line_end":174,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234636,"byte_end":234639,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234640,"byte_end":234710,"line_start":176,"line_end":176,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234711,"byte_end":234800,"line_start":177,"line_end":177,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235534,"byte_end":235542,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"fn (hour: u32, min: u32, sec: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234933,"byte_end":234990,"line_start":185,"line_end":185,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234995,"byte_end":234998,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235003,"byte_end":235063,"line_start":187,"line_end":187,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235068,"byte_end":235143,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235148,"byte_end":235151,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235156,"byte_end":235205,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235210,"byte_end":235213,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235218,"byte_end":235231,"line_start":192,"line_end":192,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235236,"byte_end":235239,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235244,"byte_end":235252,"line_start":194,"line_end":194,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235257,"byte_end":235295,"line_start":195,"line_end":195,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235300,"byte_end":235303,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235308,"byte_end":235351,"line_start":197,"line_end":197,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235356,"byte_end":235385,"line_start":198,"line_end":198,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235390,"byte_end":235421,"line_start":199,"line_end":199,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235426,"byte_end":235456,"line_start":200,"line_end":200,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235461,"byte_end":235495,"line_start":201,"line_end":201,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235500,"byte_end":235508,"line_start":202,"line_end":202,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235513,"byte_end":235522,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236399,"byte_end":236411,"line_start":229,"line_end":229,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"fn (hour: u32, min: u32, sec: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235671,"byte_end":235728,"line_start":208,"line_end":208,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235733,"byte_end":235736,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235741,"byte_end":235801,"line_start":210,"line_end":210,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235806,"byte_end":235885,"line_start":211,"line_end":211,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235890,"byte_end":235893,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235898,"byte_end":235955,"line_start":213,"line_end":213,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235960,"byte_end":235963,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235968,"byte_end":235981,"line_start":215,"line_end":215,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235986,"byte_end":235989,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235994,"byte_end":236002,"line_start":217,"line_end":217,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236007,"byte_end":236033,"line_start":218,"line_end":218,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236038,"byte_end":236041,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236046,"byte_end":236093,"line_start":220,"line_end":220,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236098,"byte_end":236101,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236106,"byte_end":236151,"line_start":222,"line_end":222,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236156,"byte_end":236204,"line_start":223,"line_end":223,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236209,"byte_end":236255,"line_start":224,"line_end":224,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236260,"byte_end":236307,"line_start":225,"line_end":225,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236312,"byte_end":236360,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236365,"byte_end":236373,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236378,"byte_end":236387,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237152,"byte_end":237166,"line_start":252,"line_end":252,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236533,"byte_end":236603,"line_start":233,"line_end":233,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236608,"byte_end":236611,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236616,"byte_end":236657,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236662,"byte_end":236729,"line_start":236,"line_end":236,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236734,"byte_end":236737,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236742,"byte_end":236804,"line_start":238,"line_end":238,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236809,"byte_end":236812,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236817,"byte_end":236830,"line_start":240,"line_end":240,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236835,"byte_end":236838,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236843,"byte_end":236851,"line_start":242,"line_end":242,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236856,"byte_end":236894,"line_start":243,"line_end":243,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236899,"byte_end":236902,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236907,"byte_end":236960,"line_start":245,"line_end":245,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236965,"byte_end":236994,"line_start":246,"line_end":246,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236999,"byte_end":237030,"line_start":247,"line_end":247,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237035,"byte_end":237065,"line_start":248,"line_end":248,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237070,"byte_end":237113,"line_start":249,"line_end":249,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237118,"byte_end":237126,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237131,"byte_end":237140,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238226,"byte_end":238244,"line_start":279,"line_end":279,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237320,"byte_end":237390,"line_start":256,"line_end":256,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237395,"byte_end":237398,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237403,"byte_end":237444,"line_start":258,"line_end":258,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237449,"byte_end":237516,"line_start":259,"line_end":259,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237521,"byte_end":237524,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237529,"byte_end":237599,"line_start":261,"line_end":261,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237604,"byte_end":237607,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237612,"byte_end":237625,"line_start":263,"line_end":263,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237630,"byte_end":237633,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237638,"byte_end":237646,"line_start":265,"line_end":265,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237651,"byte_end":237677,"line_start":266,"line_end":266,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237682,"byte_end":237685,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237690,"byte_end":237744,"line_start":268,"line_end":268,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237749,"byte_end":237752,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237757,"byte_end":237806,"line_start":270,"line_end":270,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237811,"byte_end":237865,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237870,"byte_end":237958,"line_start":272,"line_end":272,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237963,"byte_end":238013,"line_start":273,"line_end":273,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238018,"byte_end":238069,"line_start":274,"line_end":274,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238074,"byte_end":238126,"line_start":275,"line_end":275,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238131,"byte_end":238187,"line_start":276,"line_end":276,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238192,"byte_end":238200,"line_start":277,"line_end":277,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238205,"byte_end":238214,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239068,"byte_end":239082,"line_start":303,"line_end":303,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238441,"byte_end":238511,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238516,"byte_end":238519,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238524,"byte_end":238569,"line_start":286,"line_end":286,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238574,"byte_end":238641,"line_start":287,"line_end":287,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238646,"byte_end":238649,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238654,"byte_end":238716,"line_start":289,"line_end":289,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238721,"byte_end":238724,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238729,"byte_end":238742,"line_start":291,"line_end":291,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238747,"byte_end":238750,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238755,"byte_end":238763,"line_start":293,"line_end":293,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238768,"byte_end":238806,"line_start":294,"line_end":294,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238811,"byte_end":238814,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238819,"byte_end":238876,"line_start":296,"line_end":296,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238881,"byte_end":238910,"line_start":297,"line_end":297,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238915,"byte_end":238946,"line_start":298,"line_end":298,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238951,"byte_end":238981,"line_start":299,"line_end":299,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238986,"byte_end":239029,"line_start":300,"line_end":300,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239034,"byte_end":239042,"line_start":301,"line_end":301,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239047,"byte_end":239056,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240158,"byte_end":240176,"line_start":330,"line_end":330,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239236,"byte_end":239306,"line_start":307,"line_end":307,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239311,"byte_end":239314,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239319,"byte_end":239364,"line_start":309,"line_end":309,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239369,"byte_end":239436,"line_start":310,"line_end":310,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239441,"byte_end":239444,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239449,"byte_end":239519,"line_start":312,"line_end":312,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239524,"byte_end":239527,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239532,"byte_end":239545,"line_start":314,"line_end":314,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239550,"byte_end":239553,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239558,"byte_end":239566,"line_start":316,"line_end":316,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239571,"byte_end":239597,"line_start":317,"line_end":317,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239602,"byte_end":239605,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239610,"byte_end":239664,"line_start":319,"line_end":319,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239669,"byte_end":239672,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239677,"byte_end":239726,"line_start":321,"line_end":321,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239731,"byte_end":239789,"line_start":322,"line_end":322,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239794,"byte_end":239886,"line_start":323,"line_end":323,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239891,"byte_end":239941,"line_start":324,"line_end":324,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239946,"byte_end":239997,"line_start":325,"line_end":325,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240002,"byte_end":240054,"line_start":326,"line_end":326,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240059,"byte_end":240119,"line_start":327,"line_end":327,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240124,"byte_end":240132,"line_start":328,"line_end":328,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240137,"byte_end":240146,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241000,"byte_end":241013,"line_start":354,"line_end":354,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240369,"byte_end":240438,"line_start":335,"line_end":335,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240443,"byte_end":240446,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240451,"byte_end":240499,"line_start":337,"line_end":337,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240504,"byte_end":240571,"line_start":338,"line_end":338,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240576,"byte_end":240579,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240584,"byte_end":240645,"line_start":340,"line_end":340,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240650,"byte_end":240653,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240658,"byte_end":240671,"line_start":342,"line_end":342,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240676,"byte_end":240679,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240684,"byte_end":240692,"line_start":344,"line_end":344,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240697,"byte_end":240735,"line_start":345,"line_end":345,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240740,"byte_end":240743,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240748,"byte_end":240808,"line_start":347,"line_end":347,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240813,"byte_end":240842,"line_start":348,"line_end":348,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240847,"byte_end":240878,"line_start":349,"line_end":349,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240883,"byte_end":240913,"line_start":350,"line_end":350,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240918,"byte_end":240961,"line_start":351,"line_end":351,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240966,"byte_end":240974,"line_start":352,"line_end":352,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":240979,"byte_end":240988,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242098,"byte_end":242115,"line_start":381,"line_end":381,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241164,"byte_end":241233,"line_start":358,"line_end":358,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241238,"byte_end":241241,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241246,"byte_end":241294,"line_start":360,"line_end":360,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241299,"byte_end":241366,"line_start":361,"line_end":361,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241371,"byte_end":241374,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241379,"byte_end":241448,"line_start":363,"line_end":363,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241453,"byte_end":241456,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241461,"byte_end":241474,"line_start":365,"line_end":365,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241479,"byte_end":241482,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241487,"byte_end":241495,"line_start":367,"line_end":367,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241500,"byte_end":241526,"line_start":368,"line_end":368,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241531,"byte_end":241534,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241539,"byte_end":241592,"line_start":370,"line_end":370,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241597,"byte_end":241600,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241605,"byte_end":241654,"line_start":372,"line_end":372,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241659,"byte_end":241721,"line_start":373,"line_end":373,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241726,"byte_end":241822,"line_start":374,"line_end":374,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241827,"byte_end":241877,"line_start":375,"line_end":375,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241882,"byte_end":241933,"line_start":376,"line_end":376,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241938,"byte_end":241990,"line_start":377,"line_end":377,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":241995,"byte_end":242059,"line_start":378,"line_end":378,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242064,"byte_end":242072,"line_start":379,"line_end":379,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242077,"byte_end":242086,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243039,"byte_end":243069,"line_start":406,"line_end":406,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"fn (secs: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242382,"byte_end":242467,"line_start":387,"line_end":387,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242472,"byte_end":242475,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242480,"byte_end":242528,"line_start":389,"line_end":389,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242533,"byte_end":242600,"line_start":390,"line_end":390,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242605,"byte_end":242608,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242613,"byte_end":242671,"line_start":392,"line_end":392,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242676,"byte_end":242679,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242684,"byte_end":242697,"line_start":394,"line_end":394,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242702,"byte_end":242705,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242710,"byte_end":242718,"line_start":396,"line_end":396,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242723,"byte_end":242761,"line_start":397,"line_end":397,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242766,"byte_end":242769,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242774,"byte_end":242847,"line_start":399,"line_end":399,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242852,"byte_end":242881,"line_start":400,"line_end":400,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242886,"byte_end":242917,"line_start":401,"line_end":401,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242922,"byte_end":242952,"line_start":402,"line_end":402,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":242957,"byte_end":243000,"line_start":403,"line_end":403,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243005,"byte_end":243013,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243018,"byte_end":243027,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244041,"byte_end":244075,"line_start":431,"line_end":431,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"fn (secs: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243207,"byte_end":243292,"line_start":410,"line_end":410,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243297,"byte_end":243300,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243305,"byte_end":243353,"line_start":412,"line_end":412,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243358,"byte_end":243425,"line_start":413,"line_end":413,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243430,"byte_end":243433,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243438,"byte_end":243504,"line_start":415,"line_end":415,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243509,"byte_end":243512,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243517,"byte_end":243530,"line_start":417,"line_end":417,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243535,"byte_end":243538,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243543,"byte_end":243551,"line_start":419,"line_end":419,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243556,"byte_end":243582,"line_start":420,"line_end":420,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243587,"byte_end":243590,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243595,"byte_end":243666,"line_start":422,"line_end":422,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243671,"byte_end":243674,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243679,"byte_end":243723,"line_start":424,"line_end":424,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243728,"byte_end":243786,"line_start":425,"line_end":425,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243791,"byte_end":243883,"line_start":426,"line_end":426,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243888,"byte_end":243937,"line_start":427,"line_end":427,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":243942,"byte_end":244002,"line_start":428,"line_end":428,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244007,"byte_end":244015,"line_start":429,"line_end":429,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244020,"byte_end":244029,"line_start":430,"line_end":430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246725,"byte_end":246739,"line_start":497,"line_end":497,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244251,"byte_end":244334,"line_start":436,"line_end":436,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244339,"byte_end":244409,"line_start":437,"line_end":437,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244414,"byte_end":244452,"line_start":438,"line_end":438,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244457,"byte_end":244460,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244465,"byte_end":244478,"line_start":440,"line_end":440,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244483,"byte_end":244486,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244491,"byte_end":244499,"line_start":442,"line_end":442,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244504,"byte_end":244530,"line_start":443,"line_end":443,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244535,"byte_end":244538,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244543,"byte_end":244594,"line_start":445,"line_end":445,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244599,"byte_end":244602,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244607,"byte_end":244661,"line_start":447,"line_end":447,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244666,"byte_end":244717,"line_start":448,"line_end":448,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244722,"byte_end":244784,"line_start":449,"line_end":449,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244789,"byte_end":244856,"line_start":450,"line_end":450,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244861,"byte_end":244869,"line_start":451,"line_end":451,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244874,"byte_end":244877,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244882,"byte_end":244940,"line_start":453,"line_end":453,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244945,"byte_end":244948,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244953,"byte_end":244961,"line_start":455,"line_end":455,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244966,"byte_end":244994,"line_start":456,"line_end":456,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":244999,"byte_end":245052,"line_start":457,"line_end":457,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245057,"byte_end":245138,"line_start":458,"line_end":458,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245143,"byte_end":245195,"line_start":459,"line_end":459,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245200,"byte_end":245208,"line_start":460,"line_end":460,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245213,"byte_end":245216,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245221,"byte_end":245287,"line_start":462,"line_end":462,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245292,"byte_end":245354,"line_start":463,"line_end":463,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245359,"byte_end":245435,"line_start":464,"line_end":464,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245440,"byte_end":245443,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245448,"byte_end":245456,"line_start":466,"line_end":466,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245461,"byte_end":245489,"line_start":467,"line_end":467,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245494,"byte_end":245547,"line_start":468,"line_end":468,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245552,"byte_end":245613,"line_start":469,"line_end":469,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245618,"byte_end":245682,"line_start":470,"line_end":470,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245687,"byte_end":245695,"line_start":471,"line_end":471,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245700,"byte_end":245703,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245708,"byte_end":245751,"line_start":473,"line_end":473,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245756,"byte_end":245827,"line_start":474,"line_end":474,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245832,"byte_end":245835,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245840,"byte_end":245848,"line_start":476,"line_end":476,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245853,"byte_end":245881,"line_start":477,"line_end":477,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245886,"byte_end":245939,"line_start":478,"line_end":478,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245944,"byte_end":245991,"line_start":479,"line_end":479,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":245996,"byte_end":246046,"line_start":480,"line_end":480,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246051,"byte_end":246054,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246059,"byte_end":246116,"line_start":482,"line_end":482,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246121,"byte_end":246170,"line_start":483,"line_end":483,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246175,"byte_end":246230,"line_start":484,"line_end":484,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246235,"byte_end":246296,"line_start":485,"line_end":485,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246301,"byte_end":246309,"line_start":486,"line_end":486,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246314,"byte_end":246317,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246322,"byte_end":246404,"line_start":488,"line_end":488,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246409,"byte_end":246458,"line_start":489,"line_end":489,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246463,"byte_end":246522,"line_start":490,"line_end":490,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246527,"byte_end":246530,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246535,"byte_end":246543,"line_start":492,"line_end":492,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246548,"byte_end":246576,"line_start":493,"line_end":493,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246581,"byte_end":246634,"line_start":494,"line_end":494,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246639,"byte_end":246700,"line_start":495,"line_end":495,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246705,"byte_end":246713,"line_start":496,"line_end":496,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247902,"byte_end":247924,"line_start":526,"line_end":526,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"fn (&self, mut rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246927,"byte_end":246973,"line_start":503,"line_end":503,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":246978,"byte_end":247022,"line_start":504,"line_end":504,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247027,"byte_end":247088,"line_start":505,"line_end":505,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247093,"byte_end":247174,"line_start":506,"line_end":506,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247179,"byte_end":247182,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247187,"byte_end":247200,"line_start":508,"line_end":508,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247205,"byte_end":247208,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247213,"byte_end":247221,"line_start":510,"line_end":510,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247226,"byte_end":247283,"line_start":511,"line_end":511,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247288,"byte_end":247314,"line_start":512,"line_end":512,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247319,"byte_end":247342,"line_start":513,"line_end":513,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247347,"byte_end":247350,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247355,"byte_end":247394,"line_start":515,"line_end":515,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247399,"byte_end":247402,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247407,"byte_end":247484,"line_start":517,"line_end":517,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247489,"byte_end":247529,"line_start":518,"line_end":518,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247534,"byte_end":247611,"line_start":519,"line_end":519,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247616,"byte_end":247660,"line_start":520,"line_end":520,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247665,"byte_end":247742,"line_start":521,"line_end":521,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247747,"byte_end":247793,"line_start":522,"line_end":522,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247798,"byte_end":247805,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247810,"byte_end":247818,"line_start":524,"line_end":524,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251433,"byte_end":251455,"line_start":612,"line_end":612,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"fn (&self, rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250507,"byte_end":250560,"line_start":589,"line_end":589,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250565,"byte_end":250609,"line_start":590,"line_end":590,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250614,"byte_end":250678,"line_start":591,"line_end":591,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250683,"byte_end":250764,"line_start":592,"line_end":592,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250769,"byte_end":250772,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250777,"byte_end":250790,"line_start":594,"line_end":594,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250795,"byte_end":250798,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250803,"byte_end":250811,"line_start":596,"line_end":596,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250816,"byte_end":250873,"line_start":597,"line_end":597,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250878,"byte_end":250904,"line_start":598,"line_end":598,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250909,"byte_end":250932,"line_start":599,"line_end":599,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250937,"byte_end":250940,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250945,"byte_end":250984,"line_start":601,"line_end":601,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250989,"byte_end":250992,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250997,"byte_end":251073,"line_start":603,"line_end":603,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251078,"byte_end":251117,"line_start":604,"line_end":604,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251122,"byte_end":251199,"line_start":605,"line_end":605,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251204,"byte_end":251249,"line_start":606,"line_end":606,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251254,"byte_end":251332,"line_start":607,"line_end":607,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251337,"byte_end":251382,"line_start":608,"line_end":608,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251387,"byte_end":251394,"line_start":609,"line_end":609,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251399,"byte_end":251407,"line_start":610,"line_end":610,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251412,"byte_end":251421,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":254509,"byte_end":254530,"line_start":677,"line_end":677,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"fn (self, rhs: NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251647,"byte_end":251703,"line_start":617,"line_end":617,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251708,"byte_end":251750,"line_start":618,"line_end":618,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251755,"byte_end":251802,"line_start":619,"line_end":619,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251807,"byte_end":251810,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251815,"byte_end":251887,"line_start":621,"line_end":621,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251892,"byte_end":251958,"line_start":622,"line_end":622,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":251963,"byte_end":252038,"line_start":623,"line_end":623,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252043,"byte_end":252088,"line_start":624,"line_end":624,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252093,"byte_end":252152,"line_start":625,"line_end":625,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252157,"byte_end":252160,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252165,"byte_end":252178,"line_start":627,"line_end":627,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252183,"byte_end":252186,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252191,"byte_end":252199,"line_start":629,"line_end":629,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252204,"byte_end":252261,"line_start":630,"line_end":630,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252266,"byte_end":252292,"line_start":631,"line_end":631,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252297,"byte_end":252320,"line_start":632,"line_end":632,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252325,"byte_end":252328,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252333,"byte_end":252379,"line_start":634,"line_end":634,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252384,"byte_end":252433,"line_start":635,"line_end":635,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252438,"byte_end":252441,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252446,"byte_end":252517,"line_start":637,"line_end":637,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252522,"byte_end":252555,"line_start":638,"line_end":638,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252560,"byte_end":252631,"line_start":639,"line_end":639,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252636,"byte_end":252679,"line_start":640,"line_end":640,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252684,"byte_end":252755,"line_start":641,"line_end":641,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252760,"byte_end":252804,"line_start":642,"line_end":642,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252809,"byte_end":252880,"line_start":643,"line_end":643,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252885,"byte_end":252922,"line_start":644,"line_end":644,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":252927,"byte_end":252998,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253003,"byte_end":253045,"line_start":646,"line_end":646,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253050,"byte_end":253121,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253126,"byte_end":253170,"line_start":648,"line_end":648,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253175,"byte_end":253246,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253251,"byte_end":253292,"line_start":650,"line_end":650,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253297,"byte_end":253368,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253373,"byte_end":253452,"line_start":652,"line_end":652,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253457,"byte_end":253464,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253469,"byte_end":253477,"line_start":654,"line_end":654,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253482,"byte_end":253485,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253490,"byte_end":253552,"line_start":656,"line_end":656,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253557,"byte_end":253603,"line_start":657,"line_end":657,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253608,"byte_end":253611,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253616,"byte_end":253624,"line_start":659,"line_end":659,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253629,"byte_end":253686,"line_start":660,"line_end":660,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253691,"byte_end":253719,"line_start":661,"line_end":661,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253724,"byte_end":253749,"line_start":662,"line_end":662,"column_start":5,"column_end":30}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253754,"byte_end":253802,"line_start":663,"line_end":663,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253807,"byte_end":253858,"line_start":664,"line_end":664,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253863,"byte_end":253936,"line_start":665,"line_end":665,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253941,"byte_end":253978,"line_start":666,"line_end":666,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253983,"byte_end":254056,"line_start":667,"line_end":667,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":254061,"byte_end":254106,"line_start":668,"line_end":668,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":254111,"byte_end":254183,"line_start":669,"line_end":669,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":254188,"byte_end":254226,"line_start":670,"line_end":670,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":254231,"byte_end":254304,"line_start":671,"line_end":671,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":254309,"byte_end":254346,"line_start":672,"line_end":672,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":254351,"byte_end":254429,"line_start":673,"line_end":673,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":254434,"byte_end":254472,"line_start":674,"line_end":674,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":254477,"byte_end":254484,"line_start":675,"line_end":675,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":254489,"byte_end":254497,"line_start":676,"line_end":676,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256980,"byte_end":256997,"line_start":732,"line_end":732,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":255801,"byte_end":255858,"line_start":703,"line_end":703,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":255863,"byte_end":255942,"line_start":704,"line_end":704,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":255947,"byte_end":255950,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":255955,"byte_end":256005,"line_start":706,"line_end":706,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256010,"byte_end":256088,"line_start":707,"line_end":707,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256093,"byte_end":256096,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256101,"byte_end":256114,"line_start":709,"line_end":709,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256119,"byte_end":256122,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256127,"byte_end":256135,"line_start":711,"line_end":711,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256140,"byte_end":256166,"line_start":712,"line_end":712,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256171,"byte_end":256219,"line_start":713,"line_end":713,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256224,"byte_end":256227,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256232,"byte_end":256277,"line_start":715,"line_end":715,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256282,"byte_end":256325,"line_start":716,"line_end":716,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256330,"byte_end":256403,"line_start":717,"line_end":717,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256408,"byte_end":256481,"line_start":718,"line_end":718,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256486,"byte_end":256494,"line_start":719,"line_end":719,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256499,"byte_end":256502,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256507,"byte_end":256591,"line_start":721,"line_end":721,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256596,"byte_end":256599,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256604,"byte_end":256612,"line_start":723,"line_end":723,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256617,"byte_end":256645,"line_start":724,"line_end":724,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256650,"byte_end":256700,"line_start":725,"line_end":725,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256705,"byte_end":256760,"line_start":726,"line_end":726,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256765,"byte_end":256810,"line_start":727,"line_end":727,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256815,"byte_end":256883,"line_start":728,"line_end":728,"column_start":5,"column_end":73}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256888,"byte_end":256896,"line_start":729,"line_end":729,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256901,"byte_end":256954,"line_start":730,"line_end":730,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":256959,"byte_end":256968,"line_start":731,"line_end":731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258803,"byte_end":258809,"line_start":773,"line_end":773,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257178,"byte_end":257232,"line_start":737,"line_end":737,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257237,"byte_end":257307,"line_start":738,"line_end":738,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257312,"byte_end":257350,"line_start":739,"line_end":739,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257355,"byte_end":257358,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257363,"byte_end":257398,"line_start":741,"line_end":741,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257403,"byte_end":257476,"line_start":742,"line_end":742,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257481,"byte_end":257538,"line_start":743,"line_end":743,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257543,"byte_end":257605,"line_start":744,"line_end":744,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257610,"byte_end":257670,"line_start":745,"line_end":745,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257675,"byte_end":257678,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257683,"byte_end":257747,"line_start":747,"line_end":747,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257752,"byte_end":257815,"line_start":748,"line_end":748,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257820,"byte_end":257895,"line_start":749,"line_end":749,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257900,"byte_end":257903,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257908,"byte_end":257921,"line_start":751,"line_end":751,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257926,"byte_end":257929,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257934,"byte_end":257942,"line_start":753,"line_end":753,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257947,"byte_end":257973,"line_start":754,"line_end":754,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257978,"byte_end":257981,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257986,"byte_end":258046,"line_start":756,"line_end":756,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258051,"byte_end":258112,"line_start":757,"line_end":757,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258117,"byte_end":258189,"line_start":758,"line_end":758,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258194,"byte_end":258256,"line_start":759,"line_end":759,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258261,"byte_end":258269,"line_start":760,"line_end":760,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258274,"byte_end":258277,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258282,"byte_end":258366,"line_start":762,"line_end":762,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258371,"byte_end":258374,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258379,"byte_end":258387,"line_start":764,"line_end":764,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258392,"byte_end":258420,"line_start":765,"line_end":765,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258425,"byte_end":258487,"line_start":766,"line_end":766,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258492,"byte_end":258556,"line_start":767,"line_end":767,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258561,"byte_end":258636,"line_start":768,"line_end":768,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258641,"byte_end":258706,"line_start":769,"line_end":769,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258711,"byte_end":258719,"line_start":770,"line_end":770,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258724,"byte_end":258777,"line_start":771,"line_end":771,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":258782,"byte_end":258791,"line_start":772,"line_end":772,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2032},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299738,"byte_end":299751,"line_start":55,"line_end":55,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":2033},{"krate":0,"index":2034}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298874,"byte_end":298927,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298928,"byte_end":298931,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298932,"byte_end":298945,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298946,"byte_end":298949,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298950,"byte_end":299034,"line_start":33,"line_end":33,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299035,"byte_end":299038,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299039,"byte_end":299047,"line_start":35,"line_end":35,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299048,"byte_end":299091,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299092,"byte_end":299095,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299096,"byte_end":299175,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299176,"byte_end":299193,"line_start":39,"line_end":39,"column_start":1,"column_end":18}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299194,"byte_end":299202,"line_start":40,"line_end":40,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299203,"byte_end":299206,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299207,"byte_end":299270,"line_start":42,"line_end":42,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299271,"byte_end":299319,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299320,"byte_end":299371,"line_start":44,"line_end":44,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299372,"byte_end":299375,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299376,"byte_end":299384,"line_start":46,"line_end":46,"column_start":1,"column_end":9}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299385,"byte_end":299430,"line_start":47,"line_end":47,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299431,"byte_end":299512,"line_start":48,"line_end":48,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299513,"byte_end":299559,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299560,"byte_end":299563,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299564,"byte_end":299607,"line_start":51,"line_end":51,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299608,"byte_end":299662,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299663,"byte_end":299671,"line_start":53,"line_end":53,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300413,"byte_end":300416,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"fn (date: NaiveDate, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299824,"byte_end":299886,"line_start":61,"line_end":61,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299891,"byte_end":299973,"line_start":62,"line_end":62,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299978,"byte_end":300032,"line_start":63,"line_end":63,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300037,"byte_end":300040,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300045,"byte_end":300058,"line_start":65,"line_end":65,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300063,"byte_end":300066,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300071,"byte_end":300079,"line_start":67,"line_end":67,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300084,"byte_end":300138,"line_start":68,"line_end":68,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300143,"byte_end":300146,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300151,"byte_end":300195,"line_start":70,"line_end":70,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300200,"byte_end":300255,"line_start":71,"line_end":71,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300260,"byte_end":300263,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300268,"byte_end":300306,"line_start":73,"line_end":73,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300311,"byte_end":300340,"line_start":74,"line_end":74,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300345,"byte_end":300374,"line_start":75,"line_end":75,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300379,"byte_end":300387,"line_start":76,"line_end":76,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300392,"byte_end":300401,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301699,"byte_end":301713,"line_start":108,"line_end":108,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"fn (secs: i64, nsecs: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300530,"byte_end":300599,"line_start":82,"line_end":82,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300604,"byte_end":300643,"line_start":83,"line_end":83,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300648,"byte_end":300716,"line_start":84,"line_end":84,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300721,"byte_end":300792,"line_start":85,"line_end":85,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300797,"byte_end":300800,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300805,"byte_end":300853,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300858,"byte_end":300934,"line_start":88,"line_end":88,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300939,"byte_end":300942,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300947,"byte_end":301021,"line_start":90,"line_end":90,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301026,"byte_end":301106,"line_start":91,"line_end":91,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301111,"byte_end":301172,"line_start":92,"line_end":92,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301177,"byte_end":301180,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301185,"byte_end":301260,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301265,"byte_end":301268,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301273,"byte_end":301286,"line_start":96,"line_end":96,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301291,"byte_end":301294,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301299,"byte_end":301307,"line_start":98,"line_end":98,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301312,"byte_end":301355,"line_start":99,"line_end":99,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301360,"byte_end":301363,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301368,"byte_end":301426,"line_start":101,"line_end":101,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301431,"byte_end":301510,"line_start":102,"line_end":102,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301515,"byte_end":301518,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301523,"byte_end":301584,"line_start":104,"line_end":104,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301589,"byte_end":301660,"line_start":105,"line_end":105,"column_start":5,"column_end":76}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301665,"byte_end":301673,"line_start":106,"line_end":106,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301678,"byte_end":301687,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303055,"byte_end":303073,"line_start":139,"line_end":139,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"fn (secs: i64, nsecs: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301898,"byte_end":301967,"line_start":113,"line_end":113,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301972,"byte_end":302011,"line_start":114,"line_end":114,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302016,"byte_end":302084,"line_start":115,"line_end":115,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302089,"byte_end":302160,"line_start":116,"line_end":116,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302165,"byte_end":302168,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302173,"byte_end":302221,"line_start":118,"line_end":118,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302226,"byte_end":302316,"line_start":119,"line_end":119,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302321,"byte_end":302398,"line_start":120,"line_end":120,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302403,"byte_end":302406,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302411,"byte_end":302494,"line_start":122,"line_end":122,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302499,"byte_end":302502,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302507,"byte_end":302520,"line_start":124,"line_end":124,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302525,"byte_end":302528,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302533,"byte_end":302541,"line_start":126,"line_end":126,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302546,"byte_end":302589,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302594,"byte_end":302611,"line_start":128,"line_end":128,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302616,"byte_end":302619,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302624,"byte_end":302687,"line_start":130,"line_end":130,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302692,"byte_end":302695,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302700,"byte_end":302748,"line_start":132,"line_end":132,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302753,"byte_end":302811,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302816,"byte_end":302891,"line_start":134,"line_end":134,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302896,"byte_end":302956,"line_start":135,"line_end":135,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302961,"byte_end":303016,"line_start":136,"line_end":136,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303021,"byte_end":303029,"line_start":137,"line_end":137,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303034,"byte_end":303043,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306452,"byte_end":306466,"line_start":211,"line_end":211,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303589,"byte_end":303676,"line_start":150,"line_end":150,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303681,"byte_end":303751,"line_start":151,"line_end":151,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303756,"byte_end":303794,"line_start":152,"line_end":152,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303799,"byte_end":303802,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303807,"byte_end":303820,"line_start":154,"line_end":154,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303825,"byte_end":303828,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303833,"byte_end":303841,"line_start":156,"line_end":156,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303846,"byte_end":303889,"line_start":157,"line_end":157,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303894,"byte_end":303897,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303902,"byte_end":303957,"line_start":159,"line_end":159,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303962,"byte_end":303965,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303970,"byte_end":304044,"line_start":161,"line_end":161,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304049,"byte_end":304120,"line_start":162,"line_end":162,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304125,"byte_end":304201,"line_start":163,"line_end":163,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304206,"byte_end":304293,"line_start":164,"line_end":164,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304298,"byte_end":304306,"line_start":165,"line_end":165,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304311,"byte_end":304314,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304319,"byte_end":304368,"line_start":167,"line_end":167,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304373,"byte_end":304376,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304381,"byte_end":304389,"line_start":169,"line_end":169,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304394,"byte_end":304439,"line_start":170,"line_end":170,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304444,"byte_end":304501,"line_start":171,"line_end":171,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304506,"byte_end":304587,"line_start":172,"line_end":172,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304592,"byte_end":304665,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304670,"byte_end":304678,"line_start":174,"line_end":174,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304683,"byte_end":304686,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304691,"byte_end":304780,"line_start":176,"line_end":176,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304785,"byte_end":304847,"line_start":177,"line_end":177,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304852,"byte_end":304928,"line_start":178,"line_end":178,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304933,"byte_end":304936,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304941,"byte_end":304949,"line_start":180,"line_end":180,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304954,"byte_end":304999,"line_start":181,"line_end":181,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305004,"byte_end":305061,"line_start":182,"line_end":182,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305066,"byte_end":305147,"line_start":183,"line_end":183,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305152,"byte_end":305236,"line_start":184,"line_end":184,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305241,"byte_end":305249,"line_start":185,"line_end":185,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305254,"byte_end":305257,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305262,"byte_end":305305,"line_start":187,"line_end":187,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305310,"byte_end":305381,"line_start":188,"line_end":188,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305386,"byte_end":305389,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305394,"byte_end":305402,"line_start":190,"line_end":190,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305407,"byte_end":305452,"line_start":191,"line_end":191,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305457,"byte_end":305514,"line_start":192,"line_end":192,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305519,"byte_end":305582,"line_start":193,"line_end":193,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305587,"byte_end":305657,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305662,"byte_end":305665,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305670,"byte_end":305727,"line_start":196,"line_end":196,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305732,"byte_end":305797,"line_start":197,"line_end":197,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305802,"byte_end":305873,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305878,"byte_end":305955,"line_start":199,"line_end":199,"column_start":5,"column_end":82}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305960,"byte_end":305968,"line_start":200,"line_end":200,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305973,"byte_end":305976,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305981,"byte_end":306063,"line_start":202,"line_end":202,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306068,"byte_end":306071,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306076,"byte_end":306084,"line_start":204,"line_end":204,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306089,"byte_end":306121,"line_start":205,"line_end":205,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306126,"byte_end":306183,"line_start":206,"line_end":206,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306188,"byte_end":306242,"line_start":207,"line_end":207,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306247,"byte_end":306338,"line_start":208,"line_end":208,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306343,"byte_end":306427,"line_start":209,"line_end":209,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306432,"byte_end":306440,"line_start":210,"line_end":210,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306988,"byte_end":306992,"line_start":228,"line_end":228,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306699,"byte_end":306730,"line_start":217,"line_end":217,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306735,"byte_end":306738,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306743,"byte_end":306756,"line_start":219,"line_end":219,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306761,"byte_end":306764,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306769,"byte_end":306777,"line_start":221,"line_end":221,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306782,"byte_end":306808,"line_start":222,"line_end":222,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306813,"byte_end":306816,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306821,"byte_end":306885,"line_start":224,"line_end":224,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306890,"byte_end":306949,"line_start":225,"line_end":225,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306954,"byte_end":306962,"line_start":226,"line_end":226,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306967,"byte_end":306976,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307345,"byte_end":307349,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307044,"byte_end":307075,"line_start":232,"line_end":232,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307080,"byte_end":307083,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307088,"byte_end":307101,"line_start":234,"line_end":234,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307106,"byte_end":307109,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307114,"byte_end":307122,"line_start":236,"line_end":236,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307127,"byte_end":307166,"line_start":237,"line_end":237,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307171,"byte_end":307174,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307179,"byte_end":307243,"line_start":239,"line_end":239,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307248,"byte_end":307306,"line_start":240,"line_end":240,"column_start":5,"column_end":63}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307311,"byte_end":307319,"line_start":241,"line_end":241,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307324,"byte_end":307333,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308256,"byte_end":308265,"line_start":270,"line_end":270,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307401,"byte_end":307482,"line_start":247,"line_end":247,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307487,"byte_end":307490,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307495,"byte_end":307550,"line_start":249,"line_end":249,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307555,"byte_end":307643,"line_start":250,"line_end":250,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307648,"byte_end":307651,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307656,"byte_end":307669,"line_start":252,"line_end":252,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307674,"byte_end":307677,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307682,"byte_end":307690,"line_start":254,"line_end":254,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307695,"byte_end":307721,"line_start":255,"line_end":255,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307726,"byte_end":307729,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307734,"byte_end":307807,"line_start":257,"line_end":257,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307812,"byte_end":307846,"line_start":258,"line_end":258,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307851,"byte_end":307854,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307859,"byte_end":307923,"line_start":260,"line_end":260,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307928,"byte_end":307974,"line_start":261,"line_end":261,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307979,"byte_end":307982,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307987,"byte_end":308054,"line_start":263,"line_end":263,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308059,"byte_end":308094,"line_start":264,"line_end":264,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308099,"byte_end":308102,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308107,"byte_end":308167,"line_start":266,"line_end":266,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308172,"byte_end":308217,"line_start":267,"line_end":267,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308222,"byte_end":308230,"line_start":268,"line_end":268,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308235,"byte_end":308244,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309643,"byte_end":309659,"line_start":302,"line_end":302,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308567,"byte_end":308651,"line_start":277,"line_end":277,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308656,"byte_end":308659,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308664,"byte_end":308719,"line_start":279,"line_end":279,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308724,"byte_end":308812,"line_start":280,"line_end":280,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308817,"byte_end":308820,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308825,"byte_end":308892,"line_start":282,"line_end":282,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308897,"byte_end":308970,"line_start":283,"line_end":283,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":308975,"byte_end":309044,"line_start":284,"line_end":284,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309049,"byte_end":309100,"line_start":285,"line_end":285,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309105,"byte_end":309108,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309113,"byte_end":309126,"line_start":287,"line_end":287,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309131,"byte_end":309134,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309139,"byte_end":309147,"line_start":289,"line_end":289,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309152,"byte_end":309178,"line_start":290,"line_end":290,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309183,"byte_end":309186,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309191,"byte_end":309264,"line_start":292,"line_end":292,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309269,"byte_end":309314,"line_start":293,"line_end":293,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309319,"byte_end":309322,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309327,"byte_end":309402,"line_start":295,"line_end":295,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309407,"byte_end":309464,"line_start":296,"line_end":296,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309469,"byte_end":309472,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309477,"byte_end":309555,"line_start":298,"line_end":298,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309560,"byte_end":309604,"line_start":299,"line_end":299,"column_start":5,"column_end":49}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309609,"byte_end":309617,"line_start":300,"line_end":300,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309622,"byte_end":309631,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311127,"byte_end":311142,"line_start":341,"line_end":341,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309790,"byte_end":309873,"line_start":307,"line_end":307,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309878,"byte_end":309881,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309886,"byte_end":309941,"line_start":309,"line_end":309,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":309946,"byte_end":310034,"line_start":310,"line_end":310,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310039,"byte_end":310042,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310047,"byte_end":310059,"line_start":312,"line_end":312,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310064,"byte_end":310067,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310072,"byte_end":310139,"line_start":314,"line_end":314,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 years. The dates that can be","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310144,"byte_end":310214,"line_start":315,"line_end":315,"column_start":5,"column_end":75}},{"value":"/ represented as nanoseconds are between 1677-09-21T00:12:44.0 and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310219,"byte_end":310287,"line_start":316,"line_end":316,"column_start":5,"column_end":73}},{"value":"/ 2262-04-11T23:47:16.854775804.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310292,"byte_end":310326,"line_start":317,"line_end":317,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310331,"byte_end":310334,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ (If this is a problem, please file an issue to let me know what domain","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310339,"byte_end":310413,"line_start":319,"line_end":319,"column_start":5,"column_end":79}},{"value":"/ needs nanosecond precision over millennia, I'm curious.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310418,"byte_end":310478,"line_start":320,"line_end":320,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310483,"byte_end":310486,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310491,"byte_end":310504,"line_start":322,"line_end":322,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310509,"byte_end":310512,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310517,"byte_end":310525,"line_start":324,"line_end":324,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310530,"byte_end":310573,"line_start":325,"line_end":325,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310578,"byte_end":310581,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310586,"byte_end":310658,"line_start":327,"line_end":327,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310663,"byte_end":310715,"line_start":328,"line_end":328,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310720,"byte_end":310723,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310728,"byte_end":310802,"line_start":330,"line_end":330,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310807,"byte_end":310810,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ const A_BILLION: i64 = 1_000_000_000;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310815,"byte_end":310856,"line_start":332,"line_end":332,"column_start":5,"column_end":46}},{"value":"/ let nanos = dt.timestamp_nanos();","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310861,"byte_end":310898,"line_start":333,"line_end":333,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(nanos, 1_000_000_000_000_000_555);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310903,"byte_end":310952,"line_start":334,"line_end":334,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310957,"byte_end":310972,"line_start":335,"line_end":335,"column_start":5,"column_end":20}},{"value":"/     dt,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310977,"byte_end":310988,"line_start":336,"line_end":336,"column_start":5,"column_end":16}},{"value":"/     NaiveDateTime::from_timestamp(nanos / A_BILLION, (nanos % A_BILLION) as u32)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":310993,"byte_end":311077,"line_start":337,"line_end":337,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311082,"byte_end":311088,"line_start":338,"line_end":338,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311093,"byte_end":311101,"line_start":339,"line_end":339,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311106,"byte_end":311115,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311920,"byte_end":311943,"line_start":363,"line_end":363,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311281,"byte_end":311357,"line_start":346,"line_end":346,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311362,"byte_end":311365,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311370,"byte_end":311412,"line_start":348,"line_end":348,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311417,"byte_end":311499,"line_start":349,"line_end":349,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311504,"byte_end":311507,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311512,"byte_end":311525,"line_start":351,"line_end":351,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311530,"byte_end":311533,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311538,"byte_end":311546,"line_start":353,"line_end":353,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311551,"byte_end":311577,"line_start":354,"line_end":354,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311582,"byte_end":311585,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311590,"byte_end":311672,"line_start":356,"line_end":356,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311677,"byte_end":311727,"line_start":357,"line_end":357,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311732,"byte_end":311735,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311740,"byte_end":311824,"line_start":359,"line_end":359,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311829,"byte_end":311881,"line_start":360,"line_end":360,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311886,"byte_end":311894,"line_start":361,"line_end":361,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":311899,"byte_end":311908,"line_start":362,"line_end":362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312676,"byte_end":312699,"line_start":384,"line_end":384,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312021,"byte_end":312097,"line_start":367,"line_end":367,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312102,"byte_end":312105,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312110,"byte_end":312156,"line_start":369,"line_end":369,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312161,"byte_end":312247,"line_start":370,"line_end":370,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312252,"byte_end":312255,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312260,"byte_end":312273,"line_start":372,"line_end":372,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312278,"byte_end":312281,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312286,"byte_end":312294,"line_start":374,"line_end":374,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312299,"byte_end":312325,"line_start":375,"line_end":375,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312330,"byte_end":312333,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312338,"byte_end":312420,"line_start":377,"line_end":377,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312425,"byte_end":312479,"line_start":378,"line_end":378,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312484,"byte_end":312487,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312492,"byte_end":312576,"line_start":380,"line_end":380,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312581,"byte_end":312637,"line_start":381,"line_end":381,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312642,"byte_end":312650,"line_start":382,"line_end":382,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312655,"byte_end":312664,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313441,"byte_end":313463,"line_start":405,"line_end":405,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312773,"byte_end":312848,"line_start":388,"line_end":388,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312853,"byte_end":312856,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312861,"byte_end":312911,"line_start":390,"line_end":390,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":312916,"byte_end":313006,"line_start":391,"line_end":391,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313011,"byte_end":313014,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313019,"byte_end":313032,"line_start":393,"line_end":393,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313037,"byte_end":313040,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313045,"byte_end":313053,"line_start":395,"line_end":395,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313058,"byte_end":313084,"line_start":396,"line_end":396,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313089,"byte_end":313092,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313097,"byte_end":313179,"line_start":398,"line_end":398,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313184,"byte_end":313241,"line_start":399,"line_end":399,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313246,"byte_end":313249,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313254,"byte_end":313338,"line_start":401,"line_end":401,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313343,"byte_end":313402,"line_start":402,"line_end":402,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313407,"byte_end":313415,"line_start":403,"line_end":403,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313420,"byte_end":313429,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316842,"byte_end":316860,"line_start":483,"line_end":483,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313522,"byte_end":313577,"line_start":409,"line_end":409,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313582,"byte_end":313585,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313590,"byte_end":313685,"line_start":411,"line_end":411,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313690,"byte_end":313753,"line_start":412,"line_end":412,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313758,"byte_end":313825,"line_start":413,"line_end":413,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313830,"byte_end":313923,"line_start":414,"line_end":414,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313928,"byte_end":313931,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313936,"byte_end":313987,"line_start":416,"line_end":416,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":313992,"byte_end":313995,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314000,"byte_end":314013,"line_start":418,"line_end":418,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314018,"byte_end":314021,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314026,"byte_end":314034,"line_start":420,"line_end":420,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314039,"byte_end":314096,"line_start":421,"line_end":421,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314101,"byte_end":314127,"line_start":422,"line_end":422,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314132,"byte_end":314155,"line_start":423,"line_end":423,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314160,"byte_end":314163,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314168,"byte_end":314207,"line_start":425,"line_end":425,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314212,"byte_end":314215,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314220,"byte_end":314253,"line_start":427,"line_end":427,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314258,"byte_end":314301,"line_start":428,"line_end":428,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314306,"byte_end":314371,"line_start":429,"line_end":429,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314376,"byte_end":314411,"line_start":430,"line_end":430,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314416,"byte_end":314485,"line_start":431,"line_end":431,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314490,"byte_end":314525,"line_start":432,"line_end":432,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314530,"byte_end":314600,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314605,"byte_end":314640,"line_start":434,"line_end":434,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314645,"byte_end":314722,"line_start":435,"line_end":435,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314727,"byte_end":314762,"line_start":436,"line_end":436,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314767,"byte_end":314841,"line_start":437,"line_end":437,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314846,"byte_end":314906,"line_start":438,"line_end":438,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314911,"byte_end":314914,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314919,"byte_end":314983,"line_start":440,"line_end":440,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":314988,"byte_end":315070,"line_start":441,"line_end":441,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315075,"byte_end":315116,"line_start":442,"line_end":442,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315121,"byte_end":315128,"line_start":443,"line_end":443,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315133,"byte_end":315141,"line_start":444,"line_end":444,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315146,"byte_end":315149,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315154,"byte_end":315182,"line_start":446,"line_end":446,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315187,"byte_end":315190,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315195,"byte_end":315203,"line_start":448,"line_end":448,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315208,"byte_end":315265,"line_start":449,"line_end":449,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315270,"byte_end":315298,"line_start":450,"line_end":450,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315303,"byte_end":315328,"line_start":451,"line_end":451,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315333,"byte_end":315408,"line_start":452,"line_end":452,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315413,"byte_end":315498,"line_start":453,"line_end":453,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315503,"byte_end":315510,"line_start":454,"line_end":454,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315515,"byte_end":315523,"line_start":455,"line_end":455,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315528,"byte_end":315531,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315536,"byte_end":315565,"line_start":457,"line_end":457,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315570,"byte_end":315640,"line_start":458,"line_end":458,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315645,"byte_end":315648,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315653,"byte_end":315661,"line_start":460,"line_end":460,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315666,"byte_end":315723,"line_start":461,"line_end":461,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315728,"byte_end":315756,"line_start":462,"line_end":462,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315761,"byte_end":315786,"line_start":463,"line_end":463,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315791,"byte_end":315832,"line_start":464,"line_end":464,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315837,"byte_end":315922,"line_start":465,"line_end":465,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315927,"byte_end":315964,"line_start":466,"line_end":466,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":315969,"byte_end":316026,"line_start":467,"line_end":467,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316031,"byte_end":316075,"line_start":468,"line_end":468,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316080,"byte_end":316149,"line_start":469,"line_end":469,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316154,"byte_end":316196,"line_start":470,"line_end":470,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316201,"byte_end":316269,"line_start":471,"line_end":471,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316274,"byte_end":316318,"line_start":472,"line_end":472,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316323,"byte_end":316391,"line_start":473,"line_end":473,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316396,"byte_end":316437,"line_start":474,"line_end":474,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316442,"byte_end":316504,"line_start":475,"line_end":475,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316509,"byte_end":316550,"line_start":476,"line_end":476,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316555,"byte_end":316618,"line_start":477,"line_end":477,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316623,"byte_end":316665,"line_start":478,"line_end":478,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316670,"byte_end":316728,"line_start":479,"line_end":479,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316733,"byte_end":316805,"line_start":480,"line_end":480,"column_start":5,"column_end":77}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316810,"byte_end":316817,"line_start":481,"line_end":481,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":316822,"byte_end":316830,"line_start":482,"line_end":482,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320404,"byte_end":320422,"line_start":565,"line_end":565,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317307,"byte_end":317369,"line_start":495,"line_end":495,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317374,"byte_end":317377,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317382,"byte_end":317477,"line_start":497,"line_end":497,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317482,"byte_end":317548,"line_start":498,"line_end":498,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317553,"byte_end":317620,"line_start":499,"line_end":499,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317625,"byte_end":317718,"line_start":500,"line_end":500,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317723,"byte_end":317726,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317731,"byte_end":317782,"line_start":502,"line_end":502,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317787,"byte_end":317790,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317795,"byte_end":317808,"line_start":504,"line_end":504,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317813,"byte_end":317816,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317821,"byte_end":317829,"line_start":506,"line_end":506,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317834,"byte_end":317891,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317896,"byte_end":317922,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317927,"byte_end":317950,"line_start":509,"line_end":509,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317955,"byte_end":317958,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":317963,"byte_end":318002,"line_start":511,"line_end":511,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318007,"byte_end":318010,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318015,"byte_end":318048,"line_start":513,"line_end":513,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318053,"byte_end":318096,"line_start":514,"line_end":514,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318101,"byte_end":318166,"line_start":515,"line_end":515,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318171,"byte_end":318206,"line_start":516,"line_end":516,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318211,"byte_end":318280,"line_start":517,"line_end":517,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318285,"byte_end":318320,"line_start":518,"line_end":518,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318325,"byte_end":318395,"line_start":519,"line_end":519,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318400,"byte_end":318435,"line_start":520,"line_end":520,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318440,"byte_end":318517,"line_start":521,"line_end":521,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318522,"byte_end":318557,"line_start":522,"line_end":522,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318562,"byte_end":318636,"line_start":523,"line_end":523,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318641,"byte_end":318701,"line_start":524,"line_end":524,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318706,"byte_end":318709,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318714,"byte_end":318778,"line_start":526,"line_end":526,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318783,"byte_end":318865,"line_start":527,"line_end":527,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318870,"byte_end":318911,"line_start":528,"line_end":528,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318916,"byte_end":318923,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318928,"byte_end":318936,"line_start":530,"line_end":530,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318941,"byte_end":318944,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318949,"byte_end":318977,"line_start":532,"line_end":532,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318982,"byte_end":318985,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318990,"byte_end":318998,"line_start":534,"line_end":534,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319003,"byte_end":319060,"line_start":535,"line_end":535,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319065,"byte_end":319093,"line_start":536,"line_end":536,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319098,"byte_end":319123,"line_start":537,"line_end":537,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319128,"byte_end":319203,"line_start":538,"line_end":538,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319208,"byte_end":319293,"line_start":539,"line_end":539,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319298,"byte_end":319305,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319310,"byte_end":319318,"line_start":541,"line_end":541,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319323,"byte_end":319326,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319331,"byte_end":319360,"line_start":543,"line_end":543,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319365,"byte_end":319438,"line_start":544,"line_end":544,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319443,"byte_end":319446,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319451,"byte_end":319459,"line_start":546,"line_end":546,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319464,"byte_end":319521,"line_start":547,"line_end":547,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319526,"byte_end":319554,"line_start":548,"line_end":548,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319559,"byte_end":319584,"line_start":549,"line_end":549,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319589,"byte_end":319630,"line_start":550,"line_end":550,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319635,"byte_end":319720,"line_start":551,"line_end":551,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319725,"byte_end":319762,"line_start":552,"line_end":552,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319767,"byte_end":319824,"line_start":553,"line_end":553,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319829,"byte_end":319873,"line_start":554,"line_end":554,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319878,"byte_end":319946,"line_start":555,"line_end":555,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":319951,"byte_end":319995,"line_start":556,"line_end":556,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320000,"byte_end":320068,"line_start":557,"line_end":557,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320073,"byte_end":320115,"line_start":558,"line_end":558,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320120,"byte_end":320182,"line_start":559,"line_end":559,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320187,"byte_end":320228,"line_start":560,"line_end":560,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320233,"byte_end":320291,"line_start":561,"line_end":561,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320296,"byte_end":320367,"line_start":562,"line_end":562,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320372,"byte_end":320379,"line_start":563,"line_end":563,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320384,"byte_end":320392,"line_start":564,"line_end":564,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322831,"byte_end":322852,"line_start":621,"line_end":621,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"fn (self, rhs: NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320869,"byte_end":320938,"line_start":577,"line_end":577,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320943,"byte_end":320990,"line_start":578,"line_end":578,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":320995,"byte_end":320998,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321003,"byte_end":321098,"line_start":580,"line_end":580,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321103,"byte_end":321169,"line_start":581,"line_end":581,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321174,"byte_end":321253,"line_start":582,"line_end":582,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321258,"byte_end":321303,"line_start":583,"line_end":583,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321308,"byte_end":321367,"line_start":584,"line_end":584,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321372,"byte_end":321375,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321380,"byte_end":321393,"line_start":586,"line_end":586,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321398,"byte_end":321401,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321406,"byte_end":321414,"line_start":588,"line_end":588,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321419,"byte_end":321476,"line_start":589,"line_end":589,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321481,"byte_end":321507,"line_start":590,"line_end":590,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321512,"byte_end":321535,"line_start":591,"line_end":591,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321540,"byte_end":321543,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321548,"byte_end":321587,"line_start":593,"line_end":593,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321592,"byte_end":321595,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321600,"byte_end":321633,"line_start":595,"line_end":595,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321638,"byte_end":321714,"line_start":596,"line_end":596,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321719,"byte_end":321768,"line_start":597,"line_end":597,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321773,"byte_end":321776,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321781,"byte_end":321824,"line_start":599,"line_end":599,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321829,"byte_end":321863,"line_start":600,"line_end":600,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321868,"byte_end":321956,"line_start":601,"line_end":601,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":321961,"byte_end":322052,"line_start":602,"line_end":602,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322057,"byte_end":322064,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322069,"byte_end":322077,"line_start":604,"line_end":604,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322082,"byte_end":322085,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322090,"byte_end":322152,"line_start":606,"line_end":606,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322157,"byte_end":322203,"line_start":607,"line_end":607,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322208,"byte_end":322211,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322216,"byte_end":322224,"line_start":609,"line_end":609,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322229,"byte_end":322286,"line_start":610,"line_end":610,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322291,"byte_end":322319,"line_start":611,"line_end":611,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322324,"byte_end":322349,"line_start":612,"line_end":612,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322354,"byte_end":322395,"line_start":613,"line_end":613,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322400,"byte_end":322470,"line_start":614,"line_end":614,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322475,"byte_end":322558,"line_start":615,"line_end":615,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322563,"byte_end":322633,"line_start":616,"line_end":616,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322638,"byte_end":322719,"line_start":617,"line_end":617,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322724,"byte_end":322794,"line_start":618,"line_end":618,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322799,"byte_end":322806,"line_start":619,"line_end":619,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":322811,"byte_end":322819,"line_start":620,"line_end":620,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324294,"byte_end":324311,"line_start":654,"line_end":654,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323001,"byte_end":323076,"line_start":625,"line_end":625,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323081,"byte_end":323160,"line_start":626,"line_end":626,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323165,"byte_end":323168,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323173,"byte_end":323223,"line_start":628,"line_end":628,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323228,"byte_end":323306,"line_start":629,"line_end":629,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323311,"byte_end":323314,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323319,"byte_end":323332,"line_start":631,"line_end":631,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323337,"byte_end":323340,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323345,"byte_end":323353,"line_start":633,"line_end":633,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323358,"byte_end":323384,"line_start":634,"line_end":634,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323389,"byte_end":323437,"line_start":635,"line_end":635,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323442,"byte_end":323445,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323450,"byte_end":323504,"line_start":637,"line_end":637,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323509,"byte_end":323573,"line_start":638,"line_end":638,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323578,"byte_end":323663,"line_start":639,"line_end":639,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323668,"byte_end":323753,"line_start":640,"line_end":640,"column_start":5,"column_end":90}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323758,"byte_end":323766,"line_start":641,"line_end":641,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323771,"byte_end":323774,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323779,"byte_end":323863,"line_start":643,"line_end":643,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323868,"byte_end":323871,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323876,"byte_end":323884,"line_start":645,"line_end":645,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323889,"byte_end":323917,"line_start":646,"line_end":646,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323922,"byte_end":323972,"line_start":647,"line_end":647,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":323977,"byte_end":324041,"line_start":648,"line_end":648,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324046,"byte_end":324112,"line_start":649,"line_end":649,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324117,"byte_end":324197,"line_start":650,"line_end":650,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324202,"byte_end":324210,"line_start":651,"line_end":651,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324215,"byte_end":324268,"line_start":652,"line_end":652,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324273,"byte_end":324282,"line_start":653,"line_end":653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":326097,"byte_end":326103,"line_start":693,"line_end":693,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324507,"byte_end":324579,"line_start":659,"line_end":659,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324584,"byte_end":324654,"line_start":660,"line_end":660,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324659,"byte_end":324697,"line_start":661,"line_end":661,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324702,"byte_end":324705,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324710,"byte_end":324745,"line_start":663,"line_end":663,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324750,"byte_end":324823,"line_start":664,"line_end":664,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324828,"byte_end":324885,"line_start":665,"line_end":665,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324890,"byte_end":324952,"line_start":666,"line_end":666,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324957,"byte_end":325017,"line_start":667,"line_end":667,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325022,"byte_end":325025,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325030,"byte_end":325094,"line_start":669,"line_end":669,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325099,"byte_end":325162,"line_start":670,"line_end":670,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325167,"byte_end":325242,"line_start":671,"line_end":671,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325247,"byte_end":325250,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325255,"byte_end":325268,"line_start":673,"line_end":673,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325273,"byte_end":325276,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325281,"byte_end":325289,"line_start":675,"line_end":675,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325294,"byte_end":325320,"line_start":676,"line_end":676,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325325,"byte_end":325328,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325333,"byte_end":325397,"line_start":678,"line_end":678,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325402,"byte_end":325484,"line_start":679,"line_end":679,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325489,"byte_end":325578,"line_start":680,"line_end":680,"column_start":5,"column_end":94}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325583,"byte_end":325591,"line_start":681,"line_end":681,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325596,"byte_end":325599,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325604,"byte_end":325688,"line_start":683,"line_end":683,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325693,"byte_end":325696,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325701,"byte_end":325709,"line_start":685,"line_end":685,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325714,"byte_end":325742,"line_start":686,"line_end":686,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325747,"byte_end":325813,"line_start":687,"line_end":687,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325818,"byte_end":325903,"line_start":688,"line_end":688,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":325908,"byte_end":326000,"line_start":689,"line_end":689,"column_start":5,"column_end":97}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":326005,"byte_end":326013,"line_start":690,"line_end":690,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":326018,"byte_end":326071,"line_start":691,"line_end":691,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":326076,"byte_end":326085,"line_start":692,"line_end":692,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":782},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364531,"byte_end":364545,"line_start":1758,"line_end":1758,"column_start":13,"column_end":27},"name":"ts_nanoseconds","qualname":"::naive::datetime::serde::ts_nanoseconds","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":797}],"decl_id":null,"docs":" Used to serialize/deserialize from nanosecond-precision timestamps","sig":null,"attributes":[{"value":"/ Used to serialize/deserialize from nanosecond-precision timestamps","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363243,"byte_end":363313,"line_start":1723,"line_end":1723,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363318,"byte_end":363321,"line_start":1724,"line_end":1724,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363326,"byte_end":363340,"line_start":1725,"line_end":1725,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363345,"byte_end":363348,"line_start":1726,"line_end":1726,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363353,"byte_end":363364,"line_start":1727,"line_end":1727,"column_start":5,"column_end":16}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363369,"byte_end":363442,"line_start":1728,"line_end":1728,"column_start":5,"column_end":78}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363447,"byte_end":363520,"line_start":1729,"line_end":1729,"column_start":5,"column_end":78}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363525,"byte_end":363568,"line_start":1730,"line_end":1730,"column_start":5,"column_end":48}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363573,"byte_end":363578,"line_start":1731,"line_end":1731,"column_start":5,"column_end":10}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363583,"byte_end":363628,"line_start":1732,"line_end":1732,"column_start":5,"column_end":50}},{"value":"/ # extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363633,"byte_end":363663,"line_start":1733,"line_end":1733,"column_start":5,"column_end":35}},{"value":"/ # extern crate serde;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363668,"byte_end":363693,"line_start":1734,"line_end":1734,"column_start":5,"column_end":30}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363698,"byte_end":363724,"line_start":1735,"line_end":1735,"column_start":5,"column_end":31}},{"value":"/ # use chrono::{TimeZone, NaiveDate, NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363729,"byte_end":363789,"line_start":1736,"line_end":1736,"column_start":5,"column_end":65}},{"value":"/ use chrono::naive::serde::ts_nanoseconds;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363794,"byte_end":363839,"line_start":1737,"line_end":1737,"column_start":5,"column_end":50}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363844,"byte_end":363881,"line_start":1738,"line_end":1738,"column_start":5,"column_end":42}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363886,"byte_end":363900,"line_start":1739,"line_end":1739,"column_start":5,"column_end":19}},{"value":"/     #[serde(with = \"ts_nanoseconds\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363905,"byte_end":363946,"line_start":1740,"line_end":1740,"column_start":5,"column_end":46}},{"value":"/     time: NaiveDateTime","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363951,"byte_end":363978,"line_start":1741,"line_end":1741,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363983,"byte_end":363988,"line_start":1742,"line_end":1742,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363993,"byte_end":363996,"line_start":1743,"line_end":1743,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364001,"byte_end":364053,"line_start":1744,"line_end":1744,"column_start":5,"column_end":57}},{"value":"/ let time = NaiveDate::from_ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364058,"byte_end":364142,"line_start":1745,"line_end":1745,"column_start":5,"column_end":89}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364147,"byte_end":364165,"line_start":1746,"line_end":1746,"column_start":5,"column_end":23}},{"value":"/     time: time.clone(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364170,"byte_end":364197,"line_start":1747,"line_end":1747,"column_start":5,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364202,"byte_end":364208,"line_start":1748,"line_end":1748,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364213,"byte_end":364216,"line_start":1749,"line_end":1749,"column_start":5,"column_end":8}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364221,"byte_end":364271,"line_start":1750,"line_end":1750,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364276,"byte_end":364337,"line_start":1751,"line_end":1751,"column_start":5,"column_end":66}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364342,"byte_end":364394,"line_start":1752,"line_end":1752,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364399,"byte_end":364431,"line_start":1753,"line_end":1753,"column_start":5,"column_end":37}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364436,"byte_end":364450,"line_start":1754,"line_end":1754,"column_start":5,"column_end":19}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364455,"byte_end":364462,"line_start":1755,"line_end":1755,"column_start":5,"column_end":12}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364467,"byte_end":364506,"line_start":1756,"line_end":1756,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364511,"byte_end":364518,"line_start":1757,"line_end":1757,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366118,"byte_end":366127,"line_start":1798,"line_end":1798,"column_start":16,"column_end":25},"name":"serialize","qualname":"::naive::datetime::serde::ts_nanoseconds::serialize","value":"fn <S> (dt: &NaiveDateTime, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of nanoseconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of nanoseconds since the epoch","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364657,"byte_end":364739,"line_start":1764,"line_end":1764,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364748,"byte_end":364751,"line_start":1765,"line_end":1765,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364760,"byte_end":364822,"line_start":1766,"line_end":1766,"column_start":9,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364831,"byte_end":364834,"line_start":1767,"line_end":1767,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364843,"byte_end":364857,"line_start":1768,"line_end":1768,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364866,"byte_end":364869,"line_start":1769,"line_end":1769,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364878,"byte_end":364889,"line_start":1770,"line_end":1770,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364898,"byte_end":364971,"line_start":1771,"line_end":1771,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":364980,"byte_end":365053,"line_start":1772,"line_end":1772,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365062,"byte_end":365105,"line_start":1773,"line_end":1773,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365114,"byte_end":365119,"line_start":1774,"line_end":1774,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365128,"byte_end":365173,"line_start":1775,"line_end":1775,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365182,"byte_end":365225,"line_start":1776,"line_end":1776,"column_start":9,"column_end":52}},{"value":"/ # #[macro_use] extern crate serde;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365234,"byte_end":365272,"line_start":1777,"line_end":1777,"column_start":9,"column_end":47}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365281,"byte_end":365307,"line_start":1778,"line_end":1778,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{TimeZone, NaiveDate, NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365316,"byte_end":365376,"line_start":1779,"line_end":1779,"column_start":9,"column_end":69}},{"value":"/ # use serde::Serialize;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365385,"byte_end":365412,"line_start":1780,"line_end":1780,"column_start":9,"column_end":36}},{"value":"/ use chrono::naive::serde::ts_nanoseconds::serialize as to_nano_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365421,"byte_end":365491,"line_start":1781,"line_end":1781,"column_start":9,"column_end":79}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365500,"byte_end":365524,"line_start":1782,"line_end":1782,"column_start":9,"column_end":33}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365533,"byte_end":365547,"line_start":1783,"line_end":1783,"column_start":9,"column_end":23}},{"value":"/     #[serde(serialize_with = \"to_nano_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365556,"byte_end":365603,"line_start":1784,"line_end":1784,"column_start":9,"column_end":56}},{"value":"/     time: NaiveDateTime","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365612,"byte_end":365639,"line_start":1785,"line_end":1785,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365648,"byte_end":365653,"line_start":1786,"line_end":1786,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365662,"byte_end":365665,"line_start":1787,"line_end":1787,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<String, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365674,"byte_end":365731,"line_start":1788,"line_end":1788,"column_start":9,"column_end":66}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365740,"byte_end":365758,"line_start":1789,"line_end":1789,"column_start":9,"column_end":27}},{"value":"/     time: NaiveDate::from_ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365767,"byte_end":365850,"line_start":1790,"line_end":1790,"column_start":9,"column_end":92}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365859,"byte_end":365865,"line_start":1791,"line_end":1791,"column_start":9,"column_end":15}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365874,"byte_end":365924,"line_start":1792,"line_end":1792,"column_start":9,"column_end":59}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":365933,"byte_end":365994,"line_start":1793,"line_end":1793,"column_start":9,"column_end":70}},{"value":"/ # Ok(as_string)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366003,"byte_end":366022,"line_start":1794,"line_end":1794,"column_start":9,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366031,"byte_end":366038,"line_start":1795,"line_end":1795,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366047,"byte_end":366086,"line_start":1796,"line_end":1796,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366095,"byte_end":366102,"line_start":1797,"line_end":1797,"column_start":9,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367548,"byte_end":367559,"line_start":1834,"line_end":1834,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::naive::datetime::serde::ts_nanoseconds::deserialize","value":"fn <'de, D> (d: D) -> Result<NaiveDateTime, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a nanoseconds timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a nanoseconds timestamp","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366318,"byte_end":366375,"line_start":1804,"line_end":1804,"column_start":9,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366384,"byte_end":366387,"line_start":1805,"line_end":1805,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366396,"byte_end":366460,"line_start":1806,"line_end":1806,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366469,"byte_end":366472,"line_start":1807,"line_end":1807,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366481,"byte_end":366495,"line_start":1808,"line_end":1808,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366504,"byte_end":366507,"line_start":1809,"line_end":1809,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366516,"byte_end":366527,"line_start":1810,"line_end":1810,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366536,"byte_end":366609,"line_start":1811,"line_end":1811,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366618,"byte_end":366691,"line_start":1812,"line_end":1812,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366700,"byte_end":366743,"line_start":1813,"line_end":1813,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366752,"byte_end":366757,"line_start":1814,"line_end":1814,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366766,"byte_end":366811,"line_start":1815,"line_end":1815,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366820,"byte_end":366863,"line_start":1816,"line_end":1816,"column_start":9,"column_end":52}},{"value":"/ # extern crate serde;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366872,"byte_end":366897,"line_start":1817,"line_end":1817,"column_start":9,"column_end":34}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366906,"byte_end":366932,"line_start":1818,"line_end":1818,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366941,"byte_end":366980,"line_start":1819,"line_end":1819,"column_start":9,"column_end":48}},{"value":"/ # use serde::Deserialize;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":366989,"byte_end":367018,"line_start":1820,"line_end":1820,"column_start":9,"column_end":38}},{"value":"/ use chrono::naive::serde::ts_nanoseconds::deserialize as from_nano_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367027,"byte_end":367101,"line_start":1821,"line_end":1821,"column_start":9,"column_end":83}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367110,"byte_end":367136,"line_start":1822,"line_end":1822,"column_start":9,"column_end":35}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367145,"byte_end":367159,"line_start":1823,"line_end":1823,"column_start":9,"column_end":23}},{"value":"/     #[serde(deserialize_with = \"from_nano_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367168,"byte_end":367219,"line_start":1824,"line_end":1824,"column_start":9,"column_end":60}},{"value":"/     time: NaiveDateTime","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367228,"byte_end":367255,"line_start":1825,"line_end":1825,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367264,"byte_end":367269,"line_start":1826,"line_end":1826,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367278,"byte_end":367281,"line_start":1827,"line_end":1827,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367290,"byte_end":367342,"line_start":1828,"line_end":1828,"column_start":9,"column_end":61}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355733 }\"#)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367351,"byte_end":367429,"line_start":1829,"line_end":1829,"column_start":9,"column_end":87}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367438,"byte_end":367452,"line_start":1830,"line_end":1830,"column_start":9,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367461,"byte_end":367468,"line_start":1831,"line_end":1831,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367477,"byte_end":367516,"line_start":1832,"line_end":1832,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367525,"byte_end":367532,"line_start":1833,"line_end":1833,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":807},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370112,"byte_end":370127,"line_start":1903,"line_end":1903,"column_start":13,"column_end":28},"name":"ts_milliseconds","qualname":"::naive::datetime::serde::ts_milliseconds","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":812},{"krate":0,"index":815},{"krate":0,"index":817},{"krate":0,"index":820},{"krate":0,"index":822}],"decl_id":null,"docs":" Used to serialize/deserialize from millisecond-precision timestamps","sig":null,"attributes":[{"value":"/ Used to serialize/deserialize from millisecond-precision timestamps","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":368832,"byte_end":368903,"line_start":1868,"line_end":1868,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":368908,"byte_end":368911,"line_start":1869,"line_end":1869,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":368916,"byte_end":368930,"line_start":1870,"line_end":1870,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":368935,"byte_end":368938,"line_start":1871,"line_end":1871,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":368943,"byte_end":368954,"line_start":1872,"line_end":1872,"column_start":5,"column_end":16}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":368959,"byte_end":369032,"line_start":1873,"line_end":1873,"column_start":5,"column_end":78}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369037,"byte_end":369110,"line_start":1874,"line_end":1874,"column_start":5,"column_end":78}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369115,"byte_end":369158,"line_start":1875,"line_end":1875,"column_start":5,"column_end":48}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369163,"byte_end":369168,"line_start":1876,"line_end":1876,"column_start":5,"column_end":10}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369173,"byte_end":369218,"line_start":1877,"line_end":1877,"column_start":5,"column_end":50}},{"value":"/ # extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369223,"byte_end":369253,"line_start":1878,"line_end":1878,"column_start":5,"column_end":35}},{"value":"/ # extern crate serde;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369258,"byte_end":369283,"line_start":1879,"line_end":1879,"column_start":5,"column_end":30}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369288,"byte_end":369314,"line_start":1880,"line_end":1880,"column_start":5,"column_end":31}},{"value":"/ # use chrono::{TimeZone, NaiveDate, NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369319,"byte_end":369379,"line_start":1881,"line_end":1881,"column_start":5,"column_end":65}},{"value":"/ use chrono::naive::serde::ts_milliseconds;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369384,"byte_end":369430,"line_start":1882,"line_end":1882,"column_start":5,"column_end":51}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369435,"byte_end":369472,"line_start":1883,"line_end":1883,"column_start":5,"column_end":42}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369477,"byte_end":369491,"line_start":1884,"line_end":1884,"column_start":5,"column_end":19}},{"value":"/     #[serde(with = \"ts_milliseconds\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369496,"byte_end":369538,"line_start":1885,"line_end":1885,"column_start":5,"column_end":47}},{"value":"/     time: NaiveDateTime","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369543,"byte_end":369570,"line_start":1886,"line_end":1886,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369575,"byte_end":369580,"line_start":1887,"line_end":1887,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369585,"byte_end":369588,"line_start":1888,"line_end":1888,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369593,"byte_end":369645,"line_start":1889,"line_end":1889,"column_start":5,"column_end":57}},{"value":"/ let time = NaiveDate::from_ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369650,"byte_end":369729,"line_start":1890,"line_end":1890,"column_start":5,"column_end":84}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369734,"byte_end":369752,"line_start":1891,"line_end":1891,"column_start":5,"column_end":23}},{"value":"/     time: time.clone(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369757,"byte_end":369784,"line_start":1892,"line_end":1892,"column_start":5,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369789,"byte_end":369795,"line_start":1893,"line_end":1893,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369800,"byte_end":369803,"line_start":1894,"line_end":1894,"column_start":5,"column_end":8}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369808,"byte_end":369858,"line_start":1895,"line_end":1895,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369863,"byte_end":369918,"line_start":1896,"line_end":1896,"column_start":5,"column_end":60}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369923,"byte_end":369975,"line_start":1897,"line_end":1897,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":369980,"byte_end":370012,"line_start":1898,"line_end":1898,"column_start":5,"column_end":37}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370017,"byte_end":370031,"line_start":1899,"line_end":1899,"column_start":5,"column_end":19}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370036,"byte_end":370043,"line_start":1900,"line_end":1900,"column_start":5,"column_end":12}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370048,"byte_end":370087,"line_start":1901,"line_end":1901,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370092,"byte_end":370099,"line_start":1902,"line_end":1902,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":815},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371693,"byte_end":371702,"line_start":1943,"line_end":1943,"column_start":16,"column_end":25},"name":"serialize","qualname":"::naive::datetime::serde::ts_milliseconds::serialize","value":"fn <S> (dt: &NaiveDateTime, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of milliseconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of milliseconds since the epoch","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370239,"byte_end":370322,"line_start":1909,"line_end":1909,"column_start":9,"column_end":92}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370331,"byte_end":370334,"line_start":1910,"line_end":1910,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370343,"byte_end":370405,"line_start":1911,"line_end":1911,"column_start":9,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370414,"byte_end":370417,"line_start":1912,"line_end":1912,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370426,"byte_end":370440,"line_start":1913,"line_end":1913,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370449,"byte_end":370452,"line_start":1914,"line_end":1914,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370461,"byte_end":370472,"line_start":1915,"line_end":1915,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370481,"byte_end":370554,"line_start":1916,"line_end":1916,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370563,"byte_end":370636,"line_start":1917,"line_end":1917,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370645,"byte_end":370688,"line_start":1918,"line_end":1918,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370697,"byte_end":370702,"line_start":1919,"line_end":1919,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370711,"byte_end":370756,"line_start":1920,"line_end":1920,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370765,"byte_end":370808,"line_start":1921,"line_end":1921,"column_start":9,"column_end":52}},{"value":"/ # #[macro_use] extern crate serde;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370817,"byte_end":370855,"line_start":1922,"line_end":1922,"column_start":9,"column_end":47}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370864,"byte_end":370890,"line_start":1923,"line_end":1923,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{TimeZone, NaiveDate, NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370899,"byte_end":370959,"line_start":1924,"line_end":1924,"column_start":9,"column_end":69}},{"value":"/ # use serde::Serialize;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":370968,"byte_end":370995,"line_start":1925,"line_end":1925,"column_start":9,"column_end":36}},{"value":"/ use chrono::naive::serde::ts_milliseconds::serialize as to_milli_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371004,"byte_end":371076,"line_start":1926,"line_end":1926,"column_start":9,"column_end":81}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371085,"byte_end":371109,"line_start":1927,"line_end":1927,"column_start":9,"column_end":33}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371118,"byte_end":371132,"line_start":1928,"line_end":1928,"column_start":9,"column_end":23}},{"value":"/     #[serde(serialize_with = \"to_milli_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371141,"byte_end":371189,"line_start":1929,"line_end":1929,"column_start":9,"column_end":57}},{"value":"/     time: NaiveDateTime","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371198,"byte_end":371225,"line_start":1930,"line_end":1930,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371234,"byte_end":371239,"line_start":1931,"line_end":1931,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371248,"byte_end":371251,"line_start":1932,"line_end":1932,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<String, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371260,"byte_end":371317,"line_start":1933,"line_end":1933,"column_start":9,"column_end":66}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371326,"byte_end":371344,"line_start":1934,"line_end":1934,"column_start":9,"column_end":27}},{"value":"/     time: NaiveDate::from_ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371353,"byte_end":371431,"line_start":1935,"line_end":1935,"column_start":9,"column_end":87}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371440,"byte_end":371446,"line_start":1936,"line_end":1936,"column_start":9,"column_end":15}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371455,"byte_end":371505,"line_start":1937,"line_end":1937,"column_start":9,"column_end":59}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371514,"byte_end":371569,"line_start":1938,"line_end":1938,"column_start":9,"column_end":64}},{"value":"/ # Ok(as_string)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371578,"byte_end":371597,"line_start":1939,"line_end":1939,"column_start":9,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371606,"byte_end":371613,"line_start":1940,"line_end":1940,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371622,"byte_end":371661,"line_start":1941,"line_end":1941,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371670,"byte_end":371677,"line_start":1942,"line_end":1942,"column_start":9,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":817},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":373122,"byte_end":373133,"line_start":1979,"line_end":1979,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::naive::datetime::serde::ts_milliseconds::deserialize","value":"fn <'de, D> (d: D) -> Result<NaiveDateTime, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a milliseconds timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a milliseconds timestamp","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371894,"byte_end":371952,"line_start":1949,"line_end":1949,"column_start":9,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371961,"byte_end":371964,"line_start":1950,"line_end":1950,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":371973,"byte_end":372037,"line_start":1951,"line_end":1951,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372046,"byte_end":372049,"line_start":1952,"line_end":1952,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372058,"byte_end":372072,"line_start":1953,"line_end":1953,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372081,"byte_end":372084,"line_start":1954,"line_end":1954,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372093,"byte_end":372104,"line_start":1955,"line_end":1955,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372113,"byte_end":372186,"line_start":1956,"line_end":1956,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372195,"byte_end":372268,"line_start":1957,"line_end":1957,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372277,"byte_end":372320,"line_start":1958,"line_end":1958,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372329,"byte_end":372334,"line_start":1959,"line_end":1959,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372343,"byte_end":372388,"line_start":1960,"line_end":1960,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372397,"byte_end":372440,"line_start":1961,"line_end":1961,"column_start":9,"column_end":52}},{"value":"/ # extern crate serde;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372449,"byte_end":372474,"line_start":1962,"line_end":1962,"column_start":9,"column_end":34}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372483,"byte_end":372509,"line_start":1963,"line_end":1963,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372518,"byte_end":372557,"line_start":1964,"line_end":1964,"column_start":9,"column_end":48}},{"value":"/ # use serde::Deserialize;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372566,"byte_end":372595,"line_start":1965,"line_end":1965,"column_start":9,"column_end":38}},{"value":"/ use chrono::naive::serde::ts_milliseconds::deserialize as from_milli_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372604,"byte_end":372680,"line_start":1966,"line_end":1966,"column_start":9,"column_end":85}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372689,"byte_end":372715,"line_start":1967,"line_end":1967,"column_start":9,"column_end":35}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372724,"byte_end":372738,"line_start":1968,"line_end":1968,"column_start":9,"column_end":23}},{"value":"/     #[serde(deserialize_with = \"from_milli_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372747,"byte_end":372799,"line_start":1969,"line_end":1969,"column_start":9,"column_end":61}},{"value":"/     time: NaiveDateTime","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372808,"byte_end":372835,"line_start":1970,"line_end":1970,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372844,"byte_end":372849,"line_start":1971,"line_end":1971,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372858,"byte_end":372861,"line_start":1972,"line_end":1972,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372870,"byte_end":372922,"line_start":1973,"line_end":1973,"column_start":9,"column_end":61}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918 }\"#)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":372931,"byte_end":373003,"line_start":1974,"line_end":1974,"column_start":9,"column_end":81}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":373012,"byte_end":373026,"line_start":1975,"line_end":1975,"column_start":9,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":373035,"byte_end":373042,"line_start":1976,"line_end":1976,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":373051,"byte_end":373090,"line_start":1977,"line_end":1977,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":373099,"byte_end":373106,"line_start":1978,"line_end":1978,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":832},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375644,"byte_end":375654,"line_start":2048,"line_end":2048,"column_start":13,"column_end":23},"name":"ts_seconds","qualname":"::naive::datetime::serde::ts_seconds","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":847}],"decl_id":null,"docs":" Used to serialize/deserialize from second-precision timestamps","sig":null,"attributes":[{"value":"/ Used to serialize/deserialize from second-precision timestamps","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374395,"byte_end":374461,"line_start":2013,"line_end":2013,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374466,"byte_end":374469,"line_start":2014,"line_end":2014,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374474,"byte_end":374488,"line_start":2015,"line_end":2015,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374493,"byte_end":374496,"line_start":2016,"line_end":2016,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374501,"byte_end":374512,"line_start":2017,"line_end":2017,"column_start":5,"column_end":16}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374517,"byte_end":374590,"line_start":2018,"line_end":2018,"column_start":5,"column_end":78}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374595,"byte_end":374668,"line_start":2019,"line_end":2019,"column_start":5,"column_end":78}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374673,"byte_end":374716,"line_start":2020,"line_end":2020,"column_start":5,"column_end":48}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374721,"byte_end":374726,"line_start":2021,"line_end":2021,"column_start":5,"column_end":10}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374731,"byte_end":374776,"line_start":2022,"line_end":2022,"column_start":5,"column_end":50}},{"value":"/ # extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374781,"byte_end":374811,"line_start":2023,"line_end":2023,"column_start":5,"column_end":35}},{"value":"/ # extern crate serde;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374816,"byte_end":374841,"line_start":2024,"line_end":2024,"column_start":5,"column_end":30}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374846,"byte_end":374872,"line_start":2025,"line_end":2025,"column_start":5,"column_end":31}},{"value":"/ # use chrono::{TimeZone, NaiveDate, NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374877,"byte_end":374937,"line_start":2026,"line_end":2026,"column_start":5,"column_end":65}},{"value":"/ use chrono::naive::serde::ts_seconds;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374942,"byte_end":374983,"line_start":2027,"line_end":2027,"column_start":5,"column_end":46}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":374988,"byte_end":375025,"line_start":2028,"line_end":2028,"column_start":5,"column_end":42}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375030,"byte_end":375044,"line_start":2029,"line_end":2029,"column_start":5,"column_end":19}},{"value":"/     #[serde(with = \"ts_seconds\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375049,"byte_end":375086,"line_start":2030,"line_end":2030,"column_start":5,"column_end":42}},{"value":"/     time: NaiveDateTime","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375091,"byte_end":375118,"line_start":2031,"line_end":2031,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375123,"byte_end":375128,"line_start":2032,"line_end":2032,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375133,"byte_end":375136,"line_start":2033,"line_end":2033,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375141,"byte_end":375193,"line_start":2034,"line_end":2034,"column_start":5,"column_end":57}},{"value":"/ let time = NaiveDate::from_ymd(2015, 5, 15).and_hms(10, 0, 0);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375198,"byte_end":375264,"line_start":2035,"line_end":2035,"column_start":5,"column_end":71}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375269,"byte_end":375287,"line_start":2036,"line_end":2036,"column_start":5,"column_end":23}},{"value":"/     time: time.clone(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375292,"byte_end":375319,"line_start":2037,"line_end":2037,"column_start":5,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375324,"byte_end":375330,"line_start":2038,"line_end":2038,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375335,"byte_end":375338,"line_start":2039,"line_end":2039,"column_start":5,"column_end":8}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375343,"byte_end":375393,"line_start":2040,"line_end":2040,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375398,"byte_end":375450,"line_start":2041,"line_end":2041,"column_start":5,"column_end":57}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375455,"byte_end":375507,"line_start":2042,"line_end":2042,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375512,"byte_end":375544,"line_start":2043,"line_end":2043,"column_start":5,"column_end":37}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375549,"byte_end":375563,"line_start":2044,"line_end":2044,"column_start":5,"column_end":19}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375568,"byte_end":375575,"line_start":2045,"line_end":2045,"column_start":5,"column_end":12}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375580,"byte_end":375619,"line_start":2046,"line_end":2046,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375624,"byte_end":375631,"line_start":2047,"line_end":2047,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":840},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377182,"byte_end":377191,"line_start":2088,"line_end":2088,"column_start":16,"column_end":25},"name":"serialize","qualname":"::naive::datetime::serde::ts_seconds::serialize","value":"fn <S> (dt: &NaiveDateTime, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of seconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of seconds since the epoch","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375766,"byte_end":375844,"line_start":2054,"line_end":2054,"column_start":9,"column_end":87}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375853,"byte_end":375856,"line_start":2055,"line_end":2055,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375865,"byte_end":375927,"line_start":2056,"line_end":2056,"column_start":9,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375936,"byte_end":375939,"line_start":2057,"line_end":2057,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375948,"byte_end":375962,"line_start":2058,"line_end":2058,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375971,"byte_end":375974,"line_start":2059,"line_end":2059,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":375983,"byte_end":375994,"line_start":2060,"line_end":2060,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376003,"byte_end":376076,"line_start":2061,"line_end":2061,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376085,"byte_end":376158,"line_start":2062,"line_end":2062,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376167,"byte_end":376210,"line_start":2063,"line_end":2063,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376219,"byte_end":376224,"line_start":2064,"line_end":2064,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376233,"byte_end":376278,"line_start":2065,"line_end":2065,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376287,"byte_end":376330,"line_start":2066,"line_end":2066,"column_start":9,"column_end":52}},{"value":"/ # #[macro_use] extern crate serde;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376339,"byte_end":376377,"line_start":2067,"line_end":2067,"column_start":9,"column_end":47}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376386,"byte_end":376412,"line_start":2068,"line_end":2068,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{TimeZone, NaiveDate, NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376421,"byte_end":376481,"line_start":2069,"line_end":2069,"column_start":9,"column_end":69}},{"value":"/ # use serde::Serialize;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376490,"byte_end":376517,"line_start":2070,"line_end":2070,"column_start":9,"column_end":36}},{"value":"/ use chrono::naive::serde::ts_seconds::serialize as to_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376526,"byte_end":376587,"line_start":2071,"line_end":2071,"column_start":9,"column_end":70}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376596,"byte_end":376620,"line_start":2072,"line_end":2072,"column_start":9,"column_end":33}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376629,"byte_end":376643,"line_start":2073,"line_end":2073,"column_start":9,"column_end":23}},{"value":"/     #[serde(serialize_with = \"to_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376652,"byte_end":376694,"line_start":2074,"line_end":2074,"column_start":9,"column_end":51}},{"value":"/     time: NaiveDateTime","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376703,"byte_end":376730,"line_start":2075,"line_end":2075,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376739,"byte_end":376744,"line_start":2076,"line_end":2076,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376753,"byte_end":376756,"line_start":2077,"line_end":2077,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<String, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376765,"byte_end":376822,"line_start":2078,"line_end":2078,"column_start":9,"column_end":66}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376831,"byte_end":376849,"line_start":2079,"line_end":2079,"column_start":9,"column_end":27}},{"value":"/     time: NaiveDate::from_ymd(2015, 5, 15).and_hms(10, 0, 0),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376858,"byte_end":376923,"line_start":2080,"line_end":2080,"column_start":9,"column_end":74}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376932,"byte_end":376938,"line_start":2081,"line_end":2081,"column_start":9,"column_end":15}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":376947,"byte_end":376997,"line_start":2082,"line_end":2082,"column_start":9,"column_end":59}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377006,"byte_end":377058,"line_start":2083,"line_end":2083,"column_start":9,"column_end":61}},{"value":"/ # Ok(as_string)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377067,"byte_end":377086,"line_start":2084,"line_end":2084,"column_start":9,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377095,"byte_end":377102,"line_start":2085,"line_end":2085,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377111,"byte_end":377150,"line_start":2086,"line_end":2086,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377159,"byte_end":377166,"line_start":2087,"line_end":2087,"column_start":9,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":842},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378579,"byte_end":378590,"line_start":2124,"line_end":2124,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::naive::datetime::serde::ts_seconds::deserialize","value":"fn <'de, D> (d: D) -> Result<NaiveDateTime, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a seconds timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a seconds timestamp","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377376,"byte_end":377429,"line_start":2094,"line_end":2094,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377438,"byte_end":377441,"line_start":2095,"line_end":2095,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377450,"byte_end":377514,"line_start":2096,"line_end":2096,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377523,"byte_end":377526,"line_start":2097,"line_end":2097,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377535,"byte_end":377549,"line_start":2098,"line_end":2098,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377558,"byte_end":377561,"line_start":2099,"line_end":2099,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377570,"byte_end":377581,"line_start":2100,"line_end":2100,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377590,"byte_end":377663,"line_start":2101,"line_end":2101,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377672,"byte_end":377745,"line_start":2102,"line_end":2102,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377754,"byte_end":377797,"line_start":2103,"line_end":2103,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377806,"byte_end":377811,"line_start":2104,"line_end":2104,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377820,"byte_end":377865,"line_start":2105,"line_end":2105,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377874,"byte_end":377917,"line_start":2106,"line_end":2106,"column_start":9,"column_end":52}},{"value":"/ # extern crate serde;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377926,"byte_end":377951,"line_start":2107,"line_end":2107,"column_start":9,"column_end":34}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377960,"byte_end":377986,"line_start":2108,"line_end":2108,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":377995,"byte_end":378034,"line_start":2109,"line_end":2109,"column_start":9,"column_end":48}},{"value":"/ # use serde::Deserialize;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378043,"byte_end":378072,"line_start":2110,"line_end":2110,"column_start":9,"column_end":38}},{"value":"/ use chrono::naive::serde::ts_seconds::deserialize as from_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378081,"byte_end":378146,"line_start":2111,"line_end":2111,"column_start":9,"column_end":74}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378155,"byte_end":378181,"line_start":2112,"line_end":2112,"column_start":9,"column_end":35}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378190,"byte_end":378204,"line_start":2113,"line_end":2113,"column_start":9,"column_end":23}},{"value":"/     #[serde(deserialize_with = \"from_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378213,"byte_end":378259,"line_start":2114,"line_end":2114,"column_start":9,"column_end":55}},{"value":"/     time: NaiveDateTime","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378268,"byte_end":378295,"line_start":2115,"line_end":2115,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378304,"byte_end":378309,"line_start":2116,"line_end":2116,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378318,"byte_end":378321,"line_start":2117,"line_end":2117,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378330,"byte_end":378382,"line_start":2118,"line_end":2118,"column_start":9,"column_end":61}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1431684000 }\"#)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378391,"byte_end":378460,"line_start":2119,"line_end":2119,"column_start":9,"column_end":78}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378469,"byte_end":378483,"line_start":2120,"line_end":2120,"column_start":9,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378492,"byte_end":378499,"line_start":2121,"line_end":2121,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378508,"byte_end":378547,"line_start":2122,"line_end":2122,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378556,"byte_end":378563,"line_start":2123,"line_end":2123,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":864},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21889,"byte_end":21894,"line_start":508,"line_end":508,"column_start":13,"column_end":18},"name":"serde","qualname":"::naive::serde","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":865}],"decl_id":null,"docs":" Serialization/Deserialization of naive types in alternate formats","sig":null,"attributes":[{"value":"/ Serialization/Deserialization of naive types in alternate formats","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21466,"byte_end":21535,"line_start":499,"line_end":499,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21540,"byte_end":21543,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ The various modules in here are intended to be used with serde's [`with`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21548,"byte_end":21624,"line_start":501,"line_end":501,"column_start":5,"column_end":81}},{"value":"/ annotation][1] to serialize as something other than the default [RFC","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21629,"byte_end":21701,"line_start":502,"line_end":502,"column_start":5,"column_end":77}},{"value":"/ 3339][2] format.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21706,"byte_end":21726,"line_start":503,"line_end":503,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21731,"byte_end":21734,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ [1]: https://serde.rs/attributes.html#field-attributes","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21739,"byte_end":21797,"line_start":505,"line_end":505,"column_start":5,"column_end":63}},{"value":"/ [2]: https://tools.ietf.org/html/rfc3339","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21802,"byte_end":21846,"line_start":506,"line_end":506,"column_start":5,"column_end":49}},{"value":"cfg(feature = \"serde\")","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21851,"byte_end":21876,"line_start":507,"line_end":507,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2057},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392656,"byte_end":392660,"line_start":44,"line_end":44,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":2059},{"krate":0,"index":2060}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391283,"byte_end":391325,"line_start":19,"line_end":19,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391326,"byte_end":391329,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391330,"byte_end":391383,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391384,"byte_end":391464,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ For serialization and deserialization uses, it is best to use `NaiveDate` instead.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391465,"byte_end":391551,"line_start":23,"line_end":23,"column_start":1,"column_end":87}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391552,"byte_end":391609,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391610,"byte_end":391613,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391614,"byte_end":391692,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391693,"byte_end":391763,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391764,"byte_end":391820,"line_start":28,"line_end":28,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391821,"byte_end":391824,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391825,"byte_end":391897,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391898,"byte_end":391950,"line_start":31,"line_end":31,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":391951,"byte_end":392038,"line_start":32,"line_end":32,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392039,"byte_end":392107,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392108,"byte_end":392154,"line_start":34,"line_end":34,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392155,"byte_end":392158,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392159,"byte_end":392203,"line_start":36,"line_end":36,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392204,"byte_end":392300,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392301,"byte_end":392396,"line_start":38,"line_end":38,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392397,"byte_end":392400,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392401,"byte_end":392477,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392478,"byte_end":392545,"line_start":41,"line_end":41,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392546,"byte_end":392627,"line_start":42,"line_end":42,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":892},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392768,"byte_end":392776,"line_start":50,"line_end":50,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392725,"byte_end":392757,"line_start":49,"line_end":49,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":893},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392878,"byte_end":392886,"line_start":52,"line_end":52,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392835,"byte_end":392867,"line_start":51,"line_end":51,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393234,"byte_end":393242,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"fn (date: NaiveDate, offset: Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392980,"byte_end":393036,"line_start":55,"line_end":55,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393041,"byte_end":393107,"line_start":56,"line_end":56,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393213,"byte_end":393222,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393543,"byte_end":393551,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"fn (&self, time: NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393349,"byte_end":393420,"line_start":64,"line_end":64,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393425,"byte_end":393473,"line_start":65,"line_end":65,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393478,"byte_end":393481,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393486,"byte_end":393517,"line_start":67,"line_end":67,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393522,"byte_end":393531,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393948,"byte_end":393955,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393733,"byte_end":393807,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393812,"byte_end":393860,"line_start":75,"line_end":75,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393865,"byte_end":393868,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393873,"byte_end":393922,"line_start":77,"line_end":77,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":393927,"byte_end":393936,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394310,"byte_end":394321,"line_start":88,"line_end":88,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394087,"byte_end":394161,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394166,"byte_end":394214,"line_start":84,"line_end":84,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394219,"byte_end":394222,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394227,"byte_end":394284,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394289,"byte_end":394298,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394808,"byte_end":394821,"line_start":98,"line_end":98,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394482,"byte_end":394569,"line_start":92,"line_end":92,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394574,"byte_end":394654,"line_start":93,"line_end":93,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394659,"byte_end":394707,"line_start":94,"line_end":94,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394712,"byte_end":394715,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394720,"byte_end":394782,"line_start":96,"line_end":96,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394787,"byte_end":394796,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395312,"byte_end":395329,"line_start":108,"line_end":108,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":394978,"byte_end":395065,"line_start":102,"line_end":102,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395070,"byte_end":395150,"line_start":103,"line_end":103,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395155,"byte_end":395203,"line_start":104,"line_end":104,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395208,"byte_end":395211,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395216,"byte_end":395286,"line_start":106,"line_end":106,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395291,"byte_end":395300,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395874,"byte_end":395887,"line_start":119,"line_end":119,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395544,"byte_end":395631,"line_start":113,"line_end":113,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395636,"byte_end":395720,"line_start":114,"line_end":114,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395725,"byte_end":395773,"line_start":115,"line_end":115,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395778,"byte_end":395781,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395786,"byte_end":395848,"line_start":117,"line_end":117,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":395853,"byte_end":395862,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396382,"byte_end":396399,"line_start":129,"line_end":129,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396044,"byte_end":396131,"line_start":123,"line_end":123,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396136,"byte_end":396220,"line_start":124,"line_end":124,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396225,"byte_end":396273,"line_start":125,"line_end":125,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396278,"byte_end":396281,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396286,"byte_end":396356,"line_start":127,"line_end":127,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396361,"byte_end":396370,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396945,"byte_end":396957,"line_start":140,"line_end":140,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396614,"byte_end":396700,"line_start":134,"line_end":134,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396705,"byte_end":396792,"line_start":135,"line_end":135,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396797,"byte_end":396845,"line_start":136,"line_end":136,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396850,"byte_end":396853,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396858,"byte_end":396919,"line_start":138,"line_end":138,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":396924,"byte_end":396933,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397450,"byte_end":397466,"line_start":150,"line_end":150,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397111,"byte_end":397197,"line_start":144,"line_end":144,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397202,"byte_end":397289,"line_start":145,"line_end":145,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397294,"byte_end":397342,"line_start":146,"line_end":146,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397347,"byte_end":397350,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397355,"byte_end":397424,"line_start":148,"line_end":148,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397429,"byte_end":397438,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397811,"byte_end":397815,"line_start":159,"line_end":159,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397677,"byte_end":397718,"line_start":155,"line_end":155,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397723,"byte_end":397726,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397731,"byte_end":397785,"line_start":157,"line_end":157,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397790,"byte_end":397799,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398037,"byte_end":398045,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397895,"byte_end":397936,"line_start":163,"line_end":163,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397941,"byte_end":397944,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":397949,"byte_end":398011,"line_start":165,"line_end":165,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398016,"byte_end":398025,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398305,"byte_end":398309,"line_start":175,"line_end":175,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398169,"byte_end":398211,"line_start":171,"line_end":171,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398216,"byte_end":398219,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398224,"byte_end":398279,"line_start":173,"line_end":173,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398284,"byte_end":398293,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398533,"byte_end":398541,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398389,"byte_end":398431,"line_start":179,"line_end":179,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398436,"byte_end":398439,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398444,"byte_end":398507,"line_start":181,"line_end":181,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398512,"byte_end":398521,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398735,"byte_end":398741,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398665,"byte_end":398709,"line_start":187,"line_end":187,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398714,"byte_end":398723,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398862,"byte_end":398870,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398798,"byte_end":398836,"line_start":193,"line_end":193,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398841,"byte_end":398850,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399096,"byte_end":399109,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398941,"byte_end":398978,"line_start":199,"line_end":199,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":398983,"byte_end":399070,"line_start":200,"line_end":200,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399075,"byte_end":399084,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399341,"byte_end":399359,"line_start":210,"line_end":210,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399205,"byte_end":399251,"line_start":206,"line_end":206,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399256,"byte_end":399259,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399264,"byte_end":399315,"line_start":208,"line_end":208,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399320,"byte_end":399329,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399679,"byte_end":399697,"line_start":219,"line_end":219,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399536,"byte_end":399589,"line_start":215,"line_end":215,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399594,"byte_end":399597,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399602,"byte_end":399653,"line_start":217,"line_end":217,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399658,"byte_end":399667,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400198,"byte_end":400219,"line_start":231,"line_end":231,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399874,"byte_end":399925,"line_start":224,"line_end":224,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399930,"byte_end":399975,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399980,"byte_end":399983,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":399988,"byte_end":400035,"line_start":227,"line_end":227,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400040,"byte_end":400099,"line_start":228,"line_end":228,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400177,"byte_end":400186,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400402,"byte_end":400411,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400335,"byte_end":400376,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400381,"byte_end":400390,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400721,"byte_end":400732,"line_start":247,"line_end":247,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400463,"byte_end":400506,"line_start":241,"line_end":241,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400511,"byte_end":400514,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This is technically the same as [`naive_utc`](#method.naive_utc)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400519,"byte_end":400587,"line_start":243,"line_end":243,"column_start":5,"column_end":73}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400592,"byte_end":400653,"line_start":244,"line_end":244,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400658,"byte_end":400695,"line_start":245,"line_end":245,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":400700,"byte_end":400709,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401277,"byte_end":401294,"line_start":262,"line_end":262,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401136,"byte_end":401193,"line_start":259,"line_end":259,"column_start":5,"column_end":62}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401198,"byte_end":401251,"line_start":260,"line_end":260,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401256,"byte_end":401265,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401769,"byte_end":401775,"line_start":272,"line_end":272,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401514,"byte_end":401568,"line_start":267,"line_end":267,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401573,"byte_end":401642,"line_start":268,"line_end":268,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401647,"byte_end":401685,"line_start":269,"line_end":269,"column_start":5,"column_end":43}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401690,"byte_end":401743,"line_start":270,"line_end":270,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401748,"byte_end":401757,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2065},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406593,"byte_end":406597,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406520,"byte_end":406588,"line_start":36,"line_end":36,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2067},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406736,"byte_end":406742,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406604,"byte_end":406657,"line_start":39,"line_end":39,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406662,"byte_end":406731,"line_start":40,"line_end":40,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2069},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406881,"byte_end":406887,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406749,"byte_end":406802,"line_start":43,"line_end":43,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406807,"byte_end":406876,"line_start":44,"line_end":44,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2071},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407026,"byte_end":407031,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406894,"byte_end":406947,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406952,"byte_end":407021,"line_start":48,"line_end":48,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2073},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407267,"byte_end":407273,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407038,"byte_end":407111,"line_start":51,"line_end":51,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407116,"byte_end":407190,"line_start":52,"line_end":52,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407195,"byte_end":407262,"line_start":53,"line_end":53,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2075},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407333,"byte_end":407348,"line_start":58,"line_end":58,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2064},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406500,"byte_end":406513,"line_start":35,"line_end":35,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"SecondsFormat::{Secs, Millis, Micros, Nanos, AutoSi, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":2065},{"krate":0,"index":2067},{"krate":0,"index":2069},{"krate":0,"index":2071},{"krate":0,"index":2073},{"krate":0,"index":2075}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406237,"byte_end":406309,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406310,"byte_end":406381,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406382,"byte_end":406385,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406386,"byte_end":406445,"line_start":33,"line_end":33,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2088},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407646,"byte_end":407654,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":2090},{"krate":0,"index":2091}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407353,"byte_end":407404,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407405,"byte_end":407408,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407409,"byte_end":407485,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407486,"byte_end":407553,"line_start":64,"line_end":64,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407554,"byte_end":407617,"line_start":65,"line_end":65,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408294,"byte_end":408302,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"fn (datetime: NaiveDateTime, offset: Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407765,"byte_end":407829,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407834,"byte_end":407904,"line_start":74,"line_end":74,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407909,"byte_end":407912,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407917,"byte_end":407930,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407935,"byte_end":407938,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407943,"byte_end":407951,"line_start":78,"line_end":78,"column_start":5,"column_end":13}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407956,"byte_end":408013,"line_start":79,"line_end":79,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408018,"byte_end":408021,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408026,"byte_end":408108,"line_start":81,"line_end":81,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408113,"byte_end":408154,"line_start":82,"line_end":82,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408159,"byte_end":408167,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408273,"byte_end":408282,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408490,"byte_end":408494,"line_start":93,"line_end":93,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408433,"byte_end":408464,"line_start":91,"line_end":91,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408469,"byte_end":408478,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408719,"byte_end":408723,"line_start":100,"line_end":100,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408598,"byte_end":408629,"line_start":97,"line_end":97,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408634,"byte_end":408693,"line_start":98,"line_end":98,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408698,"byte_end":408707,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408940,"byte_end":408949,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408806,"byte_end":408882,"line_start":104,"line_end":104,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408887,"byte_end":408914,"line_start":105,"line_end":105,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408919,"byte_end":408928,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409770,"byte_end":409786,"line_start":131,"line_end":131,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409011,"byte_end":409084,"line_start":111,"line_end":111,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409089,"byte_end":409092,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409097,"byte_end":409171,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409176,"byte_end":409249,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409254,"byte_end":409326,"line_start":115,"line_end":115,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409331,"byte_end":409367,"line_start":116,"line_end":116,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409372,"byte_end":409375,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409380,"byte_end":409393,"line_start":118,"line_end":118,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409398,"byte_end":409401,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409406,"byte_end":409414,"line_start":120,"line_end":120,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409419,"byte_end":409439,"line_start":121,"line_end":121,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409444,"byte_end":409469,"line_start":122,"line_end":122,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409474,"byte_end":409477,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409482,"byte_end":409543,"line_start":124,"line_end":124,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409548,"byte_end":409593,"line_start":125,"line_end":125,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409598,"byte_end":409601,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409606,"byte_end":409669,"line_start":127,"line_end":127,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409674,"byte_end":409731,"line_start":128,"line_end":128,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409736,"byte_end":409744,"line_start":129,"line_end":129,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409749,"byte_end":409758,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410608,"byte_end":410623,"line_start":155,"line_end":155,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409855,"byte_end":409927,"line_start":135,"line_end":135,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409932,"byte_end":409935,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409940,"byte_end":410014,"line_start":137,"line_end":137,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410019,"byte_end":410084,"line_start":138,"line_end":138,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410089,"byte_end":410160,"line_start":139,"line_end":139,"column_start":5,"column_end":76}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410165,"byte_end":410193,"line_start":140,"line_end":140,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410198,"byte_end":410201,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410206,"byte_end":410219,"line_start":142,"line_end":142,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410224,"byte_end":410227,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410232,"byte_end":410240,"line_start":144,"line_end":144,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410245,"byte_end":410265,"line_start":145,"line_end":145,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410270,"byte_end":410295,"line_start":146,"line_end":146,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410300,"byte_end":410303,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410308,"byte_end":410368,"line_start":148,"line_end":148,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410373,"byte_end":410425,"line_start":149,"line_end":149,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410430,"byte_end":410433,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410438,"byte_end":410500,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410505,"byte_end":410569,"line_start":152,"line_end":152,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410574,"byte_end":410582,"line_start":153,"line_end":153,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410587,"byte_end":410596,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410953,"byte_end":410976,"line_start":165,"line_end":165,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410691,"byte_end":410760,"line_start":159,"line_end":159,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410765,"byte_end":410768,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410773,"byte_end":410832,"line_start":161,"line_end":161,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410837,"byte_end":410840,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410845,"byte_end":410927,"line_start":163,"line_end":163,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410932,"byte_end":410941,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411318,"byte_end":411341,"line_start":175,"line_end":175,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411052,"byte_end":411121,"line_start":169,"line_end":169,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411126,"byte_end":411129,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411134,"byte_end":411197,"line_start":171,"line_end":171,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411202,"byte_end":411205,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411210,"byte_end":411292,"line_start":173,"line_end":173,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411297,"byte_end":411306,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411685,"byte_end":411707,"line_start":185,"line_end":185,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411417,"byte_end":411485,"line_start":179,"line_end":179,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411490,"byte_end":411493,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411498,"byte_end":411565,"line_start":181,"line_end":181,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411570,"byte_end":411573,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411578,"byte_end":411659,"line_start":183,"line_end":183,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411664,"byte_end":411673,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411852,"byte_end":411858,"line_start":191,"line_end":191,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411782,"byte_end":411826,"line_start":189,"line_end":189,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411831,"byte_end":411840,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411979,"byte_end":411987,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411915,"byte_end":411953,"line_start":195,"line_end":195,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411958,"byte_end":411967,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412217,"byte_end":412230,"line_start":204,"line_end":204,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412058,"byte_end":412095,"line_start":201,"line_end":201,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412100,"byte_end":412191,"line_start":202,"line_end":202,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412196,"byte_end":412205,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412483,"byte_end":412501,"line_start":212,"line_end":212,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412338,"byte_end":412393,"line_start":208,"line_end":208,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412398,"byte_end":412401,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412406,"byte_end":412457,"line_start":210,"line_end":210,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412462,"byte_end":412471,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412867,"byte_end":412885,"line_start":222,"line_end":222,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412715,"byte_end":412777,"line_start":218,"line_end":218,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412782,"byte_end":412785,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412790,"byte_end":412841,"line_start":220,"line_end":220,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":412846,"byte_end":412855,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413314,"byte_end":413335,"line_start":232,"line_end":232,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: DateTime<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413099,"byte_end":413163,"line_start":228,"line_end":228,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413168,"byte_end":413215,"line_start":229,"line_end":229,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413293,"byte_end":413302,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413534,"byte_end":413543,"line_start":238,"line_end":238,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413463,"byte_end":413508,"line_start":236,"line_end":236,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413513,"byte_end":413522,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413676,"byte_end":413687,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413603,"byte_end":413650,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413655,"byte_end":413664,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417489,"byte_end":417507,"line_start":338,"line_end":338,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":416915,"byte_end":417000,"line_start":325,"line_end":325,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417005,"byte_end":417067,"line_start":326,"line_end":326,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417072,"byte_end":417075,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ RFC 2822 is the internet message standard that specifices the","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417080,"byte_end":417145,"line_start":328,"line_end":328,"column_start":5,"column_end":70}},{"value":"/ representation of times in HTTP and email headers.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417150,"byte_end":417204,"line_start":329,"line_end":329,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417209,"byte_end":417212,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417217,"byte_end":417224,"line_start":331,"line_end":331,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417229,"byte_end":417281,"line_start":332,"line_end":332,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417286,"byte_end":417301,"line_start":333,"line_end":333,"column_start":5,"column_end":20}},{"value":"/     DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417306,"byte_end":417385,"line_start":334,"line_end":334,"column_start":5,"column_end":84}},{"value":"/     FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417390,"byte_end":417454,"line_start":335,"line_end":335,"column_start":5,"column_end":69}},{"value":"/ );","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417459,"byte_end":417465,"line_start":336,"line_end":336,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417470,"byte_end":417477,"line_start":337,"line_end":337,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418132,"byte_end":418150,"line_start":350,"line_end":350,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417763,"byte_end":417856,"line_start":345,"line_end":345,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417861,"byte_end":417923,"line_start":346,"line_end":346,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417928,"byte_end":417931,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":417936,"byte_end":418026,"line_start":348,"line_end":348,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418031,"byte_end":418120,"line_start":349,"line_end":349,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419358,"byte_end":419372,"line_start":377,"line_end":377,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418406,"byte_end":418462,"line_start":357,"line_end":357,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418467,"byte_end":418524,"line_start":358,"line_end":358,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418529,"byte_end":418598,"line_start":359,"line_end":359,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418603,"byte_end":418641,"line_start":360,"line_end":360,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418646,"byte_end":418649,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418654,"byte_end":418748,"line_start":362,"line_end":362,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418753,"byte_end":418756,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418761,"byte_end":418827,"line_start":364,"line_end":364,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418832,"byte_end":418926,"line_start":365,"line_end":365,"column_start":5,"column_end":99}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":418931,"byte_end":419006,"line_start":366,"line_end":366,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419011,"byte_end":419014,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419019,"byte_end":419032,"line_start":368,"line_end":368,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419037,"byte_end":419040,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419045,"byte_end":419056,"line_start":370,"line_end":370,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419061,"byte_end":419111,"line_start":371,"line_end":371,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419116,"byte_end":419119,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419124,"byte_end":419162,"line_start":373,"line_end":373,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419167,"byte_end":419237,"line_start":374,"line_end":374,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419242,"byte_end":419334,"line_start":375,"line_end":375,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419339,"byte_end":419346,"line_start":376,"line_end":376,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419793,"byte_end":419803,"line_start":387,"line_end":387,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419637,"byte_end":419723,"line_start":385,"line_end":385,"column_start":5,"column_end":91}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419728,"byte_end":419781,"line_start":386,"line_end":386,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420135,"byte_end":420145,"line_start":394,"line_end":394,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419971,"byte_end":420065,"line_start":392,"line_end":392,"column_start":5,"column_end":99}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420070,"byte_end":420123,"line_start":393,"line_end":393,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421608,"byte_end":421623,"line_start":424,"line_end":424,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"fn (&self, secform: SecondsFormat, use_z: bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420313,"byte_end":420385,"line_start":399,"line_end":399,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`. If passed `use_z` true and the","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420390,"byte_end":420460,"line_start":400,"line_end":400,"column_start":5,"column_end":75}},{"value":"/ timezone is UTC (offset 0), use 'Z', as per","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420465,"byte_end":420512,"line_start":401,"line_end":401,"column_start":5,"column_end":52}},{"value":"/ [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420517,"byte_end":420604,"line_start":402,"line_end":402,"column_start":5,"column_end":92}},{"value":"/ If passed `use_z` false, use","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420609,"byte_end":420641,"line_start":403,"line_end":403,"column_start":5,"column_end":37}},{"value":"/ [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420646,"byte_end":420731,"line_start":404,"line_end":404,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420736,"byte_end":420739,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420744,"byte_end":420758,"line_start":406,"line_end":406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420763,"byte_end":420766,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420771,"byte_end":420782,"line_start":408,"line_end":408,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420787,"byte_end":420859,"line_start":409,"line_end":409,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420864,"byte_end":420932,"line_start":410,"line_end":410,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":420937,"byte_end":421001,"line_start":411,"line_end":411,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421006,"byte_end":421054,"line_start":412,"line_end":412,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421059,"byte_end":421122,"line_start":413,"line_end":413,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421127,"byte_end":421170,"line_start":414,"line_end":414,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421175,"byte_end":421236,"line_start":415,"line_end":415,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421241,"byte_end":421280,"line_start":416,"line_end":416,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421285,"byte_end":421288,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421293,"byte_end":421338,"line_start":418,"line_end":418,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421343,"byte_end":421411,"line_start":419,"line_end":419,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421416,"byte_end":421477,"line_start":420,"line_end":420,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421482,"byte_end":421526,"line_start":421,"line_end":421,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421531,"byte_end":421538,"line_start":422,"line_end":422,"column_start":5,"column_end":12}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":421543,"byte_end":421596,"line_start":423,"line_end":423,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":423382,"byte_end":423399,"line_start":477,"line_end":477,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":423223,"byte_end":423298,"line_start":474,"line_end":474,"column_start":5,"column_end":80}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":423303,"byte_end":423356,"line_start":475,"line_end":475,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":423361,"byte_end":423370,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":423940,"byte_end":423946,"line_start":488,"line_end":488,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":423667,"byte_end":423739,"line_start":483,"line_end":483,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":423744,"byte_end":423813,"line_start":484,"line_end":484,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":423818,"byte_end":423856,"line_start":485,"line_end":485,"column_start":5,"column_end":43}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":423861,"byte_end":423914,"line_start":486,"line_end":486,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":423919,"byte_end":423928,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2095},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440000,"byte_end":440023,"line_start":935,"line_end":935,"column_start":16,"column_end":39},"name":"SecondsTimestampVisitor","qualname":"::datetime::serde::SecondsTimestampVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2099},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440081,"byte_end":440108,"line_start":939,"line_end":939,"column_start":16,"column_end":43},"name":"NanoSecondsTimestampVisitor","qualname":"::datetime::serde::NanoSecondsTimestampVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2103},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440166,"byte_end":440194,"line_start":943,"line_end":943,"column_start":16,"column_end":44},"name":"MilliSecondsTimestampVisitor","qualname":"::datetime::serde::MilliSecondsTimestampVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1198},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442016,"byte_end":442030,"line_start":997,"line_end":997,"column_start":13,"column_end":27},"name":"ts_nanoseconds","qualname":"::datetime::serde::ts_nanoseconds","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","parent":null,"children":[{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1215}],"decl_id":null,"docs":" Ser/de to/from timestamps in nanoseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from timestamps in nanoseconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440740,"byte_end":440784,"line_start":961,"line_end":961,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440789,"byte_end":440792,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440797,"byte_end":440850,"line_start":963,"line_end":963,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440855,"byte_end":440858,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440863,"byte_end":440877,"line_start":965,"line_end":965,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440882,"byte_end":440885,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440890,"byte_end":440901,"line_start":967,"line_end":967,"column_start":5,"column_end":16}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440906,"byte_end":440979,"line_start":968,"line_end":968,"column_start":5,"column_end":78}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":440984,"byte_end":441057,"line_start":969,"line_end":969,"column_start":5,"column_end":78}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441062,"byte_end":441105,"line_start":970,"line_end":970,"column_start":5,"column_end":48}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441110,"byte_end":441115,"line_start":971,"line_end":971,"column_start":5,"column_end":10}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441120,"byte_end":441165,"line_start":972,"line_end":972,"column_start":5,"column_end":50}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441170,"byte_end":441213,"line_start":973,"line_end":973,"column_start":5,"column_end":48}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441218,"byte_end":441244,"line_start":974,"line_end":974,"column_start":5,"column_end":31}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441249,"byte_end":441293,"line_start":975,"line_end":975,"column_start":5,"column_end":49}},{"value":"/ use chrono::serde::ts_nanoseconds;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441298,"byte_end":441336,"line_start":976,"line_end":976,"column_start":5,"column_end":43}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441341,"byte_end":441378,"line_start":977,"line_end":977,"column_start":5,"column_end":42}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441383,"byte_end":441397,"line_start":978,"line_end":978,"column_start":5,"column_end":19}},{"value":"/     #[serde(with = \"ts_nanoseconds\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441402,"byte_end":441443,"line_start":979,"line_end":979,"column_start":5,"column_end":46}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441448,"byte_end":441475,"line_start":980,"line_end":980,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441480,"byte_end":441485,"line_start":981,"line_end":981,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441490,"byte_end":441493,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441498,"byte_end":441550,"line_start":983,"line_end":983,"column_start":5,"column_end":57}},{"value":"/ let time = Utc.ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441555,"byte_end":441627,"line_start":984,"line_end":984,"column_start":5,"column_end":77}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441632,"byte_end":441650,"line_start":985,"line_end":985,"column_start":5,"column_end":23}},{"value":"/     time: time.clone(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441655,"byte_end":441682,"line_start":986,"line_end":986,"column_start":5,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441687,"byte_end":441693,"line_start":987,"line_end":987,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441698,"byte_end":441701,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441706,"byte_end":441756,"line_start":989,"line_end":989,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441761,"byte_end":441822,"line_start":990,"line_end":990,"column_start":5,"column_end":66}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441827,"byte_end":441879,"line_start":991,"line_end":991,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441884,"byte_end":441916,"line_start":992,"line_end":992,"column_start":5,"column_end":37}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441921,"byte_end":441935,"line_start":993,"line_end":993,"column_start":5,"column_end":19}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441940,"byte_end":441947,"line_start":994,"line_end":994,"column_start":5,"column_end":12}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441952,"byte_end":441991,"line_start":995,"line_end":995,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":441996,"byte_end":442003,"line_start":996,"line_end":996,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":1210},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443564,"byte_end":443573,"line_start":1038,"line_end":1038,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_nanoseconds::serialize","value":"fn <S> (dt: &DateTime<Utc>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of nanoseconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of nanoseconds since the epoch","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442221,"byte_end":442303,"line_start":1006,"line_end":1006,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442312,"byte_end":442315,"line_start":1007,"line_end":1007,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442324,"byte_end":442386,"line_start":1008,"line_end":1008,"column_start":9,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442395,"byte_end":442398,"line_start":1009,"line_end":1009,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442407,"byte_end":442421,"line_start":1010,"line_end":1010,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442430,"byte_end":442433,"line_start":1011,"line_end":1011,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442442,"byte_end":442453,"line_start":1012,"line_end":1012,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442462,"byte_end":442535,"line_start":1013,"line_end":1013,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442544,"byte_end":442617,"line_start":1014,"line_end":1014,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442626,"byte_end":442669,"line_start":1015,"line_end":1015,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442678,"byte_end":442683,"line_start":1016,"line_end":1016,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442692,"byte_end":442737,"line_start":1017,"line_end":1017,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442746,"byte_end":442789,"line_start":1018,"line_end":1018,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442798,"byte_end":442824,"line_start":1019,"line_end":1019,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442833,"byte_end":442877,"line_start":1020,"line_end":1020,"column_start":9,"column_end":53}},{"value":"/ use chrono::serde::ts_nanoseconds::serialize as to_nano_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442886,"byte_end":442949,"line_start":1021,"line_end":1021,"column_start":9,"column_end":72}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442958,"byte_end":442982,"line_start":1022,"line_end":1022,"column_start":9,"column_end":33}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":442991,"byte_end":443005,"line_start":1023,"line_end":1023,"column_start":9,"column_end":23}},{"value":"/     #[serde(serialize_with = \"to_nano_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443014,"byte_end":443061,"line_start":1024,"line_end":1024,"column_start":9,"column_end":56}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443070,"byte_end":443097,"line_start":1025,"line_end":1025,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443106,"byte_end":443111,"line_start":1026,"line_end":1026,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443120,"byte_end":443123,"line_start":1027,"line_end":1027,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<String, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443132,"byte_end":443189,"line_start":1028,"line_end":1028,"column_start":9,"column_end":66}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443198,"byte_end":443216,"line_start":1029,"line_end":1029,"column_start":9,"column_end":27}},{"value":"/     time: Utc.ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443225,"byte_end":443296,"line_start":1030,"line_end":1030,"column_start":9,"column_end":80}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443305,"byte_end":443311,"line_start":1031,"line_end":1031,"column_start":9,"column_end":15}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443320,"byte_end":443370,"line_start":1032,"line_end":1032,"column_start":9,"column_end":59}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443379,"byte_end":443440,"line_start":1033,"line_end":1033,"column_start":9,"column_end":70}},{"value":"/ # Ok(as_string)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443449,"byte_end":443468,"line_start":1034,"line_end":1034,"column_start":9,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443477,"byte_end":443484,"line_start":1035,"line_end":1035,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443493,"byte_end":443532,"line_start":1036,"line_end":1036,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443541,"byte_end":443548,"line_start":1037,"line_end":1037,"column_start":9,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1212},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444909,"byte_end":444920,"line_start":1072,"line_end":1072,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_nanoseconds::deserialize","value":"fn <'de, D> (d: D) -> Result<DateTime<Utc>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a nanosecond timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a nanosecond timestamp","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443764,"byte_end":443820,"line_start":1044,"line_end":1044,"column_start":9,"column_end":65}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443829,"byte_end":443832,"line_start":1045,"line_end":1045,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443841,"byte_end":443905,"line_start":1046,"line_end":1046,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443914,"byte_end":443917,"line_start":1047,"line_end":1047,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443926,"byte_end":443940,"line_start":1048,"line_end":1048,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443949,"byte_end":443952,"line_start":1049,"line_end":1049,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443961,"byte_end":443972,"line_start":1050,"line_end":1050,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":443981,"byte_end":444054,"line_start":1051,"line_end":1051,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444063,"byte_end":444136,"line_start":1052,"line_end":1052,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444145,"byte_end":444188,"line_start":1053,"line_end":1053,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444197,"byte_end":444202,"line_start":1054,"line_end":1054,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444211,"byte_end":444256,"line_start":1055,"line_end":1055,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444265,"byte_end":444308,"line_start":1056,"line_end":1056,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444317,"byte_end":444343,"line_start":1057,"line_end":1057,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444352,"byte_end":444386,"line_start":1058,"line_end":1058,"column_start":9,"column_end":43}},{"value":"/ use chrono::serde::ts_nanoseconds::deserialize as from_nano_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444395,"byte_end":444462,"line_start":1059,"line_end":1059,"column_start":9,"column_end":76}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444471,"byte_end":444497,"line_start":1060,"line_end":1060,"column_start":9,"column_end":35}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444506,"byte_end":444520,"line_start":1061,"line_end":1061,"column_start":9,"column_end":23}},{"value":"/     #[serde(deserialize_with = \"from_nano_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444529,"byte_end":444580,"line_start":1062,"line_end":1062,"column_start":9,"column_end":60}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444589,"byte_end":444616,"line_start":1063,"line_end":1063,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444625,"byte_end":444630,"line_start":1064,"line_end":1064,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444639,"byte_end":444642,"line_start":1065,"line_end":1065,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444651,"byte_end":444703,"line_start":1066,"line_end":1066,"column_start":9,"column_end":61}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355733 }\"#)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444712,"byte_end":444790,"line_start":1067,"line_end":1067,"column_start":9,"column_end":87}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444799,"byte_end":444813,"line_start":1068,"line_end":1068,"column_start":9,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444822,"byte_end":444829,"line_start":1069,"line_end":1069,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444838,"byte_end":444877,"line_start":1070,"line_end":1070,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":444886,"byte_end":444893,"line_start":1071,"line_end":1071,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":1223},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447494,"byte_end":447515,"line_start":1142,"line_end":1142,"column_start":13,"column_end":34},"name":"ts_nanoseconds_option","qualname":"::datetime::serde::ts_nanoseconds_option","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","parent":null,"children":[{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1231},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1239},{"krate":0,"index":1241}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in nanoseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in nanoseconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446181,"byte_end":446234,"line_start":1106,"line_end":1106,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446239,"byte_end":446242,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446247,"byte_end":446300,"line_start":1108,"line_end":1108,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446305,"byte_end":446308,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446313,"byte_end":446327,"line_start":1110,"line_end":1110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446332,"byte_end":446335,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446340,"byte_end":446351,"line_start":1112,"line_end":1112,"column_start":5,"column_end":16}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446356,"byte_end":446429,"line_start":1113,"line_end":1113,"column_start":5,"column_end":78}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446434,"byte_end":446507,"line_start":1114,"line_end":1114,"column_start":5,"column_end":78}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446512,"byte_end":446555,"line_start":1115,"line_end":1115,"column_start":5,"column_end":48}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446560,"byte_end":446565,"line_start":1116,"line_end":1116,"column_start":5,"column_end":10}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446570,"byte_end":446615,"line_start":1117,"line_end":1117,"column_start":5,"column_end":50}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446620,"byte_end":446663,"line_start":1118,"line_end":1118,"column_start":5,"column_end":48}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446668,"byte_end":446694,"line_start":1119,"line_end":1119,"column_start":5,"column_end":31}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446699,"byte_end":446743,"line_start":1120,"line_end":1120,"column_start":5,"column_end":49}},{"value":"/ use chrono::serde::ts_nanoseconds_option;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446748,"byte_end":446793,"line_start":1121,"line_end":1121,"column_start":5,"column_end":50}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446798,"byte_end":446835,"line_start":1122,"line_end":1122,"column_start":5,"column_end":42}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446840,"byte_end":446854,"line_start":1123,"line_end":1123,"column_start":5,"column_end":19}},{"value":"/     #[serde(with = \"ts_nanoseconds_option\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446859,"byte_end":446907,"line_start":1124,"line_end":1124,"column_start":5,"column_end":53}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446912,"byte_end":446947,"line_start":1125,"line_end":1125,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446952,"byte_end":446957,"line_start":1126,"line_end":1126,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446962,"byte_end":446965,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":446970,"byte_end":447022,"line_start":1128,"line_end":1128,"column_start":5,"column_end":57}},{"value":"/ let time = Some(Utc.ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447027,"byte_end":447105,"line_start":1129,"line_end":1129,"column_start":5,"column_end":83}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447110,"byte_end":447128,"line_start":1130,"line_end":1130,"column_start":5,"column_end":23}},{"value":"/     time: time.clone(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447133,"byte_end":447160,"line_start":1131,"line_end":1131,"column_start":5,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447165,"byte_end":447171,"line_start":1132,"line_end":1132,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447176,"byte_end":447179,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447184,"byte_end":447234,"line_start":1134,"line_end":1134,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447239,"byte_end":447300,"line_start":1135,"line_end":1135,"column_start":5,"column_end":66}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447305,"byte_end":447357,"line_start":1136,"line_end":1136,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447362,"byte_end":447394,"line_start":1137,"line_end":1137,"column_start":5,"column_end":37}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447399,"byte_end":447413,"line_start":1138,"line_end":1138,"column_start":5,"column_end":19}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447418,"byte_end":447425,"line_start":1139,"line_end":1139,"column_start":5,"column_end":12}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447430,"byte_end":447469,"line_start":1140,"line_end":1140,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447474,"byte_end":447481,"line_start":1141,"line_end":1141,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":1234},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449058,"byte_end":449067,"line_start":1182,"line_end":1182,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_nanoseconds_option::serialize","value":"fn <S> (opt: &Option<DateTime<Utc>>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of nanoseconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of nanoseconds since the epoch or none","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447680,"byte_end":447770,"line_start":1150,"line_end":1150,"column_start":9,"column_end":99}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447779,"byte_end":447782,"line_start":1151,"line_end":1151,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447791,"byte_end":447853,"line_start":1152,"line_end":1152,"column_start":9,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447862,"byte_end":447865,"line_start":1153,"line_end":1153,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447874,"byte_end":447888,"line_start":1154,"line_end":1154,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447897,"byte_end":447900,"line_start":1155,"line_end":1155,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447909,"byte_end":447920,"line_start":1156,"line_end":1156,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":447929,"byte_end":448002,"line_start":1157,"line_end":1157,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448011,"byte_end":448084,"line_start":1158,"line_end":1158,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448093,"byte_end":448136,"line_start":1159,"line_end":1159,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448145,"byte_end":448150,"line_start":1160,"line_end":1160,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448159,"byte_end":448204,"line_start":1161,"line_end":1161,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448213,"byte_end":448256,"line_start":1162,"line_end":1162,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448265,"byte_end":448291,"line_start":1163,"line_end":1163,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448300,"byte_end":448344,"line_start":1164,"line_end":1164,"column_start":9,"column_end":53}},{"value":"/ use chrono::serde::ts_nanoseconds_option::serialize as to_nano_tsopt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448353,"byte_end":448426,"line_start":1165,"line_end":1165,"column_start":9,"column_end":82}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448435,"byte_end":448459,"line_start":1166,"line_end":1166,"column_start":9,"column_end":33}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448468,"byte_end":448482,"line_start":1167,"line_end":1167,"column_start":9,"column_end":23}},{"value":"/     #[serde(serialize_with = \"to_nano_tsopt\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448491,"byte_end":448541,"line_start":1168,"line_end":1168,"column_start":9,"column_end":59}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448550,"byte_end":448585,"line_start":1169,"line_end":1169,"column_start":9,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448594,"byte_end":448599,"line_start":1170,"line_end":1170,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448608,"byte_end":448611,"line_start":1171,"line_end":1171,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<String, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448620,"byte_end":448677,"line_start":1172,"line_end":1172,"column_start":9,"column_end":66}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448686,"byte_end":448704,"line_start":1173,"line_end":1173,"column_start":9,"column_end":27}},{"value":"/     time: Some(Utc.ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448713,"byte_end":448790,"line_start":1174,"line_end":1174,"column_start":9,"column_end":86}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448799,"byte_end":448805,"line_start":1175,"line_end":1175,"column_start":9,"column_end":15}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448814,"byte_end":448864,"line_start":1176,"line_end":1176,"column_start":9,"column_end":59}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448873,"byte_end":448934,"line_start":1177,"line_end":1177,"column_start":9,"column_end":70}},{"value":"/ # Ok(as_string)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448943,"byte_end":448962,"line_start":1178,"line_end":1178,"column_start":9,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448971,"byte_end":448978,"line_start":1179,"line_end":1179,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":448987,"byte_end":449026,"line_start":1180,"line_end":1180,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449035,"byte_end":449042,"line_start":1181,"line_end":1181,"column_start":9,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1236},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450549,"byte_end":450560,"line_start":1219,"line_end":1219,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_nanoseconds_option::deserialize","value":"fn <'de, D> (d: D) -> Result<Option<DateTime<Utc>>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a nanosecond timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a nanosecond timestamp or none","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449375,"byte_end":449439,"line_start":1191,"line_end":1191,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449448,"byte_end":449451,"line_start":1192,"line_end":1192,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449460,"byte_end":449524,"line_start":1193,"line_end":1193,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449533,"byte_end":449536,"line_start":1194,"line_end":1194,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449545,"byte_end":449559,"line_start":1195,"line_end":1195,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449568,"byte_end":449571,"line_start":1196,"line_end":1196,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449580,"byte_end":449591,"line_start":1197,"line_end":1197,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449600,"byte_end":449673,"line_start":1198,"line_end":1198,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449682,"byte_end":449755,"line_start":1199,"line_end":1199,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449764,"byte_end":449807,"line_start":1200,"line_end":1200,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449816,"byte_end":449821,"line_start":1201,"line_end":1201,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449830,"byte_end":449875,"line_start":1202,"line_end":1202,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449884,"byte_end":449927,"line_start":1203,"line_end":1203,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449936,"byte_end":449962,"line_start":1204,"line_end":1204,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":449971,"byte_end":450005,"line_start":1205,"line_end":1205,"column_start":9,"column_end":43}},{"value":"/ use chrono::serde::ts_nanoseconds_option::deserialize as from_nano_tsopt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450014,"byte_end":450091,"line_start":1206,"line_end":1206,"column_start":9,"column_end":86}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450100,"byte_end":450126,"line_start":1207,"line_end":1207,"column_start":9,"column_end":35}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450135,"byte_end":450149,"line_start":1208,"line_end":1208,"column_start":9,"column_end":23}},{"value":"/     #[serde(deserialize_with = \"from_nano_tsopt\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450158,"byte_end":450212,"line_start":1209,"line_end":1209,"column_start":9,"column_end":63}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450221,"byte_end":450256,"line_start":1210,"line_end":1210,"column_start":9,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450265,"byte_end":450270,"line_start":1211,"line_end":1211,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450279,"byte_end":450282,"line_start":1212,"line_end":1212,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450291,"byte_end":450343,"line_start":1213,"line_end":1213,"column_start":9,"column_end":61}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355733 }\"#)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450352,"byte_end":450430,"line_start":1214,"line_end":1214,"column_start":9,"column_end":87}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450439,"byte_end":450453,"line_start":1215,"line_end":1215,"column_start":9,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450462,"byte_end":450469,"line_start":1216,"line_end":1216,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450478,"byte_end":450517,"line_start":1217,"line_end":1217,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450526,"byte_end":450533,"line_start":1218,"line_end":1218,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":1250},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452962,"byte_end":452977,"line_start":1288,"line_end":1288,"column_start":13,"column_end":28},"name":"ts_milliseconds","qualname":"::datetime::serde::ts_milliseconds","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1255},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1268}],"decl_id":null,"docs":" Ser/de to/from timestamps in milliseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from timestamps in milliseconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":451696,"byte_end":451741,"line_start":1252,"line_end":1252,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":451746,"byte_end":451749,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":451754,"byte_end":451806,"line_start":1254,"line_end":1254,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":451811,"byte_end":451814,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":451819,"byte_end":451832,"line_start":1256,"line_end":1256,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":451837,"byte_end":451840,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":451845,"byte_end":451856,"line_start":1258,"line_end":1258,"column_start":5,"column_end":16}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":451861,"byte_end":451934,"line_start":1259,"line_end":1259,"column_start":5,"column_end":78}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":451939,"byte_end":452012,"line_start":1260,"line_end":1260,"column_start":5,"column_end":78}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452017,"byte_end":452060,"line_start":1261,"line_end":1261,"column_start":5,"column_end":48}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452065,"byte_end":452070,"line_start":1262,"line_end":1262,"column_start":5,"column_end":10}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452075,"byte_end":452120,"line_start":1263,"line_end":1263,"column_start":5,"column_end":50}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452125,"byte_end":452168,"line_start":1264,"line_end":1264,"column_start":5,"column_end":48}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452173,"byte_end":452199,"line_start":1265,"line_end":1265,"column_start":5,"column_end":31}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452204,"byte_end":452248,"line_start":1266,"line_end":1266,"column_start":5,"column_end":49}},{"value":"/ use chrono::serde::ts_milliseconds;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452253,"byte_end":452292,"line_start":1267,"line_end":1267,"column_start":5,"column_end":44}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452297,"byte_end":452334,"line_start":1268,"line_end":1268,"column_start":5,"column_end":42}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452339,"byte_end":452353,"line_start":1269,"line_end":1269,"column_start":5,"column_end":19}},{"value":"/     #[serde(with = \"ts_milliseconds\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452358,"byte_end":452400,"line_start":1270,"line_end":1270,"column_start":5,"column_end":47}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452405,"byte_end":452432,"line_start":1271,"line_end":1271,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452437,"byte_end":452442,"line_start":1272,"line_end":1272,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452447,"byte_end":452450,"line_start":1273,"line_end":1273,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452455,"byte_end":452507,"line_start":1274,"line_end":1274,"column_start":5,"column_end":57}},{"value":"/ let time = Utc.ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452512,"byte_end":452579,"line_start":1275,"line_end":1275,"column_start":5,"column_end":72}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452584,"byte_end":452602,"line_start":1276,"line_end":1276,"column_start":5,"column_end":23}},{"value":"/     time: time.clone(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452607,"byte_end":452634,"line_start":1277,"line_end":1277,"column_start":5,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452639,"byte_end":452645,"line_start":1278,"line_end":1278,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452650,"byte_end":452653,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452658,"byte_end":452708,"line_start":1280,"line_end":1280,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452713,"byte_end":452768,"line_start":1281,"line_end":1281,"column_start":5,"column_end":60}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452773,"byte_end":452825,"line_start":1282,"line_end":1282,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452830,"byte_end":452862,"line_start":1283,"line_end":1283,"column_start":5,"column_end":37}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452867,"byte_end":452881,"line_start":1284,"line_end":1284,"column_start":5,"column_end":19}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452886,"byte_end":452893,"line_start":1285,"line_end":1285,"column_start":5,"column_end":12}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452898,"byte_end":452937,"line_start":1286,"line_end":1286,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":452942,"byte_end":452949,"line_start":1287,"line_end":1287,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":1262},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454505,"byte_end":454514,"line_start":1329,"line_end":1329,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_milliseconds::serialize","value":"fn <S> (dt: &DateTime<Utc>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of milliseconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of milliseconds since the epoch","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453169,"byte_end":453252,"line_start":1297,"line_end":1297,"column_start":9,"column_end":92}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453261,"byte_end":453264,"line_start":1298,"line_end":1298,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453273,"byte_end":453335,"line_start":1299,"line_end":1299,"column_start":9,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453344,"byte_end":453347,"line_start":1300,"line_end":1300,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453356,"byte_end":453370,"line_start":1301,"line_end":1301,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453379,"byte_end":453382,"line_start":1302,"line_end":1302,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453391,"byte_end":453402,"line_start":1303,"line_end":1303,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453411,"byte_end":453484,"line_start":1304,"line_end":1304,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453493,"byte_end":453566,"line_start":1305,"line_end":1305,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453575,"byte_end":453618,"line_start":1306,"line_end":1306,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453627,"byte_end":453632,"line_start":1307,"line_end":1307,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453641,"byte_end":453686,"line_start":1308,"line_end":1308,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453695,"byte_end":453738,"line_start":1309,"line_end":1309,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453747,"byte_end":453773,"line_start":1310,"line_end":1310,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453782,"byte_end":453826,"line_start":1311,"line_end":1311,"column_start":9,"column_end":53}},{"value":"/ use chrono::serde::ts_milliseconds::serialize as to_milli_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453835,"byte_end":453900,"line_start":1312,"line_end":1312,"column_start":9,"column_end":74}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453909,"byte_end":453933,"line_start":1313,"line_end":1313,"column_start":9,"column_end":33}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453942,"byte_end":453956,"line_start":1314,"line_end":1314,"column_start":9,"column_end":23}},{"value":"/     #[serde(serialize_with = \"to_milli_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":453965,"byte_end":454013,"line_start":1315,"line_end":1315,"column_start":9,"column_end":57}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454022,"byte_end":454049,"line_start":1316,"line_end":1316,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454058,"byte_end":454063,"line_start":1317,"line_end":1317,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454072,"byte_end":454075,"line_start":1318,"line_end":1318,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<String, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454084,"byte_end":454141,"line_start":1319,"line_end":1319,"column_start":9,"column_end":66}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454150,"byte_end":454168,"line_start":1320,"line_end":1320,"column_start":9,"column_end":27}},{"value":"/     time: Utc.ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454177,"byte_end":454243,"line_start":1321,"line_end":1321,"column_start":9,"column_end":75}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454252,"byte_end":454258,"line_start":1322,"line_end":1322,"column_start":9,"column_end":15}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454267,"byte_end":454317,"line_start":1323,"line_end":1323,"column_start":9,"column_end":59}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454326,"byte_end":454381,"line_start":1324,"line_end":1324,"column_start":9,"column_end":64}},{"value":"/ # Ok(as_string)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454390,"byte_end":454409,"line_start":1325,"line_end":1325,"column_start":9,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454418,"byte_end":454425,"line_start":1326,"line_end":1326,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454434,"byte_end":454473,"line_start":1327,"line_end":1327,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454482,"byte_end":454489,"line_start":1328,"line_end":1328,"column_start":9,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1264},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455849,"byte_end":455860,"line_start":1363,"line_end":1363,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_milliseconds::deserialize","value":"fn <'de, D> (d: D) -> Result<DateTime<Utc>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a millisecond timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a millisecond timestamp","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454706,"byte_end":454763,"line_start":1335,"line_end":1335,"column_start":9,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454772,"byte_end":454775,"line_start":1336,"line_end":1336,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454784,"byte_end":454848,"line_start":1337,"line_end":1337,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454857,"byte_end":454860,"line_start":1338,"line_end":1338,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454869,"byte_end":454883,"line_start":1339,"line_end":1339,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454892,"byte_end":454895,"line_start":1340,"line_end":1340,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454904,"byte_end":454915,"line_start":1341,"line_end":1341,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":454924,"byte_end":454997,"line_start":1342,"line_end":1342,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455006,"byte_end":455079,"line_start":1343,"line_end":1343,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455088,"byte_end":455131,"line_start":1344,"line_end":1344,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455140,"byte_end":455145,"line_start":1345,"line_end":1345,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455154,"byte_end":455199,"line_start":1346,"line_end":1346,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455208,"byte_end":455251,"line_start":1347,"line_end":1347,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455260,"byte_end":455286,"line_start":1348,"line_end":1348,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455295,"byte_end":455329,"line_start":1349,"line_end":1349,"column_start":9,"column_end":43}},{"value":"/ use chrono::serde::ts_milliseconds::deserialize as from_milli_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455338,"byte_end":455407,"line_start":1350,"line_end":1350,"column_start":9,"column_end":78}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455416,"byte_end":455442,"line_start":1351,"line_end":1351,"column_start":9,"column_end":35}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455451,"byte_end":455465,"line_start":1352,"line_end":1352,"column_start":9,"column_end":23}},{"value":"/     #[serde(deserialize_with = \"from_milli_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455474,"byte_end":455526,"line_start":1353,"line_end":1353,"column_start":9,"column_end":61}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455535,"byte_end":455562,"line_start":1354,"line_end":1354,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455571,"byte_end":455576,"line_start":1355,"line_end":1355,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455585,"byte_end":455588,"line_start":1356,"line_end":1356,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455597,"byte_end":455649,"line_start":1357,"line_end":1357,"column_start":9,"column_end":61}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918 }\"#)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455658,"byte_end":455730,"line_start":1358,"line_end":1358,"column_start":9,"column_end":81}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455739,"byte_end":455753,"line_start":1359,"line_end":1359,"column_start":9,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455762,"byte_end":455769,"line_start":1360,"line_end":1360,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455778,"byte_end":455817,"line_start":1361,"line_end":1361,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":455826,"byte_end":455833,"line_start":1362,"line_end":1362,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":1276},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458452,"byte_end":458474,"line_start":1433,"line_end":1433,"column_start":13,"column_end":35},"name":"ts_milliseconds_option","qualname":"::datetime::serde::ts_milliseconds_option","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1284},{"krate":0,"index":1287},{"krate":0,"index":1289},{"krate":0,"index":1294},{"krate":0,"index":1296}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in milliseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in milliseconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457149,"byte_end":457203,"line_start":1397,"line_end":1397,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457208,"byte_end":457211,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457216,"byte_end":457268,"line_start":1399,"line_end":1399,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457273,"byte_end":457276,"line_start":1400,"line_end":1400,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457281,"byte_end":457294,"line_start":1401,"line_end":1401,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457299,"byte_end":457302,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457307,"byte_end":457318,"line_start":1403,"line_end":1403,"column_start":5,"column_end":16}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457323,"byte_end":457396,"line_start":1404,"line_end":1404,"column_start":5,"column_end":78}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457401,"byte_end":457474,"line_start":1405,"line_end":1405,"column_start":5,"column_end":78}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457479,"byte_end":457522,"line_start":1406,"line_end":1406,"column_start":5,"column_end":48}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457527,"byte_end":457532,"line_start":1407,"line_end":1407,"column_start":5,"column_end":10}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457537,"byte_end":457582,"line_start":1408,"line_end":1408,"column_start":5,"column_end":50}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457587,"byte_end":457630,"line_start":1409,"line_end":1409,"column_start":5,"column_end":48}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457635,"byte_end":457661,"line_start":1410,"line_end":1410,"column_start":5,"column_end":31}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457666,"byte_end":457710,"line_start":1411,"line_end":1411,"column_start":5,"column_end":49}},{"value":"/ use chrono::serde::ts_milliseconds_option;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457715,"byte_end":457761,"line_start":1412,"line_end":1412,"column_start":5,"column_end":51}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457766,"byte_end":457803,"line_start":1413,"line_end":1413,"column_start":5,"column_end":42}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457808,"byte_end":457822,"line_start":1414,"line_end":1414,"column_start":5,"column_end":19}},{"value":"/     #[serde(with = \"ts_milliseconds_option\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457827,"byte_end":457876,"line_start":1415,"line_end":1415,"column_start":5,"column_end":54}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457881,"byte_end":457916,"line_start":1416,"line_end":1416,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457921,"byte_end":457926,"line_start":1417,"line_end":1417,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457931,"byte_end":457934,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457939,"byte_end":457991,"line_start":1419,"line_end":1419,"column_start":5,"column_end":57}},{"value":"/ let time = Some(Utc.ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":457996,"byte_end":458069,"line_start":1420,"line_end":1420,"column_start":5,"column_end":78}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458074,"byte_end":458092,"line_start":1421,"line_end":1421,"column_start":5,"column_end":23}},{"value":"/     time: time.clone(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458097,"byte_end":458124,"line_start":1422,"line_end":1422,"column_start":5,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458129,"byte_end":458135,"line_start":1423,"line_end":1423,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458140,"byte_end":458143,"line_start":1424,"line_end":1424,"column_start":5,"column_end":8}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458148,"byte_end":458198,"line_start":1425,"line_end":1425,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458203,"byte_end":458258,"line_start":1426,"line_end":1426,"column_start":5,"column_end":60}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458263,"byte_end":458315,"line_start":1427,"line_end":1427,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458320,"byte_end":458352,"line_start":1428,"line_end":1428,"column_start":5,"column_end":37}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458357,"byte_end":458371,"line_start":1429,"line_end":1429,"column_start":5,"column_end":19}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458376,"byte_end":458383,"line_start":1430,"line_end":1430,"column_start":5,"column_end":12}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458388,"byte_end":458427,"line_start":1431,"line_end":1431,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458432,"byte_end":458439,"line_start":1432,"line_end":1432,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":1287},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460012,"byte_end":460021,"line_start":1473,"line_end":1473,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_milliseconds_option::serialize","value":"fn <S> (opt: &Option<DateTime<Utc>>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of milliseconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of milliseconds since the epoch or none","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458641,"byte_end":458732,"line_start":1441,"line_end":1441,"column_start":9,"column_end":100}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458741,"byte_end":458744,"line_start":1442,"line_end":1442,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458753,"byte_end":458815,"line_start":1443,"line_end":1443,"column_start":9,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458824,"byte_end":458827,"line_start":1444,"line_end":1444,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458836,"byte_end":458850,"line_start":1445,"line_end":1445,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458859,"byte_end":458862,"line_start":1446,"line_end":1446,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458871,"byte_end":458882,"line_start":1447,"line_end":1447,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458891,"byte_end":458964,"line_start":1448,"line_end":1448,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":458973,"byte_end":459046,"line_start":1449,"line_end":1449,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459055,"byte_end":459098,"line_start":1450,"line_end":1450,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459107,"byte_end":459112,"line_start":1451,"line_end":1451,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459121,"byte_end":459166,"line_start":1452,"line_end":1452,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459175,"byte_end":459218,"line_start":1453,"line_end":1453,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459227,"byte_end":459253,"line_start":1454,"line_end":1454,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459262,"byte_end":459306,"line_start":1455,"line_end":1455,"column_start":9,"column_end":53}},{"value":"/ use chrono::serde::ts_milliseconds_option::serialize as to_milli_tsopt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459315,"byte_end":459390,"line_start":1456,"line_end":1456,"column_start":9,"column_end":84}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459399,"byte_end":459423,"line_start":1457,"line_end":1457,"column_start":9,"column_end":33}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459432,"byte_end":459446,"line_start":1458,"line_end":1458,"column_start":9,"column_end":23}},{"value":"/     #[serde(serialize_with = \"to_milli_tsopt\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459455,"byte_end":459506,"line_start":1459,"line_end":1459,"column_start":9,"column_end":60}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459515,"byte_end":459550,"line_start":1460,"line_end":1460,"column_start":9,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459559,"byte_end":459564,"line_start":1461,"line_end":1461,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459573,"byte_end":459576,"line_start":1462,"line_end":1462,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<String, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459585,"byte_end":459642,"line_start":1463,"line_end":1463,"column_start":9,"column_end":66}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459651,"byte_end":459669,"line_start":1464,"line_end":1464,"column_start":9,"column_end":27}},{"value":"/     time: Some(Utc.ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459678,"byte_end":459750,"line_start":1465,"line_end":1465,"column_start":9,"column_end":81}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459759,"byte_end":459765,"line_start":1466,"line_end":1466,"column_start":9,"column_end":15}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459774,"byte_end":459824,"line_start":1467,"line_end":1467,"column_start":9,"column_end":59}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459833,"byte_end":459888,"line_start":1468,"line_end":1468,"column_start":9,"column_end":64}},{"value":"/ # Ok(as_string)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459897,"byte_end":459916,"line_start":1469,"line_end":1469,"column_start":9,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459925,"byte_end":459932,"line_start":1470,"line_end":1470,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459941,"byte_end":459980,"line_start":1471,"line_end":1471,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":459989,"byte_end":459996,"line_start":1472,"line_end":1472,"column_start":9,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1289},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461502,"byte_end":461513,"line_start":1510,"line_end":1510,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_milliseconds_option::deserialize","value":"fn <'de, D> (d: D) -> Result<Option<DateTime<Utc>>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a millisecond timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a millisecond timestamp or none","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460330,"byte_end":460395,"line_start":1482,"line_end":1482,"column_start":9,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460404,"byte_end":460407,"line_start":1483,"line_end":1483,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460416,"byte_end":460480,"line_start":1484,"line_end":1484,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460489,"byte_end":460492,"line_start":1485,"line_end":1485,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460501,"byte_end":460515,"line_start":1486,"line_end":1486,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460524,"byte_end":460527,"line_start":1487,"line_end":1487,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460536,"byte_end":460547,"line_start":1488,"line_end":1488,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460556,"byte_end":460629,"line_start":1489,"line_end":1489,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460638,"byte_end":460711,"line_start":1490,"line_end":1490,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460720,"byte_end":460763,"line_start":1491,"line_end":1491,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460772,"byte_end":460777,"line_start":1492,"line_end":1492,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460786,"byte_end":460831,"line_start":1493,"line_end":1493,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460840,"byte_end":460883,"line_start":1494,"line_end":1494,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460892,"byte_end":460918,"line_start":1495,"line_end":1495,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460927,"byte_end":460961,"line_start":1496,"line_end":1496,"column_start":9,"column_end":43}},{"value":"/ use chrono::serde::ts_milliseconds_option::deserialize as from_milli_tsopt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":460970,"byte_end":461049,"line_start":1497,"line_end":1497,"column_start":9,"column_end":88}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461058,"byte_end":461084,"line_start":1498,"line_end":1498,"column_start":9,"column_end":35}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461093,"byte_end":461107,"line_start":1499,"line_end":1499,"column_start":9,"column_end":23}},{"value":"/     #[serde(deserialize_with = \"from_milli_tsopt\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461116,"byte_end":461171,"line_start":1500,"line_end":1500,"column_start":9,"column_end":64}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461180,"byte_end":461215,"line_start":1501,"line_end":1501,"column_start":9,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461224,"byte_end":461229,"line_start":1502,"line_end":1502,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461238,"byte_end":461241,"line_start":1503,"line_end":1503,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461250,"byte_end":461302,"line_start":1504,"line_end":1504,"column_start":9,"column_end":61}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918 }\"#)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461311,"byte_end":461383,"line_start":1505,"line_end":1505,"column_start":9,"column_end":81}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461392,"byte_end":461406,"line_start":1506,"line_end":1506,"column_start":9,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461415,"byte_end":461422,"line_start":1507,"line_end":1507,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461431,"byte_end":461470,"line_start":1508,"line_end":1508,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461479,"byte_end":461486,"line_start":1509,"line_end":1509,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":1305},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463939,"byte_end":463949,"line_start":1579,"line_end":1579,"column_start":13,"column_end":23},"name":"ts_seconds","qualname":"::datetime::serde::ts_seconds","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1310},{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1317},{"krate":0,"index":1319},{"krate":0,"index":1322}],"decl_id":null,"docs":" Ser/de to/from timestamps in seconds","sig":null,"attributes":[{"value":"/ Ser/de to/from timestamps in seconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":462702,"byte_end":462742,"line_start":1543,"line_end":1543,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":462747,"byte_end":462750,"line_start":1544,"line_end":1544,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":462755,"byte_end":462808,"line_start":1545,"line_end":1545,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":462813,"byte_end":462816,"line_start":1546,"line_end":1546,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":462821,"byte_end":462835,"line_start":1547,"line_end":1547,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":462840,"byte_end":462843,"line_start":1548,"line_end":1548,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":462848,"byte_end":462859,"line_start":1549,"line_end":1549,"column_start":5,"column_end":16}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":462864,"byte_end":462937,"line_start":1550,"line_end":1550,"column_start":5,"column_end":78}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":462942,"byte_end":463015,"line_start":1551,"line_end":1551,"column_start":5,"column_end":78}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463020,"byte_end":463063,"line_start":1552,"line_end":1552,"column_start":5,"column_end":48}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463068,"byte_end":463073,"line_start":1553,"line_end":1553,"column_start":5,"column_end":10}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463078,"byte_end":463123,"line_start":1554,"line_end":1554,"column_start":5,"column_end":50}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463128,"byte_end":463171,"line_start":1555,"line_end":1555,"column_start":5,"column_end":48}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463176,"byte_end":463202,"line_start":1556,"line_end":1556,"column_start":5,"column_end":31}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463207,"byte_end":463251,"line_start":1557,"line_end":1557,"column_start":5,"column_end":49}},{"value":"/ use chrono::serde::ts_seconds;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463256,"byte_end":463290,"line_start":1558,"line_end":1558,"column_start":5,"column_end":39}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463295,"byte_end":463332,"line_start":1559,"line_end":1559,"column_start":5,"column_end":42}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463337,"byte_end":463351,"line_start":1560,"line_end":1560,"column_start":5,"column_end":19}},{"value":"/     #[serde(with = \"ts_seconds\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463356,"byte_end":463393,"line_start":1561,"line_end":1561,"column_start":5,"column_end":42}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463398,"byte_end":463425,"line_start":1562,"line_end":1562,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463430,"byte_end":463435,"line_start":1563,"line_end":1563,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463440,"byte_end":463443,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463448,"byte_end":463500,"line_start":1565,"line_end":1565,"column_start":5,"column_end":57}},{"value":"/ let time = Utc.ymd(2015, 5, 15).and_hms(10, 0, 0);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463505,"byte_end":463559,"line_start":1566,"line_end":1566,"column_start":5,"column_end":59}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463564,"byte_end":463582,"line_start":1567,"line_end":1567,"column_start":5,"column_end":23}},{"value":"/     time: time.clone(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463587,"byte_end":463614,"line_start":1568,"line_end":1568,"column_start":5,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463619,"byte_end":463625,"line_start":1569,"line_end":1569,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463630,"byte_end":463633,"line_start":1570,"line_end":1570,"column_start":5,"column_end":8}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463638,"byte_end":463688,"line_start":1571,"line_end":1571,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463693,"byte_end":463745,"line_start":1572,"line_end":1572,"column_start":5,"column_end":57}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463750,"byte_end":463802,"line_start":1573,"line_end":1573,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463807,"byte_end":463839,"line_start":1574,"line_end":1574,"column_start":5,"column_end":37}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463844,"byte_end":463858,"line_start":1575,"line_end":1575,"column_start":5,"column_end":19}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463863,"byte_end":463870,"line_start":1576,"line_end":1576,"column_start":5,"column_end":12}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463875,"byte_end":463914,"line_start":1577,"line_end":1577,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":463919,"byte_end":463926,"line_start":1578,"line_end":1578,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":1317},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465434,"byte_end":465443,"line_start":1620,"line_end":1620,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_seconds::serialize","value":"fn <S> (dt: &DateTime<Utc>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of seconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of seconds since the epoch","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464136,"byte_end":464214,"line_start":1588,"line_end":1588,"column_start":9,"column_end":87}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464223,"byte_end":464226,"line_start":1589,"line_end":1589,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464235,"byte_end":464297,"line_start":1590,"line_end":1590,"column_start":9,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464306,"byte_end":464309,"line_start":1591,"line_end":1591,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464318,"byte_end":464332,"line_start":1592,"line_end":1592,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464341,"byte_end":464344,"line_start":1593,"line_end":1593,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464353,"byte_end":464364,"line_start":1594,"line_end":1594,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464373,"byte_end":464446,"line_start":1595,"line_end":1595,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464455,"byte_end":464528,"line_start":1596,"line_end":1596,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464537,"byte_end":464580,"line_start":1597,"line_end":1597,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464589,"byte_end":464594,"line_start":1598,"line_end":1598,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464603,"byte_end":464648,"line_start":1599,"line_end":1599,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464657,"byte_end":464700,"line_start":1600,"line_end":1600,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464709,"byte_end":464735,"line_start":1601,"line_end":1601,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464744,"byte_end":464788,"line_start":1602,"line_end":1602,"column_start":9,"column_end":53}},{"value":"/ use chrono::serde::ts_seconds::serialize as to_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464797,"byte_end":464851,"line_start":1603,"line_end":1603,"column_start":9,"column_end":63}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464860,"byte_end":464884,"line_start":1604,"line_end":1604,"column_start":9,"column_end":33}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464893,"byte_end":464907,"line_start":1605,"line_end":1605,"column_start":9,"column_end":23}},{"value":"/     #[serde(serialize_with = \"to_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464916,"byte_end":464958,"line_start":1606,"line_end":1606,"column_start":9,"column_end":51}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":464967,"byte_end":464994,"line_start":1607,"line_end":1607,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465003,"byte_end":465008,"line_start":1608,"line_end":1608,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465017,"byte_end":465020,"line_start":1609,"line_end":1609,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<String, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465029,"byte_end":465086,"line_start":1610,"line_end":1610,"column_start":9,"column_end":66}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465095,"byte_end":465113,"line_start":1611,"line_end":1611,"column_start":9,"column_end":27}},{"value":"/     time: Utc.ymd(2015, 5, 15).and_hms(10, 0, 0),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465122,"byte_end":465175,"line_start":1612,"line_end":1612,"column_start":9,"column_end":62}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465184,"byte_end":465190,"line_start":1613,"line_end":1613,"column_start":9,"column_end":15}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465199,"byte_end":465249,"line_start":1614,"line_end":1614,"column_start":9,"column_end":59}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465258,"byte_end":465310,"line_start":1615,"line_end":1615,"column_start":9,"column_end":61}},{"value":"/ # Ok(as_string)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465319,"byte_end":465338,"line_start":1616,"line_end":1616,"column_start":9,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465347,"byte_end":465354,"line_start":1617,"line_end":1617,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465363,"byte_end":465402,"line_start":1618,"line_end":1618,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465411,"byte_end":465418,"line_start":1619,"line_end":1619,"column_start":9,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1319},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466747,"byte_end":466758,"line_start":1654,"line_end":1654,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_seconds::deserialize","value":"fn <'de, D> (d: D) -> Result<DateTime<Utc>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a seconds timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a seconds timestamp","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465628,"byte_end":465681,"line_start":1626,"line_end":1626,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465690,"byte_end":465693,"line_start":1627,"line_end":1627,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465702,"byte_end":465766,"line_start":1628,"line_end":1628,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465775,"byte_end":465778,"line_start":1629,"line_end":1629,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465787,"byte_end":465801,"line_start":1630,"line_end":1630,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465810,"byte_end":465813,"line_start":1631,"line_end":1631,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465822,"byte_end":465833,"line_start":1632,"line_end":1632,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465842,"byte_end":465915,"line_start":1633,"line_end":1633,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":465924,"byte_end":465997,"line_start":1634,"line_end":1634,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466006,"byte_end":466049,"line_start":1635,"line_end":1635,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466058,"byte_end":466063,"line_start":1636,"line_end":1636,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466072,"byte_end":466117,"line_start":1637,"line_end":1637,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466126,"byte_end":466169,"line_start":1638,"line_end":1638,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466178,"byte_end":466204,"line_start":1639,"line_end":1639,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466213,"byte_end":466247,"line_start":1640,"line_end":1640,"column_start":9,"column_end":43}},{"value":"/ use chrono::serde::ts_seconds::deserialize as from_ts;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466256,"byte_end":466314,"line_start":1641,"line_end":1641,"column_start":9,"column_end":67}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466323,"byte_end":466349,"line_start":1642,"line_end":1642,"column_start":9,"column_end":35}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466358,"byte_end":466372,"line_start":1643,"line_end":1643,"column_start":9,"column_end":23}},{"value":"/     #[serde(deserialize_with = \"from_ts\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466381,"byte_end":466427,"line_start":1644,"line_end":1644,"column_start":9,"column_end":55}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466436,"byte_end":466463,"line_start":1645,"line_end":1645,"column_start":9,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466472,"byte_end":466477,"line_start":1646,"line_end":1646,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466486,"byte_end":466489,"line_start":1647,"line_end":1647,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466498,"byte_end":466550,"line_start":1648,"line_end":1648,"column_start":9,"column_end":61}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1431684000 }\"#)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466559,"byte_end":466628,"line_start":1649,"line_end":1649,"column_start":9,"column_end":78}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466637,"byte_end":466651,"line_start":1650,"line_end":1650,"column_start":9,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466660,"byte_end":466667,"line_start":1651,"line_end":1651,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466676,"byte_end":466715,"line_start":1652,"line_end":1652,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466724,"byte_end":466731,"line_start":1653,"line_end":1653,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":1330},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469052,"byte_end":469069,"line_start":1720,"line_end":1720,"column_start":13,"column_end":30},"name":"ts_seconds_option","qualname":"::datetime::serde::ts_seconds_option","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1335},{"krate":0,"index":1338},{"krate":0,"index":1341},{"krate":0,"index":1343},{"krate":0,"index":1346},{"krate":0,"index":1348}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in seconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in seconds","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":467778,"byte_end":467827,"line_start":1684,"line_end":1684,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":467832,"byte_end":467835,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":467840,"byte_end":467893,"line_start":1686,"line_end":1686,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":467898,"byte_end":467901,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":467906,"byte_end":467920,"line_start":1688,"line_end":1688,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":467925,"byte_end":467928,"line_start":1689,"line_end":1689,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":467933,"byte_end":467944,"line_start":1690,"line_end":1690,"column_start":5,"column_end":16}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":467949,"byte_end":468022,"line_start":1691,"line_end":1691,"column_start":5,"column_end":78}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468027,"byte_end":468100,"line_start":1692,"line_end":1692,"column_start":5,"column_end":78}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468105,"byte_end":468148,"line_start":1693,"line_end":1693,"column_start":5,"column_end":48}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468153,"byte_end":468158,"line_start":1694,"line_end":1694,"column_start":5,"column_end":10}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468163,"byte_end":468208,"line_start":1695,"line_end":1695,"column_start":5,"column_end":50}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468213,"byte_end":468256,"line_start":1696,"line_end":1696,"column_start":5,"column_end":48}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468261,"byte_end":468287,"line_start":1697,"line_end":1697,"column_start":5,"column_end":31}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468292,"byte_end":468336,"line_start":1698,"line_end":1698,"column_start":5,"column_end":49}},{"value":"/ use chrono::serde::ts_seconds_option;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468341,"byte_end":468382,"line_start":1699,"line_end":1699,"column_start":5,"column_end":46}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468387,"byte_end":468424,"line_start":1700,"line_end":1700,"column_start":5,"column_end":42}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468429,"byte_end":468443,"line_start":1701,"line_end":1701,"column_start":5,"column_end":19}},{"value":"/     #[serde(with = \"ts_seconds_option\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468448,"byte_end":468492,"line_start":1702,"line_end":1702,"column_start":5,"column_end":49}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468497,"byte_end":468532,"line_start":1703,"line_end":1703,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468537,"byte_end":468542,"line_start":1704,"line_end":1704,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468547,"byte_end":468550,"line_start":1705,"line_end":1705,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468555,"byte_end":468607,"line_start":1706,"line_end":1706,"column_start":5,"column_end":57}},{"value":"/ let time = Some(Utc.ymd(2015, 5, 15).and_hms(10, 0, 0));","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468612,"byte_end":468672,"line_start":1707,"line_end":1707,"column_start":5,"column_end":65}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468677,"byte_end":468695,"line_start":1708,"line_end":1708,"column_start":5,"column_end":23}},{"value":"/     time: time.clone(),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468700,"byte_end":468727,"line_start":1709,"line_end":1709,"column_start":5,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468732,"byte_end":468738,"line_start":1710,"line_end":1710,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468743,"byte_end":468746,"line_start":1711,"line_end":1711,"column_start":5,"column_end":8}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468751,"byte_end":468801,"line_start":1712,"line_end":1712,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468806,"byte_end":468858,"line_start":1713,"line_end":1713,"column_start":5,"column_end":57}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468863,"byte_end":468915,"line_start":1714,"line_end":1714,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468920,"byte_end":468952,"line_start":1715,"line_end":1715,"column_start":5,"column_end":37}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468957,"byte_end":468971,"line_start":1716,"line_end":1716,"column_start":5,"column_end":19}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468976,"byte_end":468983,"line_start":1717,"line_end":1717,"column_start":5,"column_end":12}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":468988,"byte_end":469027,"line_start":1718,"line_end":1718,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469032,"byte_end":469039,"line_start":1719,"line_end":1719,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":1341},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470559,"byte_end":470568,"line_start":1760,"line_end":1760,"column_start":16,"column_end":25},"name":"serialize","qualname":"::datetime::serde::ts_seconds_option::serialize","value":"fn <S> (opt: &Option<DateTime<Utc>>, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of seconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of seconds since the epoch or none","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469226,"byte_end":469312,"line_start":1728,"line_end":1728,"column_start":9,"column_end":95}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469321,"byte_end":469324,"line_start":1729,"line_end":1729,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469333,"byte_end":469395,"line_start":1730,"line_end":1730,"column_start":9,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469404,"byte_end":469407,"line_start":1731,"line_end":1731,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469416,"byte_end":469430,"line_start":1732,"line_end":1732,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469439,"byte_end":469442,"line_start":1733,"line_end":1733,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469451,"byte_end":469462,"line_start":1734,"line_end":1734,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469471,"byte_end":469544,"line_start":1735,"line_end":1735,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469553,"byte_end":469626,"line_start":1736,"line_end":1736,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469635,"byte_end":469678,"line_start":1737,"line_end":1737,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469687,"byte_end":469692,"line_start":1738,"line_end":1738,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469701,"byte_end":469746,"line_start":1739,"line_end":1739,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469755,"byte_end":469798,"line_start":1740,"line_end":1740,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469807,"byte_end":469833,"line_start":1741,"line_end":1741,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469842,"byte_end":469886,"line_start":1742,"line_end":1742,"column_start":9,"column_end":53}},{"value":"/ use chrono::serde::ts_seconds_option::serialize as to_tsopt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469895,"byte_end":469959,"line_start":1743,"line_end":1743,"column_start":9,"column_end":73}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":469968,"byte_end":469992,"line_start":1744,"line_end":1744,"column_start":9,"column_end":33}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470001,"byte_end":470015,"line_start":1745,"line_end":1745,"column_start":9,"column_end":23}},{"value":"/     #[serde(serialize_with = \"to_tsopt\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470024,"byte_end":470069,"line_start":1746,"line_end":1746,"column_start":9,"column_end":54}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470078,"byte_end":470113,"line_start":1747,"line_end":1747,"column_start":9,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470122,"byte_end":470127,"line_start":1748,"line_end":1748,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470136,"byte_end":470139,"line_start":1749,"line_end":1749,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<String, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470148,"byte_end":470205,"line_start":1750,"line_end":1750,"column_start":9,"column_end":66}},{"value":"/ let my_s = S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470214,"byte_end":470232,"line_start":1751,"line_end":1751,"column_start":9,"column_end":27}},{"value":"/     time: Some(Utc.ymd(2015, 5, 15).and_hms(10, 0, 0)),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470241,"byte_end":470300,"line_start":1752,"line_end":1752,"column_start":9,"column_end":68}},{"value":"/ };","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470309,"byte_end":470315,"line_start":1753,"line_end":1753,"column_start":9,"column_end":15}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470324,"byte_end":470374,"line_start":1754,"line_end":1754,"column_start":9,"column_end":59}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470383,"byte_end":470435,"line_start":1755,"line_end":1755,"column_start":9,"column_end":61}},{"value":"/ # Ok(as_string)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470444,"byte_end":470463,"line_start":1756,"line_end":1756,"column_start":9,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470472,"byte_end":470479,"line_start":1757,"line_end":1757,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470488,"byte_end":470527,"line_start":1758,"line_end":1758,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470536,"byte_end":470543,"line_start":1759,"line_end":1759,"column_start":9,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1343},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":472020,"byte_end":472031,"line_start":1797,"line_end":1797,"column_start":16,"column_end":27},"name":"deserialize","qualname":"::datetime::serde::ts_seconds_option::deserialize","value":"fn <'de, D> (d: D) -> Result<Option<DateTime<Utc>>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a seconds timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a seconds timestamp or none","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470872,"byte_end":470933,"line_start":1769,"line_end":1769,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470942,"byte_end":470945,"line_start":1770,"line_end":1770,"column_start":9,"column_end":12}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":470954,"byte_end":471018,"line_start":1771,"line_end":1771,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471027,"byte_end":471030,"line_start":1772,"line_end":1772,"column_start":9,"column_end":12}},{"value":"/ # Example:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471039,"byte_end":471053,"line_start":1773,"line_end":1773,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471062,"byte_end":471065,"line_start":1774,"line_end":1774,"column_start":9,"column_end":12}},{"value":"/ ```rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471074,"byte_end":471085,"line_start":1775,"line_end":1775,"column_start":9,"column_end":20}},{"value":"/ # // We mark this ignored so that we can test on 1.13 (which does not","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471094,"byte_end":471167,"line_start":1776,"line_end":1776,"column_start":9,"column_end":82}},{"value":"/ # // support custom derive), and run tests with --ignored on beta and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471176,"byte_end":471249,"line_start":1777,"line_end":1777,"column_start":9,"column_end":82}},{"value":"/ # // nightly to actually trigger these.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471258,"byte_end":471301,"line_start":1778,"line_end":1778,"column_start":9,"column_end":52}},{"value":"/ #","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471310,"byte_end":471315,"line_start":1779,"line_end":1779,"column_start":9,"column_end":14}},{"value":"/ # #[macro_use] extern crate serde_derive;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471324,"byte_end":471369,"line_start":1780,"line_end":1780,"column_start":9,"column_end":54}},{"value":"/ # #[macro_use] extern crate serde_json;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471378,"byte_end":471421,"line_start":1781,"line_end":1781,"column_start":9,"column_end":52}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471430,"byte_end":471456,"line_start":1782,"line_end":1782,"column_start":9,"column_end":35}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471465,"byte_end":471499,"line_start":1783,"line_end":1783,"column_start":9,"column_end":43}},{"value":"/ use chrono::serde::ts_seconds_option::deserialize as from_tsopt;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471508,"byte_end":471576,"line_start":1784,"line_end":1784,"column_start":9,"column_end":77}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471585,"byte_end":471611,"line_start":1785,"line_end":1785,"column_start":9,"column_end":35}},{"value":"/ struct S {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471620,"byte_end":471634,"line_start":1786,"line_end":1786,"column_start":9,"column_end":23}},{"value":"/     #[serde(deserialize_with = \"from_tsopt\")]","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471643,"byte_end":471692,"line_start":1787,"line_end":1787,"column_start":9,"column_end":58}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471701,"byte_end":471736,"line_start":1788,"line_end":1788,"column_start":9,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471745,"byte_end":471750,"line_start":1789,"line_end":1789,"column_start":9,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471759,"byte_end":471762,"line_start":1790,"line_end":1790,"column_start":9,"column_end":12}},{"value":"/ # fn example() -> Result<S, serde_json::Error> {","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471771,"byte_end":471823,"line_start":1791,"line_end":1791,"column_start":9,"column_end":61}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1431684000 }\"#)?;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471832,"byte_end":471901,"line_start":1792,"line_end":1792,"column_start":9,"column_end":78}},{"value":"/ # Ok(my_s)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471910,"byte_end":471924,"line_start":1793,"line_end":1793,"column_start":9,"column_end":23}},{"value":"/ # }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471933,"byte_end":471940,"line_start":1794,"line_end":1794,"column_start":9,"column_end":16}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471949,"byte_end":471988,"line_start":1795,"line_end":1795,"column_start":9,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":471997,"byte_end":472004,"line_start":1796,"line_end":1796,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":1387},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":2107},{"krate":0,"index":2114},{"krate":0,"index":2111},{"krate":0,"index":2112},{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2116},{"krate":0,"index":2133},{"krate":0,"index":2131},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2123},{"krate":0,"index":2134},{"krate":0,"index":2187},{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2178},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":2189},{"krate":0,"index":2236},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2227},{"krate":0,"index":2238},{"krate":0,"index":2249},{"krate":0,"index":2247},{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2240},{"krate":0,"index":2241},{"krate":0,"index":2251},{"krate":0,"index":2268},{"krate":0,"index":2266},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2270},{"krate":0,"index":2307},{"krate":0,"index":2301},{"krate":0,"index":2303},{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2293},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":2310},{"krate":0,"index":2323},{"krate":0,"index":2321},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2313},{"krate":0,"index":2325},{"krate":0,"index":2349},{"krate":0,"index":2347},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2340},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1494},{"krate":0,"index":1563},{"krate":0,"index":1607},{"krate":0,"index":1676},{"krate":0,"index":2401},{"krate":0,"index":2407},{"krate":0,"index":1700},{"krate":0,"index":1707},{"krate":0,"index":1712}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"! Formatting (and parsing) utilities for date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491352,"byte_end":491409,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491410,"byte_end":491413,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This module provides the common types and routines to implement,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491414,"byte_end":491482,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"! for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491483,"byte_end":491562,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"! [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491563,"byte_end":491651,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"! For most cases you should use these high-level interfaces.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491652,"byte_end":491714,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491715,"byte_end":491718,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491719,"byte_end":491807,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"! which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491808,"byte_end":491901,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"! the [`Item`](./enum.Item.html) type.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491902,"byte_end":491942,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"! They are generated from more readable **format strings**;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":491943,"byte_end":492004,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"! currently Chrono supports [one built-in syntax closely resembling","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":492005,"byte_end":492074,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"! C's `strftime` format](./strftime/index.html).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":492075,"byte_end":492125,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":492127,"byte_end":492171,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2117},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493139,"byte_end":493143,"line_start":52,"line_end":52,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493119,"byte_end":493134,"line_start":51,"line_end":51,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2119},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493177,"byte_end":493181,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493149,"byte_end":493172,"line_start":53,"line_end":53,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2121},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493210,"byte_end":493215,"line_start":56,"line_end":56,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493187,"byte_end":493205,"line_start":55,"line_end":55,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":2116},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493109,"byte_end":493112,"line_start":50,"line_end":50,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"Pad::{None, Zero, Space}","parent":null,"children":[{"krate":0,"index":2117},{"krate":0,"index":2119},{"krate":0,"index":2121}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493013,"byte_end":493054,"line_start":48,"line_end":48,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2135},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494111,"byte_end":494115,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493988,"byte_end":494027,"line_start":74,"line_end":74,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494032,"byte_end":494106,"line_start":75,"line_end":75,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2137},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494217,"byte_end":494227,"line_start":78,"line_end":78,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494121,"byte_end":494212,"line_start":77,"line_end":77,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2139},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494298,"byte_end":494308,"line_start":80,"line_end":80,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494233,"byte_end":494293,"line_start":79,"line_end":79,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2141},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494443,"byte_end":494450,"line_start":83,"line_end":83,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494314,"byte_end":494359,"line_start":81,"line_end":81,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494364,"byte_end":494438,"line_start":82,"line_end":82,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2143},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494548,"byte_end":494561,"line_start":85,"line_end":85,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494456,"byte_end":494543,"line_start":84,"line_end":84,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2145},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494644,"byte_end":494657,"line_start":87,"line_end":87,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494567,"byte_end":494639,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494688,"byte_end":494693,"line_start":89,"line_end":89,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494663,"byte_end":494683,"line_start":88,"line_end":88,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2149},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494735,"byte_end":494738,"line_start":91,"line_end":91,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494699,"byte_end":494730,"line_start":90,"line_end":90,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2151},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494831,"byte_end":494842,"line_start":93,"line_end":93,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494744,"byte_end":494826,"line_start":92,"line_end":92,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2153},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494935,"byte_end":494946,"line_start":95,"line_end":95,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494848,"byte_end":494930,"line_start":94,"line_end":94,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2155},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495004,"byte_end":495011,"line_start":97,"line_end":97,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":494952,"byte_end":494999,"line_start":96,"line_end":96,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2157},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495087,"byte_end":495101,"line_start":99,"line_end":99,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495017,"byte_end":495082,"line_start":98,"line_end":98,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2159},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495175,"byte_end":495189,"line_start":101,"line_end":101,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495107,"byte_end":495170,"line_start":100,"line_end":100,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2161},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495230,"byte_end":495237,"line_start":103,"line_end":103,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495195,"byte_end":495225,"line_start":102,"line_end":102,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2163},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495296,"byte_end":495300,"line_start":105,"line_end":105,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495243,"byte_end":495291,"line_start":104,"line_end":104,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2165},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495359,"byte_end":495365,"line_start":107,"line_end":107,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495306,"byte_end":495354,"line_start":106,"line_end":106,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2167},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495438,"byte_end":495444,"line_start":109,"line_end":109,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495371,"byte_end":495433,"line_start":108,"line_end":108,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2169},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495519,"byte_end":495525,"line_start":111,"line_end":111,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495450,"byte_end":495514,"line_start":110,"line_end":110,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2171},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495728,"byte_end":495738,"line_start":115,"line_end":115,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495531,"byte_end":495599,"line_start":112,"line_end":112,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495604,"byte_end":495645,"line_start":113,"line_end":113,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495650,"byte_end":495723,"line_start":114,"line_end":114,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2173},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495918,"byte_end":495927,"line_start":118,"line_end":118,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495744,"byte_end":495836,"line_start":116,"line_end":116,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495841,"byte_end":495913,"line_start":117,"line_end":117,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2175},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496146,"byte_end":496154,"line_start":124,"line_end":124,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495934,"byte_end":495957,"line_start":120,"line_end":120,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495962,"byte_end":495965,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":495970,"byte_end":496046,"line_start":122,"line_end":122,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496051,"byte_end":496141,"line_start":123,"line_end":123,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":2134},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493974,"byte_end":493981,"line_start":73,"line_end":73,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"Numeric::{Year, YearDiv100, YearMod100, IsoYear, IsoYearDiv100, IsoYearMod100, Month, Day, WeekFromSun, WeekFromMon, IsoWeek, NumDaysFromSun, WeekdayFromMon, Ordinal, Hour, Hour12, Minute, Second, Nanosecond, Timestamp, Internal}","parent":null,"children":[{"krate":0,"index":2135},{"krate":0,"index":2137},{"krate":0,"index":2139},{"krate":0,"index":2141},{"krate":0,"index":2143},{"krate":0,"index":2145},{"krate":0,"index":2147},{"krate":0,"index":2149},{"krate":0,"index":2151},{"krate":0,"index":2153},{"krate":0,"index":2155},{"krate":0,"index":2157},{"krate":0,"index":2159},{"krate":0,"index":2161},{"krate":0,"index":2163},{"krate":0,"index":2165},{"krate":0,"index":2167},{"krate":0,"index":2169},{"krate":0,"index":2171},{"krate":0,"index":2173},{"krate":0,"index":2175}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493220,"byte_end":493243,"line_start":59,"line_end":59,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493244,"byte_end":493314,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493315,"byte_end":493318,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493319,"byte_end":493385,"line_start":62,"line_end":62,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493386,"byte_end":493485,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493486,"byte_end":493513,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493514,"byte_end":493593,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493594,"byte_end":493597,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493598,"byte_end":493659,"line_start":67,"line_end":67,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493660,"byte_end":493743,"line_start":68,"line_end":68,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespace if any.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493744,"byte_end":493794,"line_start":69,"line_end":69,"column_start":1,"column_end":51}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493795,"byte_end":493882,"line_start":70,"line_end":70,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":493883,"byte_end":493925,"line_start":71,"line_end":71,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1410},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496262,"byte_end":496277,"line_start":128,"line_end":128,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1411}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496176,"byte_end":496250,"line_start":127,"line_end":127,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2190},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497076,"byte_end":497090,"line_start":162,"line_end":162,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496943,"byte_end":496971,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496976,"byte_end":496979,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496984,"byte_end":497071,"line_start":161,"line_end":161,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2192},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497223,"byte_end":497236,"line_start":166,"line_end":166,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497096,"byte_end":497117,"line_start":163,"line_end":163,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497122,"byte_end":497125,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497130,"byte_end":497218,"line_start":165,"line_end":165,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2194},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497385,"byte_end":497401,"line_start":170,"line_end":170,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497242,"byte_end":497280,"line_start":167,"line_end":167,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497285,"byte_end":497288,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497293,"byte_end":497380,"line_start":169,"line_end":169,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2196},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497544,"byte_end":497559,"line_start":174,"line_end":174,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497407,"byte_end":497438,"line_start":171,"line_end":171,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497443,"byte_end":497446,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497451,"byte_end":497539,"line_start":173,"line_end":173,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2198},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497637,"byte_end":497646,"line_start":178,"line_end":178,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497565,"byte_end":497575,"line_start":175,"line_end":175,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497580,"byte_end":497583,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497588,"byte_end":497632,"line_start":177,"line_end":177,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2200},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497724,"byte_end":497733,"line_start":182,"line_end":182,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497652,"byte_end":497662,"line_start":179,"line_end":179,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497667,"byte_end":497670,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497675,"byte_end":497719,"line_start":181,"line_end":181,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2202},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497980,"byte_end":497990,"line_start":186,"line_end":186,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497739,"byte_end":497812,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497817,"byte_end":497893,"line_start":184,"line_end":184,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497898,"byte_end":497975,"line_start":185,"line_end":185,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2204},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498080,"byte_end":498091,"line_start":188,"line_end":188,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":497996,"byte_end":498075,"line_start":187,"line_end":187,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2206},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498181,"byte_end":498192,"line_start":190,"line_end":190,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498097,"byte_end":498176,"line_start":189,"line_end":189,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2208},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498282,"byte_end":498293,"line_start":192,"line_end":192,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498198,"byte_end":498277,"line_start":191,"line_end":191,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2210},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498414,"byte_end":498426,"line_start":196,"line_end":196,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498299,"byte_end":498317,"line_start":193,"line_end":193,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498322,"byte_end":498325,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498330,"byte_end":498409,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2212},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498761,"byte_end":498780,"line_start":202,"line_end":202,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498432,"byte_end":498505,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498510,"byte_end":498513,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498518,"byte_end":498610,"line_start":199,"line_end":199,"column_start":5,"column_end":97}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498615,"byte_end":498667,"line_start":200,"line_end":200,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498672,"byte_end":498756,"line_start":201,"line_end":201,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2214},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499172,"byte_end":499192,"line_start":209,"line_end":209,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498786,"byte_end":498854,"line_start":203,"line_end":203,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498859,"byte_end":498862,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498867,"byte_end":498959,"line_start":205,"line_end":205,"column_start":5,"column_end":97}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498964,"byte_end":499021,"line_start":206,"line_end":206,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499026,"byte_end":499078,"line_start":207,"line_end":207,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499083,"byte_end":499167,"line_start":208,"line_end":208,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2216},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499331,"byte_end":499345,"line_start":212,"line_end":212,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499198,"byte_end":499284,"line_start":210,"line_end":210,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499289,"byte_end":499326,"line_start":211,"line_end":211,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2218},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499486,"byte_end":499501,"line_start":215,"line_end":215,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499351,"byte_end":499439,"line_start":213,"line_end":213,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499444,"byte_end":499481,"line_start":214,"line_end":214,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2220},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499594,"byte_end":499601,"line_start":217,"line_end":217,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499507,"byte_end":499589,"line_start":216,"line_end":216,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2222},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499657,"byte_end":499664,"line_start":219,"line_end":219,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499607,"byte_end":499652,"line_start":218,"line_end":218,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2224},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499883,"byte_end":499891,"line_start":225,"line_end":225,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499671,"byte_end":499694,"line_start":221,"line_end":221,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499699,"byte_end":499702,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499707,"byte_end":499783,"line_start":223,"line_end":223,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499788,"byte_end":499878,"line_start":224,"line_end":224,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":2189},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496931,"byte_end":496936,"line_start":158,"line_end":158,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"Fixed::{ShortMonthName, LongMonthName, ShortWeekdayName, LongWeekdayName, LowerAmPm, UpperAmPm, Nanosecond, Nanosecond3, Nanosecond6, Nanosecond9, TimezoneName, TimezoneOffsetColon, TimezoneOffsetColonZ, TimezoneOffset, TimezoneOffsetZ, RFC2822, RFC3339, Internal}","parent":null,"children":[{"krate":0,"index":2190},{"krate":0,"index":2192},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2198},{"krate":0,"index":2200},{"krate":0,"index":2202},{"krate":0,"index":2204},{"krate":0,"index":2206},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2216},{"krate":0,"index":2218},{"krate":0,"index":2220},{"krate":0,"index":2222},{"krate":0,"index":2224}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496708,"byte_end":496736,"line_start":153,"line_end":153,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496737,"byte_end":496740,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496741,"byte_end":496797,"line_start":155,"line_end":155,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496798,"byte_end":496882,"line_start":156,"line_end":156,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":2238},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":500041,"byte_end":500054,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":2239}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499911,"byte_end":499990,"line_start":228,"line_end":228,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2272},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501070,"byte_end":501077,"line_start":257,"line_end":257,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501025,"byte_end":501065,"line_start":256,"line_end":256,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2275},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501215,"byte_end":501227,"line_start":260,"line_end":260,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" Same as `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Literal` but with the string owned by the item.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501092,"byte_end":501152,"line_start":258,"line_end":258,"column_start":5,"column_end":65}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501157,"byte_end":501210,"line_start":259,"line_end":259,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2278},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501315,"byte_end":501320,"line_start":262,"line_end":262,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501243,"byte_end":501310,"line_start":261,"line_end":261,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2281},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501456,"byte_end":501466,"line_start":265,"line_end":265,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" Same as `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Space` but with the string owned by the item.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501335,"byte_end":501393,"line_start":263,"line_end":263,"column_start":5,"column_end":63}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501398,"byte_end":501451,"line_start":264,"line_end":264,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2284},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501645,"byte_end":501652,"line_start":268,"line_end":268,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501482,"byte_end":501572,"line_start":266,"line_end":266,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501577,"byte_end":501640,"line_start":267,"line_end":267,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2288},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501699,"byte_end":501704,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501672,"byte_end":501694,"line_start":269,"line_end":269,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2291},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501793,"byte_end":501798,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":2270},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501717,"byte_end":501788,"line_start":271,"line_end":271,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":2270},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501010,"byte_end":501014,"line_start":255,"line_end":255,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"Item::{Literal, OwnedLiteral, Space, OwnedSpace, Numeric, Fixed, Error}","parent":null,"children":[{"krate":0,"index":2272},{"krate":0,"index":2275},{"krate":0,"index":2278},{"krate":0,"index":2281},{"krate":0,"index":2284},{"krate":0,"index":2288},{"krate":0,"index":2291}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":500886,"byte_end":500961,"line_start":253,"line_end":253,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":2310},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":502417,"byte_end":502427,"line_start":285,"line_end":285,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":502321,"byte_end":502360,"line_start":283,"line_end":283,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1426},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":503695,"byte_end":503706,"line_start":320,"line_end":320,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same as `Result<T, ParseError>`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":503649,"byte_end":503685,"line_start":319,"line_end":319,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":505364,"byte_end":505370,"line_start":356,"line_end":356,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"fn <'a, I, B> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, FixedOffset)>, items: I) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":505198,"byte_end":505262,"line_start":353,"line_end":353,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":505263,"byte_end":505302,"line_start":354,"line_end":354,"column_start":1,"column_end":40}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":505303,"byte_end":505356,"line_start":355,"line_end":355,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2351},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521860,"byte_end":521866,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2363},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2369},{"krate":0,"index":2370},{"krate":0,"index":2371},{"krate":0,"index":2372}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521342,"byte_end":521410,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521411,"byte_end":521414,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521415,"byte_end":521498,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521499,"byte_end":521591,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521592,"byte_end":521595,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521596,"byte_end":521678,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521679,"byte_end":521774,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521775,"byte_end":521813,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2352},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522043,"byte_end":522047,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521873,"byte_end":521882,"line_start":28,"line_end":28,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521887,"byte_end":521890,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521895,"byte_end":521970,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521975,"byte_end":522034,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":2353},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522351,"byte_end":522363,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522067,"byte_end":522135,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522140,"byte_end":522143,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522148,"byte_end":522205,"line_start":36,"line_end":36,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522210,"byte_end":522269,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522274,"byte_end":522342,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2354},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522456,"byte_end":522468,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522383,"byte_end":522447,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":2355},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522735,"byte_end":522742,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522488,"byte_end":522562,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522567,"byte_end":522570,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522575,"byte_end":522660,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522665,"byte_end":522726,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2356},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523129,"byte_end":523144,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522762,"byte_end":522852,"line_start":50,"line_end":50,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522857,"byte_end":522904,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522909,"byte_end":522912,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522917,"byte_end":522974,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522979,"byte_end":523044,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523049,"byte_end":523120,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2357},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523311,"byte_end":523326,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523164,"byte_end":523250,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523255,"byte_end":523302,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2358},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523373,"byte_end":523378,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523346,"byte_end":523364,"line_start":62,"line_end":62,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2359},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523533,"byte_end":523546,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523398,"byte_end":523469,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523474,"byte_end":523524,"line_start":66,"line_end":66,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2360},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523701,"byte_end":523714,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523566,"byte_end":523637,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523642,"byte_end":523692,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2361},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523854,"byte_end":523861,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523734,"byte_end":523797,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523802,"byte_end":523845,"line_start":74,"line_end":74,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":2362},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523910,"byte_end":523917,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523881,"byte_end":523901,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2363},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524011,"byte_end":524018,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523941,"byte_end":524002,"line_start":80,"line_end":80,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2364},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524122,"byte_end":524125,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524038,"byte_end":524113,"line_start":83,"line_end":83,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":2365},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524226,"byte_end":524237,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524145,"byte_end":524217,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":2366},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524300,"byte_end":524311,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524257,"byte_end":524291,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2367},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524366,"byte_end":524372,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524331,"byte_end":524357,"line_start":92,"line_end":92,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2368},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524456,"byte_end":524462,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524392,"byte_end":524447,"line_start":95,"line_end":95,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2369},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524561,"byte_end":524571,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524482,"byte_end":524552,"line_start":98,"line_end":98,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":2370},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524774,"byte_end":524783,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524591,"byte_end":524668,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524673,"byte_end":524676,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524681,"byte_end":524765,"line_start":103,"line_end":103,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":2371},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524862,"byte_end":524868,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":524803,"byte_end":524853,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":525973,"byte_end":525976,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"fn () -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":525915,"byte_end":525961,"line_start":139,"line_end":139,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":526126,"byte_end":526134,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":526028,"byte_end":526100,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":526105,"byte_end":526114,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":526383,"byte_end":526399,"line_start":152,"line_end":152,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":526269,"byte_end":526357,"line_start":150,"line_end":150,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":526362,"byte_end":526371,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":526707,"byte_end":526723,"line_start":159,"line_end":159,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":526593,"byte_end":526681,"line_start":157,"line_end":157,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":526686,"byte_end":526695,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527021,"byte_end":527032,"line_start":166,"line_end":166,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":526917,"byte_end":526995,"line_start":164,"line_end":164,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527000,"byte_end":527009,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527290,"byte_end":527309,"line_start":172,"line_end":172,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527170,"byte_end":527264,"line_start":170,"line_end":170,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527269,"byte_end":527278,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527626,"byte_end":527645,"line_start":179,"line_end":179,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527506,"byte_end":527600,"line_start":177,"line_end":177,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527605,"byte_end":527614,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1529},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527942,"byte_end":527951,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527842,"byte_end":527916,"line_start":184,"line_end":184,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527921,"byte_end":527930,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528203,"byte_end":528220,"line_start":192,"line_end":192,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528087,"byte_end":528177,"line_start":190,"line_end":190,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528182,"byte_end":528191,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528480,"byte_end":528497,"line_start":198,"line_end":198,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528364,"byte_end":528454,"line_start":196,"line_end":196,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528459,"byte_end":528468,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528745,"byte_end":528756,"line_start":204,"line_end":204,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528641,"byte_end":528719,"line_start":202,"line_end":202,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528724,"byte_end":528733,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528998,"byte_end":529009,"line_start":210,"line_end":210,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"fn (&mut self, value: Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528894,"byte_end":528972,"line_start":208,"line_end":208,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528977,"byte_end":528986,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529225,"byte_end":529236,"line_start":216,"line_end":216,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529121,"byte_end":529199,"line_start":214,"line_end":214,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529204,"byte_end":529213,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529470,"byte_end":529477,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529374,"byte_end":529444,"line_start":220,"line_end":220,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529449,"byte_end":529458,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529763,"byte_end":529771,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"fn (&mut self, value: bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529611,"byte_end":529697,"line_start":226,"line_end":226,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529702,"byte_end":529737,"line_start":227,"line_end":227,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529742,"byte_end":529751,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530044,"byte_end":530054,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529900,"byte_end":529973,"line_start":233,"line_end":233,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":529978,"byte_end":530018,"line_start":234,"line_end":234,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530023,"byte_end":530032,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530411,"byte_end":530419,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530243,"byte_end":530310,"line_start":241,"line_end":241,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530315,"byte_end":530385,"line_start":242,"line_end":242,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530390,"byte_end":530399,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1539},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530763,"byte_end":530773,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530661,"byte_end":530737,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530742,"byte_end":530751,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531012,"byte_end":531022,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530910,"byte_end":530986,"line_start":257,"line_end":257,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":530991,"byte_end":531000,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531269,"byte_end":531283,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531159,"byte_end":531243,"line_start":263,"line_end":263,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531248,"byte_end":531257,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531532,"byte_end":531545,"line_start":271,"line_end":271,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531424,"byte_end":531506,"line_start":269,"line_end":269,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531511,"byte_end":531520,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531757,"byte_end":531767,"line_start":277,"line_end":277,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531655,"byte_end":531731,"line_start":275,"line_end":275,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531736,"byte_end":531745,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":532411,"byte_end":532424,"line_start":292,"line_end":292,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"fn (&self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531904,"byte_end":531956,"line_start":281,"line_end":281,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531961,"byte_end":531964,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":531969,"byte_end":532043,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":532048,"byte_end":532051,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":532056,"byte_end":532079,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":532084,"byte_end":532122,"line_start":286,"line_end":286,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":532127,"byte_end":532198,"line_start":287,"line_end":287,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":532203,"byte_end":532223,"line_start":288,"line_end":288,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":532228,"byte_end":532231,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":532236,"byte_end":532330,"line_start":290,"line_end":290,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":532335,"byte_end":532399,"line_start":291,"line_end":291,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":541412,"byte_end":541425,"line_start":477,"line_end":477,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"fn (&self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":541009,"byte_end":541061,"line_start":468,"line_end":468,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":541066,"byte_end":541069,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":541074,"byte_end":541148,"line_start":470,"line_end":470,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":541153,"byte_end":541156,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":541161,"byte_end":541220,"line_start":472,"line_end":472,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":541225,"byte_end":541281,"line_start":473,"line_end":473,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":541286,"byte_end":541325,"line_start":474,"line_end":474,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":541330,"byte_end":541333,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":541338,"byte_end":541400,"line_start":476,"line_end":476,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1553},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":543208,"byte_end":543237,"line_start":519,"line_end":519,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"fn (&self, offset: i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":542723,"byte_end":542784,"line_start":512,"line_end":512,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":542789,"byte_end":542878,"line_start":513,"line_end":513,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":542883,"byte_end":542960,"line_start":514,"line_end":514,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":542965,"byte_end":542968,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":542973,"byte_end":543036,"line_start":516,"line_end":516,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":543041,"byte_end":543127,"line_start":517,"line_end":517,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":543132,"byte_end":543196,"line_start":518,"line_end":518,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":546604,"byte_end":546619,"line_start":589,"line_end":589,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"fn (&self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":546528,"byte_end":546592,"line_start":588,"line_end":588,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1559},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":547091,"byte_end":547102,"line_start":599,"line_end":599,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"fn (&self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":546740,"byte_end":546810,"line_start":593,"line_end":593,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":546815,"byte_end":546818,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":546823,"byte_end":546886,"line_start":595,"line_end":595,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":546891,"byte_end":546977,"line_start":596,"line_end":596,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":546982,"byte_end":547010,"line_start":597,"line_end":597,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":547015,"byte_end":547079,"line_start":598,"line_end":598,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":548130,"byte_end":548155,"line_start":619,"line_end":619,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"fn <Tz> (&self, tz: &Tz) -> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":547573,"byte_end":547643,"line_start":610,"line_end":610,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":547648,"byte_end":547728,"line_start":611,"line_end":611,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":547733,"byte_end":547736,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":547741,"byte_end":547804,"line_start":613,"line_end":613,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":547809,"byte_end":547895,"line_start":614,"line_end":614,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":547900,"byte_end":547928,"line_start":615,"line_end":615,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":547933,"byte_end":547997,"line_start":616,"line_end":616,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":548002,"byte_end":548077,"line_start":617,"line_end":617,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":548082,"byte_end":548118,"line_start":618,"line_end":618,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1643},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":595392,"byte_end":595397,"line_start":205,"line_end":205,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"fn <'a, I, B> (parsed: &mut Parsed, s: &str, items: I) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":594489,"byte_end":594563,"line_start":189,"line_end":189,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":594564,"byte_end":594660,"line_start":190,"line_end":190,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":594661,"byte_end":594714,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":594715,"byte_end":594799,"line_start":192,"line_end":192,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":594800,"byte_end":594803,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":594804,"byte_end":594848,"line_start":194,"line_end":194,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":594849,"byte_end":594852,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":594853,"byte_end":594911,"line_start":196,"line_end":196,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":594912,"byte_end":595005,"line_start":197,"line_end":197,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":595006,"byte_end":595081,"line_start":198,"line_end":198,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":595082,"byte_end":595085,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":595086,"byte_end":595129,"line_start":200,"line_end":200,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":595130,"byte_end":595193,"line_start":201,"line_end":201,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":595194,"byte_end":595285,"line_start":202,"line_end":202,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":595286,"byte_end":595289,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":595290,"byte_end":595384,"line_start":204,"line_end":204,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1676},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","parent":null,"children":[{"krate":0,"index":1677},{"krate":0,"index":2382},{"krate":0,"index":2389},{"krate":0,"index":2386},{"krate":0,"index":1684},{"krate":0,"index":1689},{"krate":0,"index":1690}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"!\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. [^1]           |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^2] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^2]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^3]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^4] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Same as `%D`.                                                         |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^5]                      |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [^8] |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [^8] |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [^8]    |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [^8]    |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [^8]    |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [^8]                   |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [^8]                   |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [^8]                   |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Same as `%T`.                                                         |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same as `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | *Formatting only:* Local time zone name.                                   |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|`ctime` date & time format. Same as `%a %b %e %T %Y` sans `\\n`.|\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^6]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^7]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n[^2]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^3]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^4]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^5]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^6]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^7]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^8]: `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n   <br>\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n   <br>\n   <br>\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n   <br>\n   <br>\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n   <br>\n   <br>\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n*/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":627914,"byte_end":638594,"line_start":4,"line_end":160,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2382},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":638762,"byte_end":638775,"line_start":166,"line_end":166,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":2384},{"krate":0,"index":2385}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":638670,"byte_end":638726,"line_start":164,"line_end":164,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":639251,"byte_end":639254,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"fn (s: &'a str) -> StrftimeItems<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":639165,"byte_end":639239,"line_start":176,"line_end":176,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2401},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":518373,"byte_end":518386,"line_start":619,"line_end":619,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":2403},{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2406}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":518127,"byte_end":518208,"line_start":615,"line_end":615,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":518209,"byte_end":518290,"line_start":616,"line_end":616,"column_start":1,"column_end":82}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":518291,"byte_end":518344,"line_start":617,"line_end":617,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":518910,"byte_end":518913,"line_start":633,"line_end":633,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"fn (date: Option<NaiveDate>, time: Option<NaiveTime>, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":518833,"byte_end":518898,"line_start":632,"line_end":632,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":519173,"byte_end":519188,"line_start":638,"line_end":638,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"fn <Off> (date: Option<NaiveDate>, time: Option<NaiveTime>, offset: &Off, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":519081,"byte_end":519161,"line_start":637,"line_end":637,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":1721},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654138,"byte_end":654149,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1722},{"krate":0,"index":1723}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":653740,"byte_end":653816,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":653817,"byte_end":653888,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":653889,"byte_end":653961,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":653962,"byte_end":654037,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654038,"byte_end":654115,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654116,"byte_end":654127,"line_start":13,"line_end":13,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654679,"byte_end":654692,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654156,"byte_end":654231,"line_start":15,"line_end":15,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654236,"byte_end":654305,"line_start":16,"line_end":16,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654310,"byte_end":654342,"line_start":17,"line_end":17,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654347,"byte_end":654350,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654355,"byte_end":654368,"line_start":19,"line_end":19,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654373,"byte_end":654385,"line_start":20,"line_end":20,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654390,"byte_end":654457,"line_start":21,"line_end":21,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654462,"byte_end":654525,"line_start":22,"line_end":22,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654530,"byte_end":654592,"line_start":23,"line_end":23,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654597,"byte_end":654659,"line_start":24,"line_end":24,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654664,"byte_end":654671,"line_start":25,"line_end":25,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":655195,"byte_end":655208,"line_start":38,"line_end":38,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654726,"byte_end":654790,"line_start":28,"line_end":28,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654795,"byte_end":654858,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654863,"byte_end":654866,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654871,"byte_end":654884,"line_start":31,"line_end":31,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654889,"byte_end":654901,"line_start":32,"line_end":32,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654906,"byte_end":654973,"line_start":33,"line_end":33,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":654978,"byte_end":655041,"line_start":34,"line_end":34,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":655046,"byte_end":655108,"line_start":35,"line_end":35,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":655113,"byte_end":655175,"line_start":36,"line_end":36,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":655180,"byte_end":655187,"line_start":37,"line_end":37,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":1729},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":22458,"byte_end":22463,"line_start":530,"line_end":530,"column_start":9,"column_end":14},"name":"serde","qualname":"::serde","value":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":1730}],"decl_id":null,"docs":" Serialization/Deserialization in alternate formats","sig":null,"attributes":[{"value":"/ Serialization/Deserialization in alternate formats","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":22086,"byte_end":22140,"line_start":521,"line_end":521,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":22141,"byte_end":22144,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ The various modules in here are intended to be used with serde's [`with`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":22145,"byte_end":22221,"line_start":523,"line_end":523,"column_start":1,"column_end":77}},{"value":"/ annotation][1] to serialize as something other than the default [RFC","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":22222,"byte_end":22294,"line_start":524,"line_end":524,"column_start":1,"column_end":73}},{"value":"/ 3339][2] format.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":22295,"byte_end":22315,"line_start":525,"line_end":525,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":22316,"byte_end":22319,"line_start":526,"line_end":526,"column_start":1,"column_end":4}},{"value":"/ [1]: https://serde.rs/attributes.html#field-attributes","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":22320,"byte_end":22378,"line_start":527,"line_end":527,"column_start":1,"column_end":59}},{"value":"/ [2]: https://tools.ietf.org/html/rfc3339","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":22379,"byte_end":22423,"line_start":528,"line_end":528,"column_start":1,"column_end":45}},{"value":"cfg(feature = \"serde\")","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":22424,"byte_end":22449,"line_start":529,"line_end":529,"column_start":1,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2411},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24211,"byte_end":24214,"line_start":578,"line_end":578,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":2410},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24195,"byte_end":24206,"line_start":577,"line_end":577,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2414},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24241,"byte_end":24244,"line_start":580,"line_end":580,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":2410},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24224,"byte_end":24236,"line_start":579,"line_end":579,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2417},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24273,"byte_end":24276,"line_start":582,"line_end":582,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":2410},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24254,"byte_end":24268,"line_start":581,"line_end":581,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2420},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24304,"byte_end":24307,"line_start":584,"line_end":584,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":2410},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24286,"byte_end":24299,"line_start":583,"line_end":583,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2423},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24333,"byte_end":24336,"line_start":586,"line_end":586,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":2410},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24317,"byte_end":24328,"line_start":585,"line_end":585,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2426},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24364,"byte_end":24367,"line_start":588,"line_end":588,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":2410},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24346,"byte_end":24359,"line_start":587,"line_end":587,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2429},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24393,"byte_end":24396,"line_start":590,"line_end":590,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":2410},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24377,"byte_end":24388,"line_start":589,"line_end":589,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":2410},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24181,"byte_end":24188,"line_start":576,"line_end":576,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"Weekday::{Mon, Tue, Wed, Thu, Fri, Sat, Sun}","parent":null,"children":[{"krate":0,"index":2411},{"krate":0,"index":2414},{"krate":0,"index":2417},{"krate":0,"index":2420},{"krate":0,"index":2423},{"krate":0,"index":2426},{"krate":0,"index":2429}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23786,"byte_end":23806,"line_start":569,"line_end":569,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23807,"byte_end":23810,"line_start":570,"line_end":570,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23811,"byte_end":23868,"line_start":571,"line_end":571,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23869,"byte_end":23947,"line_start":572,"line_end":572,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23948,"byte_end":24039,"line_start":573,"line_end":573,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1751},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24715,"byte_end":24719,"line_start":600,"line_end":600,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24424,"byte_end":24453,"line_start":594,"line_end":594,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24458,"byte_end":24461,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24466,"byte_end":24537,"line_start":596,"line_end":596,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24542,"byte_end":24613,"line_start":597,"line_end":597,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24618,"byte_end":24689,"line_start":598,"line_end":598,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24694,"byte_end":24703,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1752},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25372,"byte_end":25376,"line_start":618,"line_end":618,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25077,"byte_end":25110,"line_start":612,"line_end":612,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25115,"byte_end":25118,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25123,"byte_end":25194,"line_start":614,"line_end":614,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25199,"byte_end":25270,"line_start":615,"line_end":615,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25275,"byte_end":25346,"line_start":616,"line_end":616,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25351,"byte_end":25360,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1753},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26118,"byte_end":26136,"line_start":636,"line_end":636,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25734,"byte_end":25818,"line_start":630,"line_end":630,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25823,"byte_end":25826,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25831,"byte_end":25916,"line_start":632,"line_end":632,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25921,"byte_end":26006,"line_start":633,"line_end":633,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26011,"byte_end":26092,"line_start":634,"line_end":634,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26097,"byte_end":26106,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26771,"byte_end":26789,"line_start":654,"line_end":654,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26413,"byte_end":26471,"line_start":648,"line_end":648,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26476,"byte_end":26479,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26484,"byte_end":26569,"line_start":650,"line_end":650,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26574,"byte_end":26659,"line_start":651,"line_end":651,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26664,"byte_end":26745,"line_start":652,"line_end":652,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26750,"byte_end":26759,"line_start":653,"line_end":653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27430,"byte_end":27450,"line_start":672,"line_end":672,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27066,"byte_end":27124,"line_start":666,"line_end":666,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27129,"byte_end":27132,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27137,"byte_end":27224,"line_start":668,"line_end":668,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27229,"byte_end":27316,"line_start":669,"line_end":669,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27321,"byte_end":27404,"line_start":670,"line_end":670,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27409,"byte_end":27418,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":28091,"byte_end":28111,"line_start":690,"line_end":690,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27727,"byte_end":27785,"line_start":684,"line_end":684,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27790,"byte_end":27793,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27798,"byte_end":27885,"line_start":686,"line_end":686,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27890,"byte_end":27977,"line_start":687,"line_end":687,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27982,"byte_end":28065,"line_start":688,"line_end":688,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":28070,"byte_end":28079,"line_start":689,"line_end":689,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2446},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":29950,"byte_end":29967,"line_start":754,"line_end":754,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":2447}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":29843,"byte_end":29910,"line_start":752,"line_end":752,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1787},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33067,"byte_end":33075,"line_start":873,"line_end":873,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1805}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33007,"byte_end":33056,"line_start":872,"line_end":872,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33193,"byte_end":33197,"line_start":875,"line_end":875,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"fn (&self) -> i32","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33089,"byte_end":33185,"line_start":874,"line_end":874,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33406,"byte_end":33413,"line_start":880,"line_end":880,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33218,"byte_end":33291,"line_start":877,"line_end":877,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33296,"byte_end":33384,"line_start":878,"line_end":878,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33389,"byte_end":33398,"line_start":879,"line_end":879,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33708,"byte_end":33713,"line_start":892,"line_end":892,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"fn (&self) -> u32","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33601,"byte_end":33646,"line_start":889,"line_end":889,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33651,"byte_end":33654,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33659,"byte_end":33700,"line_start":891,"line_end":891,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33841,"byte_end":33847,"line_start":897,"line_end":897,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33734,"byte_end":33779,"line_start":894,"line_end":894,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33784,"byte_end":33787,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33792,"byte_end":33833,"line_start":896,"line_end":896,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34018,"byte_end":34021,"line_start":902,"line_end":902,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"fn (&self) -> u32","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33868,"byte_end":33913,"line_start":899,"line_end":899,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33918,"byte_end":33921,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33926,"byte_end":34010,"line_start":901,"line_end":901,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1793},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34192,"byte_end":34196,"line_start":907,"line_end":907,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34042,"byte_end":34087,"line_start":904,"line_end":904,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34092,"byte_end":34095,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34100,"byte_end":34184,"line_start":906,"line_end":906,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34365,"byte_end":34372,"line_start":912,"line_end":912,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"fn (&self) -> u32","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34217,"byte_end":34261,"line_start":909,"line_end":909,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34266,"byte_end":34269,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34274,"byte_end":34357,"line_start":911,"line_end":911,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1795},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34541,"byte_end":34549,"line_start":917,"line_end":917,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34393,"byte_end":34437,"line_start":914,"line_end":914,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34442,"byte_end":34445,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34450,"byte_end":34533,"line_start":916,"line_end":916,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34606,"byte_end":34613,"line_start":920,"line_end":920,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"fn (&self) -> Weekday","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34570,"byte_end":34598,"line_start":919,"line_end":919,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34671,"byte_end":34679,"line_start":923,"line_end":923,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"fn (&self) -> IsoWeek","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34638,"byte_end":34663,"line_start":922,"line_end":922,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34837,"byte_end":34846,"line_start":928,"line_end":928,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"fn (&self, year: i32) -> Option<Self>","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34704,"byte_end":34755,"line_start":925,"line_end":925,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34760,"byte_end":34763,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34768,"byte_end":34829,"line_start":927,"line_end":927,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35039,"byte_end":35049,"line_start":933,"line_end":933,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"fn (&self, month: u32) -> Option<Self>","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34887,"byte_end":34957,"line_start":930,"line_end":930,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34962,"byte_end":34965,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34970,"byte_end":35031,"line_start":932,"line_end":932,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35243,"byte_end":35254,"line_start":938,"line_end":938,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"fn (&self, month0: u32) -> Option<Self>","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35091,"byte_end":35161,"line_start":935,"line_end":935,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35166,"byte_end":35169,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35174,"byte_end":35235,"line_start":937,"line_end":937,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1801},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35449,"byte_end":35457,"line_start":943,"line_end":943,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"fn (&self, day: u32) -> Option<Self>","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35297,"byte_end":35367,"line_start":940,"line_end":940,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35372,"byte_end":35375,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35380,"byte_end":35441,"line_start":942,"line_end":942,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35649,"byte_end":35658,"line_start":948,"line_end":948,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"fn (&self, day0: u32) -> Option<Self>","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35497,"byte_end":35567,"line_start":945,"line_end":945,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35572,"byte_end":35575,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35580,"byte_end":35641,"line_start":947,"line_end":947,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1803},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35850,"byte_end":35862,"line_start":953,"line_end":953,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"fn (&self, ordinal: u32) -> Option<Self>","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35699,"byte_end":35768,"line_start":950,"line_end":950,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35773,"byte_end":35776,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35781,"byte_end":35842,"line_start":952,"line_end":952,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36057,"byte_end":36070,"line_start":958,"line_end":958,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"fn (&self, ordinal0: u32) -> Option<Self>","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35906,"byte_end":35975,"line_start":955,"line_end":955,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35980,"byte_end":35983,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35988,"byte_end":36049,"line_start":957,"line_end":957,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1805},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36629,"byte_end":36645,"line_start":972,"line_end":972,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"fn (&self) -> i32","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[{"value":"/ Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36115,"byte_end":36209,"line_start":960,"line_end":960,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36214,"byte_end":36217,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36222,"byte_end":36236,"line_start":962,"line_end":962,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36241,"byte_end":36244,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36249,"byte_end":36256,"line_start":964,"line_end":964,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36261,"byte_end":36299,"line_start":965,"line_end":965,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36304,"byte_end":36307,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719_163);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36312,"byte_end":36388,"line_start":967,"line_end":967,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2, 1, 1).num_days_from_ce(), 366);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36393,"byte_end":36462,"line_start":968,"line_end":968,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36467,"byte_end":36534,"line_start":969,"line_end":969,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36539,"byte_end":36609,"line_start":970,"line_end":970,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36614,"byte_end":36621,"line_start":971,"line_end":971,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1806},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37303,"byte_end":37311,"line_start":991,"line_end":991,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37243,"byte_end":37292,"line_start":990,"line_end":990,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37374,"byte_end":37378,"line_start":993,"line_end":993,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"fn (&self) -> u32","parent":{"krate":0,"index":1806},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37325,"byte_end":37366,"line_start":992,"line_end":992,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37529,"byte_end":37535,"line_start":998,"line_end":998,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1806},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37399,"byte_end":37460,"line_start":995,"line_end":995,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37465,"byte_end":37507,"line_start":996,"line_end":996,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37512,"byte_end":37521,"line_start":997,"line_end":997,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37779,"byte_end":37785,"line_start":1008,"line_end":1008,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"fn (&self) -> u32","parent":{"krate":0,"index":1806},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37728,"byte_end":37771,"line_start":1007,"line_end":1007,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1810},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37857,"byte_end":37863,"line_start":1011,"line_end":1011,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"fn (&self) -> u32","parent":{"krate":0,"index":1806},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37806,"byte_end":37849,"line_start":1010,"line_end":1010,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38106,"byte_end":38116,"line_start":1016,"line_end":1016,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"fn (&self) -> u32","parent":{"krate":0,"index":1806},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37884,"byte_end":37954,"line_start":1013,"line_end":1013,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37959,"byte_end":38019,"line_start":1014,"line_end":1014,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38024,"byte_end":38098,"line_start":1015,"line_end":1015,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38270,"byte_end":38279,"line_start":1021,"line_end":1021,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"fn (&self, hour: u32) -> Option<Self>","parent":{"krate":0,"index":1806},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38137,"byte_end":38188,"line_start":1018,"line_end":1018,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38193,"byte_end":38196,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38201,"byte_end":38262,"line_start":1020,"line_end":1020,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1813},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38455,"byte_end":38466,"line_start":1026,"line_end":1026,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"fn (&self, min: u32) -> Option<Self>","parent":{"krate":0,"index":1806},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38320,"byte_end":38373,"line_start":1023,"line_end":1023,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38378,"byte_end":38381,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38386,"byte_end":38447,"line_start":1025,"line_end":1025,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38753,"byte_end":38764,"line_start":1033,"line_end":1033,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"fn (&self, sec: u32) -> Option<Self>","parent":{"krate":0,"index":1806},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38506,"byte_end":38559,"line_start":1028,"line_end":1028,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38564,"byte_end":38567,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38572,"byte_end":38633,"line_start":1030,"line_end":1030,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38638,"byte_end":38690,"line_start":1031,"line_end":1031,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38695,"byte_end":38745,"line_start":1032,"line_end":1032,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1815},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":39097,"byte_end":39112,"line_start":1040,"line_end":1040,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"fn (&self, nano: u32) -> Option<Self>","parent":{"krate":0,"index":1806},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38804,"byte_end":38883,"line_start":1035,"line_end":1035,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38888,"byte_end":38891,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38896,"byte_end":38957,"line_start":1037,"line_end":1037,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38962,"byte_end":39022,"line_start":1038,"line_end":1038,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":39027,"byte_end":39089,"line_start":1039,"line_end":1039,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":39241,"byte_end":39266,"line_start":1044,"line_end":1044,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"fn (&self) -> u32","parent":{"krate":0,"index":1806},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":39153,"byte_end":39219,"line_start":1042,"line_end":1042,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":39224,"byte_end":39233,"line_start":1043,"line_end":1043,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46202,"byte_end":46210,"line_start":63,"line_end":63,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":54507,"byte_end":54515,"line_start":283,"line_end":283,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":54803,"byte_end":54811,"line_start":296,"line_end":296,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":55155,"byte_end":55163,"line_start":310,"line_end":310,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":55499,"byte_end":55507,"line_start":324,"line_end":324,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":55938,"byte_end":55946,"line_start":336,"line_end":336,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":56523,"byte_end":56531,"line_start":356,"line_end":356,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":57948,"byte_end":57963,"line_start":396,"line_end":396,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":58163,"byte_end":58178,"line_start":403,"line_end":403,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71951,"byte_end":71962,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73143,"byte_end":73154,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76370,"byte_end":76381,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91730,"byte_end":91741,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94298,"byte_end":94309,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94861,"byte_end":94872,"line_start":117,"line_end":117,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94941,"byte_end":94952,"line_start":121,"line_end":121,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":95446,"byte_end":95457,"line_start":135,"line_end":135,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":96210,"byte_end":96219,"line_start":153,"line_end":153,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":96407,"byte_end":96416,"line_start":162,"line_end":162,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":96605,"byte_end":96618,"line_start":171,"line_end":171,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":96814,"byte_end":96827,"line_start":180,"line_end":180,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":97038,"byte_end":97046,"line_start":189,"line_end":189,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":97258,"byte_end":97266,"line_start":198,"line_end":198,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":100442,"byte_end":100445,"line_start":63,"line_end":63,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":100929,"byte_end":100932,"line_start":79,"line_end":79,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":101016,"byte_end":101019,"line_start":83,"line_end":83,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":101123,"byte_end":101126,"line_start":87,"line_end":87,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":107381,"byte_end":107390,"line_start":111,"line_end":111,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":108167,"byte_end":108176,"line_start":144,"line_end":144,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":116569,"byte_end":116571,"line_start":281,"line_end":281,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":118605,"byte_end":118607,"line_start":366,"line_end":366,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":119151,"byte_end":119154,"line_start":382,"line_end":382,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":121027,"byte_end":121030,"line_start":463,"line_end":463,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138735,"byte_end":138744,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":175035,"byte_end":175044,"line_start":1018,"line_end":1018,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":187376,"byte_end":187385,"line_start":1385,"line_end":1385,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":187604,"byte_end":187613,"line_start":1394,"line_end":1394,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":189028,"byte_end":189037,"line_start":1427,"line_end":1427,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":189256,"byte_end":189265,"line_start":1436,"line_end":1436,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":190521,"byte_end":190530,"line_start":1470,"line_end":1470,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":191523,"byte_end":191532,"line_start":1501,"line_end":1501,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":192791,"byte_end":192800,"line_start":1536,"line_end":1536,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":193390,"byte_end":193399,"line_start":1556,"line_end":1556,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":197441,"byte_end":197450,"line_start":1664,"line_end":1664,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":197716,"byte_end":197729,"line_start":1672,"line_end":1672,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":198031,"byte_end":198047,"line_start":1684,"line_end":1684,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":198700,"byte_end":198709,"line_start":1707,"line_end":1707,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223500,"byte_end":223507,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":226053,"byte_end":226060,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234917,"byte_end":234926,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":574},{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":259199,"byte_end":259208,"line_start":785,"line_end":785,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":266422,"byte_end":266431,"line_start":991,"line_end":991,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":269438,"byte_end":269447,"line_start":1056,"line_end":1056,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":269628,"byte_end":269637,"line_start":1065,"line_end":1065,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":272240,"byte_end":272249,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":272430,"byte_end":272439,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":274974,"byte_end":274983,"line_start":1193,"line_end":1193,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":276371,"byte_end":276380,"line_start":1230,"line_end":1230,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":278233,"byte_end":278242,"line_start":1280,"line_end":1280,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":279002,"byte_end":279011,"line_start":1303,"line_end":1303,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":284028,"byte_end":284037,"line_start":1427,"line_end":1427,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":284284,"byte_end":284300,"line_start":1437,"line_end":1437,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":284698,"byte_end":284707,"line_start":1452,"line_end":1452,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299804,"byte_end":299817,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":326250,"byte_end":326263,"line_start":698,"line_end":698,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":711},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":337319,"byte_end":337332,"line_start":1016,"line_end":1016,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":343593,"byte_end":343606,"line_start":1189,"line_end":1189,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":346221,"byte_end":346234,"line_start":1251,"line_end":1251,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":346465,"byte_end":346478,"line_start":1260,"line_end":1260,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":348989,"byte_end":349002,"line_start":1321,"line_end":1321,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":349233,"byte_end":349246,"line_start":1330,"line_end":1330,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":351184,"byte_end":351197,"line_start":1383,"line_end":1383,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":352405,"byte_end":352418,"line_start":1419,"line_end":1419,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":353514,"byte_end":353527,"line_start":1450,"line_end":1450,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":354265,"byte_end":354278,"line_start":1472,"line_end":1472,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":361988,"byte_end":362001,"line_start":1680,"line_end":1680,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":362267,"byte_end":362280,"line_start":1688,"line_end":1688,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":362586,"byte_end":362606,"line_start":1700,"line_end":1700,"column_start":36,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363021,"byte_end":363034,"line_start":1715,"line_end":1715,"column_start":40,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367837,"byte_end":367872,"line_start":1842,"line_end":1842,"column_start":40,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":373413,"byte_end":373449,"line_start":1987,"line_end":1987,"column_start":40,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378860,"byte_end":378891,"line_start":2132,"line_end":2132,"column_start":40,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392965,"byte_end":392969,"line_start":54,"line_end":54,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401090,"byte_end":401094,"line_start":258,"line_end":258,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":932},{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401936,"byte_end":401940,"line_start":277,"line_end":277,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":951},{"krate":0,"index":953},{"krate":0,"index":955},{"krate":0,"index":957},{"krate":0,"index":959},{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":403631,"byte_end":403635,"line_start":325,"line_end":325,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":403715,"byte_end":403719,"line_start":326,"line_end":326,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":403824,"byte_end":403828,"line_start":328,"line_end":328,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":403936,"byte_end":403940,"line_start":332,"line_end":332,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":403984,"byte_end":403988,"line_start":335,"line_end":335,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":404140,"byte_end":404144,"line_start":341,"line_end":341,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":404267,"byte_end":404271,"line_start":345,"line_end":345,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":404398,"byte_end":404402,"line_start":349,"line_end":349,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":404626,"byte_end":404630,"line_start":358,"line_end":358,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":404851,"byte_end":404855,"line_start":367,"line_end":367,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":405040,"byte_end":405044,"line_start":376,"line_end":376,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":405218,"byte_end":405222,"line_start":382,"line_end":382,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407746,"byte_end":407754,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413874,"byte_end":413882,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":414804,"byte_end":414812,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":416887,"byte_end":416895,"line_start":324,"line_end":324,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419587,"byte_end":419595,"line_start":384,"line_end":384,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1079},{"krate":0,"index":1081},{"krate":0,"index":1086},{"krate":0,"index":1090}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":424107,"byte_end":424115,"line_start":493,"line_end":493,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1105},{"krate":0,"index":1107},{"krate":0,"index":1109},{"krate":0,"index":1111},{"krate":0,"index":1113},{"krate":0,"index":1115}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":425828,"byte_end":425836,"line_start":540,"line_end":540,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1125},{"krate":0,"index":1127},{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":426812,"byte_end":426820,"line_start":568,"line_end":568,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":426900,"byte_end":426908,"line_start":569,"line_end":569,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":427017,"byte_end":427025,"line_start":571,"line_end":571,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":427145,"byte_end":427153,"line_start":575,"line_end":575,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":427227,"byte_end":427235,"line_start":578,"line_end":578,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":427974,"byte_end":427982,"line_start":599,"line_end":599,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":428117,"byte_end":428125,"line_start":603,"line_end":603,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":428256,"byte_end":428264,"line_start":607,"line_end":607,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1154},{"krate":0,"index":1155}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":428500,"byte_end":428508,"line_start":616,"line_end":616,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1158},{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":428745,"byte_end":428753,"line_start":625,"line_end":625,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":428942,"byte_end":428950,"line_start":634,"line_end":634,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":429124,"byte_end":429132,"line_start":640,"line_end":640,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1169}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":429320,"byte_end":429328,"line_start":646,"line_end":646,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1171},{"krate":0,"index":1172}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":429805,"byte_end":429813,"line_start":664,"line_end":664,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":430655,"byte_end":430665,"line_start":690,"line_end":690,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":445137,"byte_end":445164,"line_start":1078,"line_end":1078,"column_start":40,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450845,"byte_end":450878,"line_start":1227,"line_end":1227,"column_start":40,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":456111,"byte_end":456139,"line_start":1369,"line_end":1369,"column_start":40,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1274}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461848,"byte_end":461882,"line_start":1518,"line_end":1518,"column_start":40,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466971,"byte_end":466994,"line_start":1660,"line_end":1660,"column_start":40,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":472308,"byte_end":472337,"line_start":1805,"line_end":1805,"column_start":40,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1355}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":473185,"byte_end":473193,"line_start":1830,"line_end":1830,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":473623,"byte_end":473636,"line_start":1842,"line_end":1842,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":474009,"byte_end":474024,"line_start":1855,"line_end":1855,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":474796,"byte_end":474804,"line_start":1877,"line_end":1877,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":475273,"byte_end":475281,"line_start":1891,"line_end":1891,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496316,"byte_end":496331,"line_start":132,"line_end":132,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1413}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496421,"byte_end":496436,"line_start":138,"line_end":138,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1415}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496542,"byte_end":496557,"line_start":144,"line_end":144,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496583,"byte_end":496598,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":503758,"byte_end":503768,"line_start":322,"line_end":322,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":504517,"byte_end":504527,"line_start":337,"line_end":337,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":525400,"byte_end":525406,"line_start":125,"line_end":125,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":525902,"byte_end":525908,"line_start":138,"line_end":138,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":604003,"byte_end":604011,"line_start":395,"line_end":395,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1672},{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":639141,"byte_end":639154,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1686}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":639473,"byte_end":639486,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1692},{"krate":0,"index":1693}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":518810,"byte_end":518823,"line_start":631,"line_end":631,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1704},{"krate":0,"index":1705}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":519659,"byte_end":519672,"line_start":647,"line_end":647,"column_start":77,"column_end":90},"value":"","parent":null,"children":[{"krate":0,"index":1711}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":520561,"byte_end":520568,"line_start":679,"line_end":679,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1713},{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":655264,"byte_end":655265,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1727}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23028,"byte_end":23038,"line_start":549,"line_end":549,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1745}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23328,"byte_end":23338,"line_start":557,"line_end":557,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1749}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24410,"byte_end":24417,"line_start":593,"line_end":593,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":28408,"byte_end":28415,"line_start":703,"line_end":703,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":29063,"byte_end":29070,"line_start":720,"line_end":720,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1760},{"krate":0,"index":1761}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":30009,"byte_end":30026,"line_start":758,"line_end":758,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1764}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":30388,"byte_end":30395,"line_start":772,"line_end":772,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":30640,"byte_end":30654,"line_start":782,"line_end":782,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":31056,"byte_end":31063,"line_start":796,"line_end":796,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1785}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20687,"byte_end":20693,"line_start":472,"line_end":472,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":133}},{"kind":"Mod","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21980,"byte_end":21986,"line_start":514,"line_end":514,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1387}},{"kind":"Mod","span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":518116,"byte_end":518124,"line_start":613,"line_end":613,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1676}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":46202,"byte_end":46210,"line_start":63,"line_end":63,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":54507,"byte_end":54515,"line_start":283,"line_end":283,"column_start":14,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1817},"to":{"krate":2,"index":1972}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":54803,"byte_end":54811,"line_start":296,"line_end":296,"column_start":14,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1817},"to":{"krate":2,"index":1945}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":55155,"byte_end":55163,"line_start":310,"line_end":310,"column_start":14,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1817},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":55499,"byte_end":55507,"line_start":324,"line_end":324,"column_start":19,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1817},"to":{"krate":2,"index":1955}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":55938,"byte_end":55946,"line_start":336,"line_end":336,"column_start":19,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1817},"to":{"krate":2,"index":1960}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":56523,"byte_end":56531,"line_start":356,"line_end":356,"column_start":23,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1817},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":57948,"byte_end":57963,"line_start":396,"line_end":396,"column_start":23,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1844},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/oldtime.rs","byte_start":58163,"byte_end":58178,"line_start":403,"line_end":403,"column_start":16,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1844},"to":{"krate":1,"index":1640}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":71951,"byte_end":71962,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":73143,"byte_end":73154,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76370,"byte_end":76381,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76843,"byte_end":76848,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":166}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76851,"byte_end":76856,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1592},"to":{"krate":0,"index":166}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":76864,"byte_end":76869,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":5984},"to":{"krate":0,"index":166}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77159,"byte_end":77164,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":168}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":77167,"byte_end":77172,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1592},"to":{"krate":0,"index":168}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":91730,"byte_end":91741,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94298,"byte_end":94309,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1893},"to":{"krate":0,"index":168}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94861,"byte_end":94872,"line_start":117,"line_end":117,"column_start":17,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1893},"to":{"krate":0,"index":166}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":94941,"byte_end":94952,"line_start":121,"line_end":121,"column_start":21,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1893},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":95446,"byte_end":95457,"line_start":135,"line_end":135,"column_start":23,"column_end":34},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1893},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":96210,"byte_end":96219,"line_start":153,"line_end":153,"column_start":27,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":1945}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":96407,"byte_end":96416,"line_start":162,"line_end":162,"column_start":27,"column_end":36},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":96605,"byte_end":96618,"line_start":171,"line_end":171,"column_start":27,"column_end":40},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":1945}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":96814,"byte_end":96827,"line_start":180,"line_end":180,"column_start":27,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":97038,"byte_end":97046,"line_start":189,"line_end":189,"column_start":41,"column_end":49},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1945}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":97258,"byte_end":97266,"line_start":198,"line_end":198,"column_start":41,"column_end":49},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":100442,"byte_end":100445,"line_start":63,"line_end":63,"column_start":19,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1908},"to":{"krate":0,"index":168}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":100929,"byte_end":100932,"line_start":79,"line_end":79,"column_start":17,"column_end":20},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1908},"to":{"krate":0,"index":166}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":101016,"byte_end":101019,"line_start":83,"line_end":83,"column_start":21,"column_end":24},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1908},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":101123,"byte_end":101126,"line_start":87,"line_end":87,"column_start":23,"column_end":26},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1908},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":107381,"byte_end":107390,"line_start":111,"line_end":111,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1919},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":108167,"byte_end":108176,"line_start":144,"line_end":144,"column_start":21,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1919},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":116569,"byte_end":116571,"line_start":281,"line_end":281,"column_start":6,"column_end":8},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1932},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":118605,"byte_end":118607,"line_start":366,"line_end":366,"column_start":21,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1932},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":119151,"byte_end":119154,"line_start":382,"line_end":382,"column_start":6,"column_end":9},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":121027,"byte_end":121030,"line_start":463,"line_end":463,"column_start":21,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1948},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138735,"byte_end":138744,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":175035,"byte_end":175044,"line_start":1018,"line_end":1018,"column_start":19,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1964},"to":{"krate":0,"index":1787}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":187376,"byte_end":187385,"line_start":1385,"line_end":1385,"column_start":27,"column_end":36},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":1945}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":187604,"byte_end":187613,"line_start":1394,"line_end":1394,"column_start":33,"column_end":42},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":1978}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":189028,"byte_end":189037,"line_start":1427,"line_end":1427,"column_start":27,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":189256,"byte_end":189265,"line_start":1436,"line_end":1436,"column_start":33,"column_end":42},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":1982}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":190521,"byte_end":190530,"line_start":1470,"line_end":1470,"column_start":25,"column_end":34},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":191523,"byte_end":191532,"line_start":1501,"line_end":1501,"column_start":21,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":192791,"byte_end":192800,"line_start":1536,"line_end":1536,"column_start":23,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":193390,"byte_end":193399,"line_start":1556,"line_end":1556,"column_start":23,"column_end":32},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":7504}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":197441,"byte_end":197450,"line_start":1664,"line_end":1664,"column_start":29,"column_end":38},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1964},"to":{"krate":16,"index":1643}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":197716,"byte_end":197729,"line_start":1672,"line_end":1672,"column_start":54,"column_end":67},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":493},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":198031,"byte_end":198047,"line_start":1684,"line_end":1684,"column_start":36,"column_end":52},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":501},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":198700,"byte_end":198709,"line_start":1707,"line_end":1707,"column_start":40,"column_end":49},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1964},"to":{"krate":16,"index":1163}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":223500,"byte_end":223507,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1987},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":226053,"byte_end":226060,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1987},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234917,"byte_end":234926,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":259199,"byte_end":259208,"line_start":785,"line_end":785,"column_start":19,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2007},"to":{"krate":0,"index":1806}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":266422,"byte_end":266431,"line_start":991,"line_end":991,"column_start":21,"column_end":30},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":6175}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":269438,"byte_end":269447,"line_start":1056,"line_end":1056,"column_start":27,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":1945}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":269628,"byte_end":269637,"line_start":1065,"line_end":1065,"column_start":33,"column_end":42},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":1978}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":272240,"byte_end":272249,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":272430,"byte_end":272439,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":1982}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":274974,"byte_end":274983,"line_start":1193,"line_end":1193,"column_start":25,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":276371,"byte_end":276380,"line_start":1230,"line_end":1230,"column_start":21,"column_end":30},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":278233,"byte_end":278242,"line_start":1280,"line_end":1280,"column_start":23,"column_end":32},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":279002,"byte_end":279011,"line_start":1303,"line_end":1303,"column_start":23,"column_end":32},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2007},"to":{"krate":2,"index":7504}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":284028,"byte_end":284037,"line_start":1427,"line_end":1427,"column_start":29,"column_end":38},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2007},"to":{"krate":16,"index":1643}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":284284,"byte_end":284300,"line_start":1437,"line_end":1437,"column_start":36,"column_end":52},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":620},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":284698,"byte_end":284707,"line_start":1452,"line_end":1452,"column_start":40,"column_end":49},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2007},"to":{"krate":16,"index":1163}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299804,"byte_end":299817,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2032},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":326250,"byte_end":326263,"line_start":698,"line_end":698,"column_start":19,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2032},"to":{"krate":0,"index":1787}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":337319,"byte_end":337332,"line_start":1016,"line_end":1016,"column_start":19,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2032},"to":{"krate":0,"index":1806}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":343593,"byte_end":343606,"line_start":1189,"line_end":1189,"column_start":21,"column_end":34},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":6175}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":346221,"byte_end":346234,"line_start":1251,"line_end":1251,"column_start":27,"column_end":40},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":1945}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":346465,"byte_end":346478,"line_start":1260,"line_end":1260,"column_start":33,"column_end":46},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":1978}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":348989,"byte_end":349002,"line_start":1321,"line_end":1321,"column_start":27,"column_end":40},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":349233,"byte_end":349246,"line_start":1330,"line_end":1330,"column_start":33,"column_end":46},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":1982}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":351184,"byte_end":351197,"line_start":1383,"line_end":1383,"column_start":29,"column_end":42},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":352405,"byte_end":352418,"line_start":1419,"line_end":1419,"column_start":21,"column_end":34},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":353514,"byte_end":353527,"line_start":1450,"line_end":1450,"column_start":23,"column_end":36},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":354265,"byte_end":354278,"line_start":1472,"line_end":1472,"column_start":23,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":7504}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":361988,"byte_end":362001,"line_start":1680,"line_end":1680,"column_start":29,"column_end":42},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2032},"to":{"krate":16,"index":1643}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":362267,"byte_end":362280,"line_start":1688,"line_end":1688,"column_start":54,"column_end":67},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":762},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":362586,"byte_end":362606,"line_start":1700,"line_end":1700,"column_start":36,"column_end":56},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":770},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":363021,"byte_end":363034,"line_start":1715,"line_end":1715,"column_start":40,"column_end":53},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2032},"to":{"krate":16,"index":1163}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":367837,"byte_end":367872,"line_start":1842,"line_end":1842,"column_start":40,"column_end":75},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":795},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":373413,"byte_end":373449,"line_start":1987,"line_end":1987,"column_start":40,"column_end":76},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":820},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":378860,"byte_end":378891,"line_start":2132,"line_end":2132,"column_start":40,"column_end":71},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":845},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":392965,"byte_end":392969,"line_start":54,"line_end":54,"column_start":20,"column_end":24},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2057},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401090,"byte_end":401094,"line_start":258,"line_end":258,"column_start":20,"column_end":24},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2057},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":401936,"byte_end":401940,"line_start":277,"line_end":277,"column_start":33,"column_end":37},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2057},"to":{"krate":0,"index":1787}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":403631,"byte_end":403635,"line_start":325,"line_end":325,"column_start":29,"column_end":33},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":1892}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":403715,"byte_end":403719,"line_start":326,"line_end":326,"column_start":36,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":1882}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":403824,"byte_end":403828,"line_start":328,"line_end":328,"column_start":60,"column_end":64},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":1618}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":403936,"byte_end":403940,"line_start":332,"line_end":332,"column_start":27,"column_end":31},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":1623}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":403984,"byte_end":403988,"line_start":335,"line_end":335,"column_start":35,"column_end":39},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":1655}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":404140,"byte_end":404144,"line_start":341,"line_end":341,"column_start":28,"column_end":32},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":1644}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":404267,"byte_end":404271,"line_start":345,"line_end":345,"column_start":35,"column_end":39},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":6175}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":404398,"byte_end":404402,"line_start":349,"line_end":349,"column_start":41,"column_end":45},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":1945}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":404626,"byte_end":404630,"line_start":358,"line_end":358,"column_start":41,"column_end":45},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":404851,"byte_end":404855,"line_start":367,"line_end":367,"column_start":38,"column_end":42},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":405040,"byte_end":405044,"line_start":376,"line_end":376,"column_start":35,"column_end":39},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":405218,"byte_end":405222,"line_start":382,"line_end":382,"column_start":37,"column_end":41},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407746,"byte_end":407754,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":413874,"byte_end":413882,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1806}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":414804,"byte_end":414812,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1806}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":416887,"byte_end":416895,"line_start":324,"line_end":324,"column_start":6,"column_end":14},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":419587,"byte_end":419595,"line_start":384,"line_end":384,"column_start":20,"column_end":28},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":424107,"byte_end":424115,"line_start":493,"line_end":493,"column_start":33,"column_end":41},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2088},"to":{"krate":0,"index":1787}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":425828,"byte_end":425836,"line_start":540,"line_end":540,"column_start":33,"column_end":41},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2088},"to":{"krate":0,"index":1806}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":426812,"byte_end":426820,"line_start":568,"line_end":568,"column_start":29,"column_end":37},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1892}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":426900,"byte_end":426908,"line_start":569,"line_end":569,"column_start":36,"column_end":44},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1882}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":427017,"byte_end":427025,"line_start":571,"line_end":571,"column_start":64,"column_end":72},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1618}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":427145,"byte_end":427153,"line_start":575,"line_end":575,"column_start":27,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1623}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":427227,"byte_end":427235,"line_start":578,"line_end":578,"column_start":65,"column_end":73},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1655}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":427974,"byte_end":427982,"line_start":599,"line_end":599,"column_start":28,"column_end":36},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1644}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":428117,"byte_end":428125,"line_start":603,"line_end":603,"column_start":35,"column_end":43},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":6175}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":428256,"byte_end":428264,"line_start":607,"line_end":607,"column_start":41,"column_end":49},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1945}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":428500,"byte_end":428508,"line_start":616,"line_end":616,"column_start":41,"column_end":49},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":428745,"byte_end":428753,"line_start":625,"line_end":625,"column_start":42,"column_end":50},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":428942,"byte_end":428950,"line_start":634,"line_end":634,"column_start":35,"column_end":43},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":429124,"byte_end":429132,"line_start":640,"line_end":640,"column_start":37,"column_end":45},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":429320,"byte_end":429328,"line_start":646,"line_end":646,"column_start":23,"column_end":31},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":7504}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":429805,"byte_end":429813,"line_start":664,"line_end":664,"column_start":27,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":1806}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":430655,"byte_end":430665,"line_start":690,"line_end":690,"column_start":43,"column_end":53},"kind":{"Impl":{"id":118}},"from":{"krate":1,"index":7574},"to":{"krate":2,"index":1806}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":445137,"byte_end":445164,"line_start":1078,"line_end":1078,"column_start":40,"column_end":67},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2099},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":450845,"byte_end":450878,"line_start":1227,"line_end":1227,"column_start":40,"column_end":73},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1239},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":456111,"byte_end":456139,"line_start":1369,"line_end":1369,"column_start":40,"column_end":68},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2103},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":461848,"byte_end":461882,"line_start":1518,"line_end":1518,"column_start":40,"column_end":74},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1294},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":466971,"byte_end":466994,"line_start":1660,"line_end":1660,"column_start":40,"column_end":63},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2095},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":472308,"byte_end":472337,"line_start":1805,"line_end":1805,"column_start":40,"column_end":69},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1346},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":473185,"byte_end":473193,"line_start":1830,"line_end":1830,"column_start":43,"column_end":51},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2088},"to":{"krate":16,"index":1643}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":473623,"byte_end":473636,"line_start":1842,"line_end":1842,"column_start":54,"column_end":67},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1361},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":474009,"byte_end":474024,"line_start":1855,"line_end":1855,"column_start":36,"column_end":51},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1369},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":474796,"byte_end":474804,"line_start":1877,"line_end":1877,"column_start":40,"column_end":48},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2088},"to":{"krate":16,"index":1163}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":475273,"byte_end":475281,"line_start":1891,"line_end":1891,"column_start":40,"column_end":48},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2088},"to":{"krate":16,"index":1163}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496316,"byte_end":496331,"line_start":132,"line_end":132,"column_start":16,"column_end":31},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1410},"to":{"krate":2,"index":1592}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496421,"byte_end":496436,"line_start":138,"line_end":138,"column_start":20,"column_end":35},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1410},"to":{"krate":2,"index":1618}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496542,"byte_end":496557,"line_start":144,"line_end":144,"column_start":13,"column_end":28},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1410},"to":{"krate":2,"index":1623}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":496583,"byte_end":496598,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1410},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":503758,"byte_end":503768,"line_start":322,"line_end":322,"column_start":23,"column_end":33},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2310},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":504517,"byte_end":504527,"line_start":337,"line_end":337,"column_start":16,"column_end":26},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2310},"to":{"krate":1,"index":1640}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":525400,"byte_end":525406,"line_start":125,"line_end":125,"column_start":18,"column_end":24},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2351},"to":{"krate":2,"index":1873}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":525902,"byte_end":525908,"line_start":138,"line_end":138,"column_start":6,"column_end":12},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":604003,"byte_end":604011,"line_start":395,"line_end":395,"column_start":23,"column_end":31},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":7504}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":639141,"byte_end":639154,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":639473,"byte_end":639486,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2382},"to":{"krate":2,"index":4779}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":518810,"byte_end":518823,"line_start":631,"line_end":631,"column_start":60,"column_end":73},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":519659,"byte_end":519672,"line_start":647,"line_end":647,"column_start":77,"column_end":90},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2401},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":520561,"byte_end":520568,"line_start":679,"line_end":679,"column_start":18,"column_end":25},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2410},"to":{"krate":2,"index":7504}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":655264,"byte_end":655265,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1725},"to":{"krate":0,"index":1721}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23028,"byte_end":23038,"line_start":549,"line_end":549,"column_start":55,"column_end":65},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1731},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23328,"byte_end":23338,"line_start":557,"line_end":557,"column_start":57,"column_end":67},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1731},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24410,"byte_end":24417,"line_start":593,"line_end":593,"column_start":6,"column_end":13},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":28408,"byte_end":28415,"line_start":703,"line_end":703,"column_start":23,"column_end":30},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2410},"to":{"krate":2,"index":5989}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":29063,"byte_end":29070,"line_start":720,"line_end":720,"column_start":36,"column_end":43},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2410},"to":{"krate":15,"index":149}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":30009,"byte_end":30026,"line_start":758,"line_end":758,"column_start":21,"column_end":38},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2446},"to":{"krate":2,"index":5984}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":30388,"byte_end":30395,"line_start":772,"line_end":772,"column_start":29,"column_end":36},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2410},"to":{"krate":16,"index":1643}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":30640,"byte_end":30654,"line_start":782,"line_end":782,"column_start":36,"column_end":50},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1774},"to":{"krate":16,"index":1247}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":31056,"byte_end":31063,"line_start":796,"line_end":796,"column_start":40,"column_end":47},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2410},"to":{"krate":16,"index":1163}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33077,"byte_end":33082,"line_start":873,"line_end":873,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":1787}},{"span":{"file_name":"/Users/andrewbetts/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37313,"byte_end":37318,"line_start":991,"line_end":991,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":1806}}]}